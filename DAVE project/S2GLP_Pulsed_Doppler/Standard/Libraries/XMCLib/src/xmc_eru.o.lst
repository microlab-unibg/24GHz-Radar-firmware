   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eru.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_ERU_ETL_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_ERU_ETL_Init:
  26              	.LFB132:
  27              	 .file 1 "../Libraries/XMCLib/src/xmc_eru.c"
   1:../Libraries/XMCLib/src/xmc_eru.c **** /**
   2:../Libraries/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../Libraries/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../Libraries/XMCLib/src/xmc_eru.c ****  *
   5:../Libraries/XMCLib/src/xmc_eru.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.16 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_eru.c ****  *
   9:../Libraries/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2017, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_eru.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  18:../Libraries/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_eru.c ****  * 
  21:../Libraries/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_eru.c ****  *
  36:../Libraries/XMCLib/src/xmc_eru.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_eru.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_eru.c ****  *
  39:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_eru.c ****  *
  42:../Libraries/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../Libraries/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../Libraries/XMCLib/src/xmc_eru.c ****  *
  45:../Libraries/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../Libraries/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../Libraries/XMCLib/src/xmc_eru.c ****  *
  48:../Libraries/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../Libraries/XMCLib/src/xmc_eru.c ****  */
  50:../Libraries/XMCLib/src/xmc_eru.c **** 
  51:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../Libraries/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../Libraries/XMCLib/src/xmc_eru.c **** 
  55:../Libraries/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../Libraries/XMCLib/src/xmc_eru.c **** 
  57:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../Libraries/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../Libraries/XMCLib/src/xmc_eru.c **** 
  61:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../Libraries/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../Libraries/XMCLib/src/xmc_eru.c **** 
  64:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../Libraries/XMCLib/src/xmc_eru.c **** 
  70:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../Libraries/XMCLib/src/xmc_eru.c **** 
  76:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../Libraries/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../Libraries/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../Libraries/XMCLib/src/xmc_eru.c **** 
  80:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../Libraries/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../Libraries/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../Libraries/XMCLib/src/xmc_eru.c **** 
  94:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../Libraries/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../Libraries/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../Libraries/XMCLib/src/xmc_eru.c **** 
 100:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../Libraries/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../Libraries/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../Libraries/XMCLib/src/xmc_eru.c **** 
 106:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../Libraries/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../Libraries/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../Libraries/XMCLib/src/xmc_eru.c **** 
 112:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../Libraries/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../Libraries/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../Libraries/XMCLib/src/xmc_eru.c **** 
 117:../Libraries/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../Libraries/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../Libraries/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../Libraries/XMCLib/src/xmc_eru.c ****  
 123:../Libraries/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../Libraries/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../Libraries/XMCLib/src/xmc_eru.c **** { 
  28              	 .loc 1 130 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 70B5     	 push {r4,r5,r6,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 4,-16
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 6,-8
  39              	 .cfi_offset 14,-4
  40              	 .loc 1 130 0
  41 0002 1646     	 mov r6,r2
  42 0004 0546     	 mov r5,r0
  43 0006 0C46     	 mov r4,r1
 131:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../Libraries/XMCLib/src/xmc_eru.c **** 
 134:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  44              	 .loc 1 134 0
  45 0008 FFF7FEFF 	 bl XMC_ERU_Enable
  46              	.LVL1:
 135:../Libraries/XMCLib/src/xmc_eru.c **** 
 136:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
 137:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  47              	 .loc 1 137 0
  48 000c A200     	 lsls r2,r4,#2
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  49              	 .loc 1 136 0
  50 000e 2868     	 ldr r0,[r5]
 138:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  51              	 .loc 1 138 0
  52 0010 3368     	 ldr r3,[r6]
 137:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  53              	 .loc 1 137 0
  54 0012 0F21     	 movs r1,#15
  55 0014 9140     	 lsls r1,r1,r2
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  56              	 .loc 1 136 0
  57 0016 20EA0101 	 bic r1,r0,r1
  58              	 .loc 1 138 0
  59 001a 9340     	 lsls r3,r3,r2
 137:../Libraries/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  60              	 .loc 1 137 0
  61 001c 0B43     	 orrs r3,r3,r1
 136:../Libraries/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  62              	 .loc 1 136 0
  63 001e 2B60     	 str r3,[r5]
 139:../Libraries/XMCLib/src/xmc_eru.c ****   
 140:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  64              	 .loc 1 140 0
  65 0020 0434     	 adds r4,r4,#4
  66 0022 7368     	 ldr r3,[r6,#4]
  67 0024 45F82430 	 str r3,[r5,r4,lsl#2]
  68 0028 70BD     	 pop {r4,r5,r6,pc}
  69              	 .cfi_endproc
  70              	.LFE132:
  72 002a 00BF     	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
  73              	 .align 2
  74              	 .global XMC_ERU_OGU_Init
  75              	 .thumb
  76              	 .thumb_func
  78              	XMC_ERU_OGU_Init:
  79              	.LFB133:
 141:../Libraries/XMCLib/src/xmc_eru.c **** }
 142:../Libraries/XMCLib/src/xmc_eru.c **** 
 143:../Libraries/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../Libraries/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../Libraries/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../Libraries/XMCLib/src/xmc_eru.c **** {
  80              	 .loc 1 147 0
  81              	 .cfi_startproc
  82              	 
  83              	 
  84              	.LVL2:
  85 0000 70B5     	 push {r4,r5,r6,lr}
  86              	.LCFI1:
  87              	 .cfi_def_cfa_offset 16
  88              	 .cfi_offset 4,-16
  89              	 .cfi_offset 5,-12
  90              	 .cfi_offset 6,-8
  91              	 .cfi_offset 14,-4
  92              	 .loc 1 147 0
  93 0002 0C46     	 mov r4,r1
  94 0004 1646     	 mov r6,r2
  95 0006 0546     	 mov r5,r0
 148:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../Libraries/XMCLib/src/xmc_eru.c **** 
 151:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 152:../Libraries/XMCLib/src/xmc_eru.c **** 
 153:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
  96              	 .loc 1 153 0
  97 0008 0834     	 adds r4,r4,#8
 151:../Libraries/XMCLib/src/xmc_eru.c **** 
  98              	 .loc 1 151 0
  99 000a FFF7FEFF 	 bl XMC_ERU_Enable
 100              	.LVL3:
 101              	 .loc 1 153 0
 102 000e 3368     	 ldr r3,[r6]
 103 0010 45F82430 	 str r3,[r5,r4,lsl#2]
 104 0014 70BD     	 pop {r4,r5,r6,pc}
 105              	 .cfi_endproc
 106              	.LFE133:
 108 0016 00BF     	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 109              	 .align 2
 110              	 .global XMC_ERU_ETL_SetInput
 111              	 .thumb
 112              	 .thumb_func
 114              	XMC_ERU_ETL_SetInput:
 115              	.LFB134:
 154:../Libraries/XMCLib/src/xmc_eru.c **** }
 155:../Libraries/XMCLib/src/xmc_eru.c **** 
 156:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../Libraries/XMCLib/src/xmc_eru.c **** {
 116              	 .loc 1 161 0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120              	 
 121              	.LVL4:
 122 0000 30B4     	 push {r4,r5}
 123              	.LCFI2:
 124              	 .cfi_def_cfa_offset 8
 125              	 .cfi_offset 4,-8
 126              	 .cfi_offset 5,-4
 162:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../Libraries/XMCLib/src/xmc_eru.c **** 
 167:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 127              	 .loc 1 167 0
 128 0002 8900     	 lsls r1,r1,#2
 129              	.LVL5:
 130 0004 0468     	 ldr r4,[r0]
 131 0006 0F25     	 movs r5,#15
 168:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 132              	 .loc 1 168 0
 133 0008 42EA8303 	 orr r3,r2,r3,lsl#2
 134              	.LVL6:
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 135              	 .loc 1 167 0
 136 000c 8D40     	 lsls r5,r5,r1
 137              	 .loc 1 168 0
 138 000e 03FA01F2 	 lsl r2,r3,r1
 139              	.LVL7:
 167:../Libraries/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 140              	 .loc 1 167 0
 141 0012 24EA0503 	 bic r3,r4,r5
 142 0016 1343     	 orrs r3,r3,r2
 143 0018 0360     	 str r3,[r0]
 169:../Libraries/XMCLib/src/xmc_eru.c **** }
 144              	 .loc 1 169 0
 145 001a 30BC     	 pop {r4,r5}
 146              	.LCFI3:
 147              	 .cfi_restore 5
 148              	 .cfi_restore 4
 149              	 .cfi_def_cfa_offset 0
 150 001c 7047     	 bx lr
 151              	 .cfi_endproc
 152              	.LFE134:
 154 001e 00BF     	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 155              	 .align 2
 156              	 .global XMC_ERU_ETL_SetSource
 157              	 .thumb
 158              	 .thumb_func
 160              	XMC_ERU_ETL_SetSource:
 161              	.LFB135:
 170:../Libraries/XMCLib/src/xmc_eru.c **** 
 171:../Libraries/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../Libraries/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../Libraries/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../Libraries/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../Libraries/XMCLib/src/xmc_eru.c **** {
 162              	 .loc 1 176 0
 163              	 .cfi_startproc
 164              	 
 165              	 
 166              	 
 167              	.LVL8:
 177:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../Libraries/XMCLib/src/xmc_eru.c **** 
 181:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 168              	 .loc 1 181 0
 169 0000 0431     	 adds r1,r1,#4
 170              	.LVL9:
 171 0002 02F00F02 	 and r2,r2,#15
 172              	.LVL10:
 173 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 174 000a 23F47063 	 bic r3,r3,#3840
 175 000e 43EA0222 	 orr r2,r3,r2,lsl#8
 176 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 177 0016 7047     	 bx lr
 178              	 .cfi_endproc
 179              	.LFE135:
 181              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 182              	 .align 2
 183              	 .global XMC_ERU_ETL_SetEdgeDetection
 184              	 .thumb
 185              	 .thumb_func
 187              	XMC_ERU_ETL_SetEdgeDetection:
 188              	.LFB136:
 182:../Libraries/XMCLib/src/xmc_eru.c **** }
 183:../Libraries/XMCLib/src/xmc_eru.c **** 
 184:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../Libraries/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../Libraries/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../Libraries/XMCLib/src/xmc_eru.c **** {
 189              	 .loc 1 188 0
 190              	 .cfi_startproc
 191              	 
 192              	 
 193              	 
 194              	.LVL11:
 189:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../Libraries/XMCLib/src/xmc_eru.c **** 
 193:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 195              	 .loc 1 193 0
 196 0000 0431     	 adds r1,r1,#4
 197              	.LVL12:
 198 0002 02F00302 	 and r2,r2,#3
 199              	.LVL13:
 200 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 201 000a 23F00C03 	 bic r3,r3,#12
 202 000e 43EA8202 	 orr r2,r3,r2,lsl#2
 203 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 204 0016 7047     	 bx lr
 205              	 .cfi_endproc
 206              	.LFE136:
 208              	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 209              	 .align 2
 210              	 .global XMC_ERU_ETL_GetEdgeDetection
 211              	 .thumb
 212              	 .thumb_func
 214              	XMC_ERU_ETL_GetEdgeDetection:
 215              	.LFB137:
 194:../Libraries/XMCLib/src/xmc_eru.c **** }
 195:../Libraries/XMCLib/src/xmc_eru.c **** 
 196:../Libraries/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../Libraries/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../Libraries/XMCLib/src/xmc_eru.c **** {
 216              	 .loc 1 198 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220              	 
 221              	.LVL14:
 199:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../Libraries/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 222              	 .loc 1 201 0
 223 0000 0431     	 adds r1,r1,#4
 224              	.LVL15:
 225 0002 50F82100 	 ldr r0,[r0,r1,lsl#2]
 226              	.LVL16:
 202:../Libraries/XMCLib/src/xmc_eru.c **** }
 227              	 .loc 1 202 0
 228 0006 C0F38100 	 ubfx r0,r0,#2,#2
 229 000a 7047     	 bx lr
 230              	 .cfi_endproc
 231              	.LFE137:
 233              	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 234              	 .align 2
 235              	 .global XMC_ERU_ETL_SetStatusFlagMode
 236              	 .thumb
 237              	 .thumb_func
 239              	XMC_ERU_ETL_SetStatusFlagMode:
 240              	.LFB138:
 203:../Libraries/XMCLib/src/xmc_eru.c **** 
 204:../Libraries/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../Libraries/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../Libraries/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../Libraries/XMCLib/src/xmc_eru.c **** {
 241              	 .loc 1 208 0
 242              	 .cfi_startproc
 243              	 
 244              	 
 245              	 
 246              	.LVL17:
 209:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../Libraries/XMCLib/src/xmc_eru.c **** 
 213:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 247              	 .loc 1 213 0
 248 0000 0431     	 adds r1,r1,#4
 249              	.LVL18:
 250 0002 02F00102 	 and r2,r2,#1
 251              	.LVL19:
 252 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 253 000a 23F00203 	 bic r3,r3,#2
 254 000e 43EA4202 	 orr r2,r3,r2,lsl#1
 255 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 256 0016 7047     	 bx lr
 257              	 .cfi_endproc
 258              	.LFE138:
 260              	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 261              	 .align 2
 262              	 .global XMC_ERU_ETL_EnableOutputTrigger
 263              	 .thumb
 264              	 .thumb_func
 266              	XMC_ERU_ETL_EnableOutputTrigger:
 267              	.LFB139:
 214:../Libraries/XMCLib/src/xmc_eru.c **** }
 215:../Libraries/XMCLib/src/xmc_eru.c **** 
 216:../Libraries/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../Libraries/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../Libraries/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../Libraries/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../Libraries/XMCLib/src/xmc_eru.c **** {
 268              	 .loc 1 221 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272              	 
 273              	.LVL20:
 222:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../Libraries/XMCLib/src/xmc_eru.c **** 
 226:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 274              	 .loc 1 226 0
 275 0000 0431     	 adds r1,r1,#4
 276              	.LVL21:
 277 0002 02F00702 	 and r2,r2,#7
 278              	.LVL22:
 279 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 280 000a 23F07003 	 bic r3,r3,#112
 281 000e 43EA0212 	 orr r2,r3,r2,lsl#4
 282 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 227:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 283              	 .loc 1 227 0
 284 0016 50F82130 	 ldr r3,[r0,r1,lsl#2]
 285 001a 43F00103 	 orr r3,r3,#1
 286 001e 40F82130 	 str r3,[r0,r1,lsl#2]
 287 0022 7047     	 bx lr
 288              	 .cfi_endproc
 289              	.LFE139:
 291              	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 292              	 .align 2
 293              	 .global XMC_ERU_ETL_DisableOutputTrigger
 294              	 .thumb
 295              	 .thumb_func
 297              	XMC_ERU_ETL_DisableOutputTrigger:
 298              	.LFB140:
 228:../Libraries/XMCLib/src/xmc_eru.c **** }
 229:../Libraries/XMCLib/src/xmc_eru.c **** 
 230:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../Libraries/XMCLib/src/xmc_eru.c **** {
 299              	 .loc 1 232 0
 300              	 .cfi_startproc
 301              	 
 302              	 
 303              	 
 304              	.LVL23:
 233:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../Libraries/XMCLib/src/xmc_eru.c **** 
 236:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 305              	 .loc 1 236 0
 306 0000 0431     	 adds r1,r1,#4
 307              	.LVL24:
 308 0002 50F82130 	 ldr r3,[r0,r1,lsl#2]
 309 0006 23F00103 	 bic r3,r3,#1
 310 000a 40F82130 	 str r3,[r0,r1,lsl#2]
 311 000e 7047     	 bx lr
 312              	 .cfi_endproc
 313              	.LFE140:
 315              	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 316              	 .align 2
 317              	 .global XMC_ERU_OGU_EnablePatternDetection
 318              	 .thumb
 319              	 .thumb_func
 321              	XMC_ERU_OGU_EnablePatternDetection:
 322              	.LFB141:
 237:../Libraries/XMCLib/src/xmc_eru.c **** }
 238:../Libraries/XMCLib/src/xmc_eru.c **** 
 239:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../Libraries/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../Libraries/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../Libraries/XMCLib/src/xmc_eru.c **** {
 323              	 .loc 1 243 0
 324              	 .cfi_startproc
 325              	 
 326              	 
 327              	 
 328              	.LVL25:
 244:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../Libraries/XMCLib/src/xmc_eru.c **** 
 248:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 329              	 .loc 1 248 0
 330 0000 0831     	 adds r1,r1,#8
 331              	.LVL26:
 332 0002 02F00F02 	 and r2,r2,#15
 333              	.LVL27:
 334 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 335 000a 23F47043 	 bic r3,r3,#61440
 336 000e 43EA0232 	 orr r2,r3,r2,lsl#12
 337 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 249:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 338              	 .loc 1 249 0
 339 0016 50F82130 	 ldr r3,[r0,r1,lsl#2]
 340 001a 43F00403 	 orr r3,r3,#4
 341 001e 40F82130 	 str r3,[r0,r1,lsl#2]
 342 0022 7047     	 bx lr
 343              	 .cfi_endproc
 344              	.LFE141:
 346              	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 347              	 .align 2
 348              	 .global XMC_ERU_OGU_DisablePatternDetection
 349              	 .thumb
 350              	 .thumb_func
 352              	XMC_ERU_OGU_DisablePatternDetection:
 353              	.LFB142:
 250:../Libraries/XMCLib/src/xmc_eru.c **** }
 251:../Libraries/XMCLib/src/xmc_eru.c **** 
 252:../Libraries/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../Libraries/XMCLib/src/xmc_eru.c **** {
 354              	 .loc 1 254 0
 355              	 .cfi_startproc
 356              	 
 357              	 
 358              	 
 359              	.LVL28:
 255:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../Libraries/XMCLib/src/xmc_eru.c **** 
 258:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 360              	 .loc 1 258 0
 361 0000 0831     	 adds r1,r1,#8
 362              	.LVL29:
 363 0002 50F82130 	 ldr r3,[r0,r1,lsl#2]
 364 0006 23F00403 	 bic r3,r3,#4
 365 000a 40F82130 	 str r3,[r0,r1,lsl#2]
 366 000e 7047     	 bx lr
 367              	 .cfi_endproc
 368              	.LFE142:
 370              	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 371              	 .align 2
 372              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 373              	 .thumb
 374              	 .thumb_func
 376              	XMC_ERU_OGU_EnablePeripheralTrigger:
 377              	.LFB143:
 259:../Libraries/XMCLib/src/xmc_eru.c **** }
 260:../Libraries/XMCLib/src/xmc_eru.c **** 
 261:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../Libraries/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../Libraries/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../Libraries/XMCLib/src/xmc_eru.c **** {
 378              	 .loc 1 265 0
 379              	 .cfi_startproc
 380              	 
 381              	 
 382              	 
 383              	.LVL30:
 266:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../Libraries/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../Libraries/XMCLib/src/xmc_eru.c **** 
 271:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 384              	 .loc 1 271 0
 385 0000 0831     	 adds r1,r1,#8
 386              	.LVL31:
 387 0002 02F00302 	 and r2,r2,#3
 388              	.LVL32:
 389 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 390 000a 23F00303 	 bic r3,r3,#3
 391 000e 1A43     	 orrs r2,r2,r3
 392 0010 40F82120 	 str r2,[r0,r1,lsl#2]
 393 0014 7047     	 bx lr
 394              	 .cfi_endproc
 395              	.LFE143:
 397 0016 00BF     	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 398              	 .align 2
 399              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 400              	 .thumb
 401              	 .thumb_func
 403              	XMC_ERU_OGU_DisablePeripheralTrigger:
 404              	.LFB144:
 272:../Libraries/XMCLib/src/xmc_eru.c **** }
 273:../Libraries/XMCLib/src/xmc_eru.c **** 
 274:../Libraries/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../Libraries/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../Libraries/XMCLib/src/xmc_eru.c **** {
 405              	 .loc 1 277 0
 406              	 .cfi_startproc
 407              	 
 408              	 
 409              	 
 410              	.LVL33:
 278:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../Libraries/XMCLib/src/xmc_eru.c **** 
 281:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 411              	 .loc 1 281 0
 412 0000 0831     	 adds r1,r1,#8
 413              	.LVL34:
 414 0002 50F82130 	 ldr r3,[r0,r1,lsl#2]
 415 0006 23F00303 	 bic r3,r3,#3
 416 000a 40F82130 	 str r3,[r0,r1,lsl#2]
 417 000e 7047     	 bx lr
 418              	 .cfi_endproc
 419              	.LFE144:
 421              	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 422              	 .align 2
 423              	 .global XMC_ERU_OGU_SetServiceRequestMode
 424              	 .thumb
 425              	 .thumb_func
 427              	XMC_ERU_OGU_SetServiceRequestMode:
 428              	.LFB145:
 282:../Libraries/XMCLib/src/xmc_eru.c **** }
 283:../Libraries/XMCLib/src/xmc_eru.c **** 
 284:../Libraries/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../Libraries/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../Libraries/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../Libraries/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../Libraries/XMCLib/src/xmc_eru.c **** {
 429              	 .loc 1 288 0
 430              	 .cfi_startproc
 431              	 
 432              	 
 433              	 
 434              	.LVL35:
 289:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../Libraries/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../Libraries/XMCLib/src/xmc_eru.c **** 
 293:../Libraries/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 435              	 .loc 1 293 0
 436 0000 0831     	 adds r1,r1,#8
 437              	.LVL36:
 438 0002 02F00302 	 and r2,r2,#3
 439              	.LVL37:
 440 0006 50F82130 	 ldr r3,[r0,r1,lsl#2]
 441 000a 23F03003 	 bic r3,r3,#48
 442 000e 43EA0212 	 orr r2,r3,r2,lsl#4
 443 0012 40F82120 	 str r2,[r0,r1,lsl#2]
 444 0016 7047     	 bx lr
 445              	 .cfi_endproc
 446              	.LFE145:
 448              	 .text
 449              	.Letext0:
 450              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 451              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 452              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Libraries/XMCLib/inc/xmc_eru.h"
 453              	 .file 5 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:20     .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:25     .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:73     .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:78     .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:109    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:114    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:155    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:160    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:182    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:187    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:209    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:214    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:234    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:239    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:261    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:266    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:292    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:297    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:316    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:321    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:347    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:352    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:371    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:376    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:398    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:403    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:422    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:427    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_ERU_Enable
