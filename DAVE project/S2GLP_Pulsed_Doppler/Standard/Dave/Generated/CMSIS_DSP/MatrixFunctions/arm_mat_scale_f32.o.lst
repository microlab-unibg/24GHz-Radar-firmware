   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_scale_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_scale_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_scale_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_scale_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Title:        arm_mat_scale_f32.c
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Description:  Multiplies a floating-point matrix by a scalar
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @ingroup groupMatrix
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @defgroup MatrixScale Matrix Scale
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * Multiplies a matrix by a scalar.  This is accomplished by multiplying each element in the
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * matrix by the scalar.  For example:
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * \image html MatrixScale.gif "Matrix Scaling of a 3 x 3 matrix"
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * The function checks to make sure that the input and output matrices are of the same size.
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * In the fixed-point Q15 and Q31 functions, <code>scale</code> is represented by
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * a fractional multiplication <code>scaleFract</code> and an arithmetic shift <code>shift</code>.
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * The shift allows the gain of the scaling operation to exceed 1.0.
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * The overall scale factor applied to the fixed-point data is
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * <pre>
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *     scale = scaleFract * 2^shift.
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * </pre>
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  */
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /**
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @addtogroup MatrixScale
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @{
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  */
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** /**
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @brief Floating-point matrix scaling.
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @param[in]       *pSrc points to input matrix structure
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @param[in]       scale scale factor to be applied
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @param[out]      *pDst points to output matrix structure
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * @return     		The function returns either <code>ARM_MATH_SIZE_MISMATCH</code>
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  * or <code>ARM_MATH_SUCCESS</code> based on the outcome of size checking.
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  *
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****  */
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** arm_status arm_mat_scale_f32(
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   const arm_matrix_instance_f32 * pSrc,
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t scale,
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   arm_matrix_instance_f32 * pDst)
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** {
  28              	 .loc 1 72 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  34 0000 70B4     	 push {r4,r5,r6}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 6,-4
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  40              	 .loc 1 74 0
  41 0002 92E81800 	 ldmia r2,{r3,r4}
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   arm_status status;                             /* status of matrix scaling     */
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #if defined (ARM_MATH_DSP)
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t in1, in2, in3, in4;                  /* temporary variables */
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t out1, out2, out3, out4;              /* temporary variables */
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #endif //      #if defined (ARM_MATH_DSP)
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   /* Check for matrix mismatch condition */
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   if ((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
  42              	 .loc 1 88 0
  43 0006 0668     	 ldr r6,[r0]
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  44              	 .loc 1 73 0
  45 0008 4568     	 ldr r5,[r0,#4]
  46              	.LVL1:
  47              	 .loc 1 88 0
  48 000a 9E42     	 cmp r6,r3
  49 000c 3ED1     	 bne .L8
  50 000e 07EE901A 	 fmsr s15,r1
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   {
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   }
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   else
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   {
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Total number of samples in the input matrix */
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
  51              	 .loc 1 97 0
  52 0012 0388     	 ldrh r3,[r0]
  53 0014 4188     	 ldrh r1,[r0,#2]
  54              	.LVL2:
  55 0016 03FB01F1 	 mul r1,r3,r1
  56              	.LVL3:
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #if defined (ARM_MATH_DSP)
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Loop Unrolling */
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     blkCnt = numSamples >> 2;
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     while (blkCnt > 0u)
  57              	 .loc 1 108 0
  58 001a 8E08     	 lsrs r6,r1,#2
  59              	.LVL4:
  60 001c 25D0     	 beq .L3
  61 001e 05F11002 	 add r2,r5,#16
  62              	.LVL5:
  63 0022 04F11003 	 add r3,r4,#16
  64 0026 3046     	 mov r0,r6
  65              	.LVL6:
  66              	.L4:
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* C(m,n) = A(m,n) * scale */
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* Scaling and results are stored in the destination buffer. */
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       in1 = pIn[0];
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       in2 = pIn[1];
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       in3 = pIn[2];
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       in4 = pIn[3];
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out1 = in1 * scale;
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out2 = in2 * scale;
  67              	 .loc 1 118 0
  68 0028 52ED035A 	 flds s11,[r2,#-12]
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out3 = in3 * scale;
  69              	 .loc 1 119 0
  70 002c 12ED026A 	 flds s12,[r2,#-8]
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out4 = in4 * scale;
  71              	 .loc 1 120 0
  72 0030 52ED016A 	 flds s13,[r2,#-4]
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out2 = in2 * scale;
  73              	 .loc 1 117 0
  74 0034 12ED047A 	 flds s14,[r2,#-16]
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out3 = in3 * scale;
  75              	 .loc 1 118 0
  76 0038 67EEA55A 	 fmuls s11,s15,s11
  77              	.LVL7:
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out4 = in4 * scale;
  78              	 .loc 1 119 0
  79 003c 27EE866A 	 fmuls s12,s15,s12
  80              	.LVL8:
  81              	 .loc 1 120 0
  82 0040 67EEA66A 	 fmuls s13,s15,s13
  83              	.LVL9:
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       out2 = in2 * scale;
  84              	 .loc 1 117 0
  85 0044 27EE277A 	 fmuls s14,s14,s15
  86              	.LVL10:
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
  87              	 .loc 1 108 0
  88 0048 0138     	 subs r0,r0,#1
  89              	.LVL11:
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut[0] = out1;
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut[1] = out2;
  90              	 .loc 1 124 0
  91 004a 43ED035A 	 fsts s11,[r3,#-12]
  92              	.LVL12:
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut[2] = out3;
  93              	 .loc 1 125 0
  94 004e 03ED026A 	 fsts s12,[r3,#-8]
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut[3] = out4;
  95              	 .loc 1 126 0
  96 0052 43ED016A 	 fsts s13,[r3,#-4]
  97              	.LVL13:
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut[1] = out2;
  98              	 .loc 1 123 0
  99 0056 03ED047A 	 fsts s14,[r3,#-16]
 100 005a 02F11002 	 add r2,r2,#16
 101              	.LVL14:
 102 005e 03F11003 	 add r3,r3,#16
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
 103              	 .loc 1 108 0
 104 0062 E1D1     	 bne .L4
 105 0064 3601     	 lsls r6,r6,#4
 106 0066 3544     	 add r5,r5,r6
 107 0068 3444     	 add r4,r4,r6
 108              	.LVL15:
 109              	.L3:
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* update pointers to process next sampels */
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pIn += 4u;
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       pOut += 4u;
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* Decrement the numSamples loop counter */
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       blkCnt--;
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     }
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****      ** No loop unrolling is used. */
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     blkCnt = numSamples % 0x4u;
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #else
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Run the below code for Cortex-M0 */
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Initialize blkCnt with number of samples */
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     blkCnt = numSamples;
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     while (blkCnt > 0u)
 110              	 .loc 1 149 0
 111 006a 11F00303 	 ands r3,r1,#3
 112              	.LVL16:
 113 006e 18BF     	 it ne
 114 0070 2246     	 movne r2,r4
 115 0072 07D0     	 beq .L7
 116              	.L6:
 117              	.LVL17:
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* C(m,n) = A(m,n) * scale */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* The results are stored in the destination buffer. */
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       *pOut++ = (*pIn++) * scale;
 118              	 .loc 1 153 0
 119 0074 B5EC017A 	 fldmias r5!,{s14}
 120              	.LVL18:
 121 0078 27EE277A 	 fmuls s14,s14,s15
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
 122              	 .loc 1 149 0
 123 007c 013B     	 subs r3,r3,#1
 124              	.LVL19:
 125              	 .loc 1 153 0
 126 007e A2EC017A 	 fstmias r2!,{s14}
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     {
 127              	 .loc 1 149 0
 128 0082 F7D1     	 bne .L6
 129              	.L7:
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       /* Decrement the loop counter */
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****       blkCnt--;
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     }
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****     status = ARM_MATH_SUCCESS;
 130              	 .loc 1 160 0
 131 0084 0020     	 movs r0,#0
 132              	.LVL20:
 133              	.L2:
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   }
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   /* Return to application */
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   return (status);
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c **** }
 134              	 .loc 1 165 0
 135 0086 40B2     	 sxtb r0,r0
 136 0088 70BC     	 pop {r4,r5,r6}
 137              	.LCFI1:
 138              	 .cfi_remember_state
 139              	 .cfi_restore 6
 140              	 .cfi_restore 5
 141              	 .cfi_restore 4
 142              	 .cfi_def_cfa_offset 0
 143              	.LVL21:
 144 008a 7047     	 bx lr
 145              	.LVL22:
 146              	.L8:
 147              	.LCFI2:
 148              	 .cfi_restore_state
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_f32.c ****   }
 149              	 .loc 1 91 0
 150 008c FD20     	 movs r0,#253
 151              	.LVL23:
 152 008e FAE7     	 b .L2
 153              	 .cfi_endproc
 154              	.LFE135:
 156              	 .text
 157              	.Letext0:
 158              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 159              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 160              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_scale_f32.c
    {standard input}:20     .text.arm_mat_scale_f32:00000000 $t
    {standard input}:25     .text.arm_mat_scale_f32:00000000 arm_mat_scale_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
