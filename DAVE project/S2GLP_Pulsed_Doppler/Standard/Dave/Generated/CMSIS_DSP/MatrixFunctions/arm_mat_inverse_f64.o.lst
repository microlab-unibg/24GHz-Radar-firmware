   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_inverse_f64.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global __aeabi_dcmpgt
  20              	 .global __aeabi_dcmpeq
  21              	 .global __aeabi_ddiv
  22              	 .global __aeabi_dmul
  23              	 .global __aeabi_dsub
  24              	 .section .text.arm_mat_inverse_f64,"ax",%progbits
  25              	 .align 2
  26              	 .global arm_mat_inverse_f64
  27              	 .thumb
  28              	 .thumb_func
  30              	arm_mat_inverse_f64:
  31              	.LFB135:
  32              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Title:        arm_mat_inverse_f64.c
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Description:  Floating-point matrix inverse
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /*
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @ingroup groupMatrix
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @defgroup MatrixInv Matrix Inverse
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Computes the inverse of a matrix.
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * The inverse is defined only if the input matrix is square and non-singular (the determinant
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * is non-zero). The function checks that the input and output matrices are square and of the
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * same size.
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * Matrix inversion is numerically sensitive and the CMSIS DSP library only supports matrix
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * inversion of floating-point matrices.
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  *
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * \par Algorithm
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * The Gauss-Jordan method is used to find the inverse.
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * The algorithm performs a sequence of elementary row-operations until it
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * reduces the input matrix to an identity matrix. Applying the same sequence
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * of elementary row-operations to an identity matrix yields the inverse matrix.
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * If the input matrix is singular, then the algorithm terminates and returns error status
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * <code>ARM_MATH_SINGULAR</code>.
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * \image html MatrixInverse.gif "Matrix Inverse of a 3 x 3 matrix using Gauss-Jordan Method"
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @addtogroup MatrixInv
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @{
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** /**
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @brief Floating-point matrix inverse.
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @param[in]       *pSrc points to input matrix structure
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @param[out]      *pDst points to output matrix structure
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * @return     		The function returns
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> if the input matrix is not square or if the size
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * of the output matrix does not match the size of the input matrix.
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * If the input matrix is found to be singular (non-invertible), then the function returns
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  * <code>ARM_MATH_SINGULAR</code>.  Otherwise, the function returns <code>ARM_MATH_SUCCESS</code>.
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****  */
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** arm_status arm_mat_inverse_f64(
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   const arm_matrix_instance_f64 * pSrc,
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_matrix_instance_f64 * pDst)
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** {
  33              	 .loc 1 76 0
  34              	 .cfi_startproc
  35              	 
  36              	 
  37              	.LVL0:
  38 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  39              	.LCFI0:
  40              	 .cfi_def_cfa_offset 36
  41              	 .cfi_offset 4,-36
  42              	 .cfi_offset 5,-32
  43              	 .cfi_offset 6,-28
  44              	 .cfi_offset 7,-24
  45              	 .cfi_offset 8,-20
  46              	 .cfi_offset 9,-16
  47              	 .cfi_offset 10,-12
  48              	 .cfi_offset 11,-8
  49              	 .cfi_offset 14,-4
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data 
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #if defined (ARM_MATH_DSP)
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t maxC;                                /* maximum value in the column */
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0u, j, loopCnt, k, l;      /* loop counters */
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
  50              	 .loc 1 98 0
  51 0004 4288     	 ldrh r2,[r0,#2]
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
  52              	 .loc 1 82 0
  53 0006 0388     	 ldrh r3,[r0]
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  54              	 .loc 1 77 0
  55 0008 4068     	 ldr r0,[r0,#4]
  56              	.LVL1:
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  57              	 .loc 1 76 0
  58 000a 99B0     	 sub sp,sp,#100
  59              	.LCFI1:
  60              	 .cfi_def_cfa_offset 136
  61              	 .loc 1 98 0
  62 000c 9A42     	 cmp r2,r3
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pIn = pSrc->pData;                  /* input data matrix pointer */
  63              	 .loc 1 77 0
  64 000e 0E90     	 str r0,[sp,#56]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  65              	 .loc 1 78 0
  66 0010 4868     	 ldr r0,[r1,#4]
  67              	 .loc 1 98 0
  68 0012 0392     	 str r2,[sp,#12]
  69              	.LVL2:
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  70              	 .loc 1 78 0
  71 0014 0D90     	 str r0,[sp,#52]
  72              	.LVL3:
  73              	 .loc 1 98 0
  74 0016 04D0     	 beq .L84
  75              	.L41:
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****      || (pSrc->numRows != pDst->numRows))
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
  76              	 .loc 1 102 0
  77 0018 FD20     	 movs r0,#253
  78              	.LVL4:
  79              	.L2:
  80 001a 40B2     	 sxtb r0,r0
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   else
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 * Matrix Inverse can be solved using elementary row operations.
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	Gauss-Jordan Method:
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	   1. First combine the identity matrix and the input matrix separated by a bar to form an
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *        augmented matrix as follows:
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *				        _ 	      	       _         _	       _
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |  a11  a12 | 1   0  |       |  X11 X12  |
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |           |        |   =   |           |
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |_ a21  a22 | 0   1 _|       |_ X21 X21 _|
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		2. In our implementation, pDst Matrix is used as identity matrix.
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		3. Begin with the first row. Let i = 1.
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    4. Check to see if the pivot for column i is the greatest of the column.
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   The pivot is the element of the main diagonal that is on the current row.
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   For instance, if working with row i, then the pivot element is aii.
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   If the pivot is not the most significant of the columns, exchange that row with a row
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   below it that does contain the most significant value in column i. If the most
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *         significant value of the column is zero, then an inverse to that matrix does not exist.
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   The most significant value of the column is the absolute maximum.
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    5. Divide every element of row i by the pivot.
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    6. For every row below and  row i, replace that row with the sum of that row and
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   a multiple of row i so that each new element in column i below row i is zero.
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   for every element below and above the main diagonal.
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *------------------------------------------------------------------------------------------------
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0u)
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0f;
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0f;
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1u;
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0f;
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0u;
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0u)
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Grab the most significant value from column l */
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       maxC = 0;
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = l; i < numRows; i++)
 205:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 208:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 209:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 210:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if (maxC == 0.0f)
 212:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 213:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 214:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 215:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 216:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Restore pInT1  */
 217:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 218:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 219:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 220:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1u;
 221:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 222:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is the most significant of the column */
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if ( (in > 0.0f ? in : -in) != maxC)
 224:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 225:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         i = numRows - (l + 1u);
 227:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         while (i > 0u)
 229:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 230:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 231:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 232:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 233:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 234:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Look for the most significant element to
 235:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 237:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 238:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 239:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 240:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols - l;
 241:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0u)
 243:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 244:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 248:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 249:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement the loop counter */
 250:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 251:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 252:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 253:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns of the destination matrix */
 254:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             j = numCols;
 255:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             while (j > 0u)
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the destination matrix */
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 262:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 263:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Decrement the loop counter */
 264:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               j--;
 265:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 266:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 267:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1u;
 269:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 270:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 271:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 272:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 273:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 274:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 275:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 276:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 277:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Decrement the loop counter */
 278:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           i--;
 279:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 280:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 281:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 282:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 283:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1u) && (in == 0.0f))
 284:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 285:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 286:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 287:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 288:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 289:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 290:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 291:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 292:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 293:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 294:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pPivotRowDst;
 295:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 296:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 297:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pPivotRowIn;
 298:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 299:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 300:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
 301:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = (numCols - l);
 302:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 303:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 304:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 305:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 306:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 307:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT1;
 308:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1++ = in1 / in;
 309:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 310:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 311:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 312:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 313:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 314:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns of the destination matrix */
 315:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numCols;
 316:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 317:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 318:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 319:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 320:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 321:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         in1 = *pInT2;
 322:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT2++ = in1 / in;
 323:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 324:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 325:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 326:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 327:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 328:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 329:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 330:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 331:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 332:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 333:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT2 = pOut;
 334:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 335:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* index used to check for pivot element */
 336:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       i = 0u;
 337:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 338:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of rows */
 339:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /*  to be replaced by the sum of that row and a multiple of row i */
 340:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       k = numRows;
 341:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 342:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (k > 0u)
 343:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 344:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 345:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 346:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 347:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 348:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 349:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 350:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 351:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 += numCols;
 352:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 353:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         else
 354:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 355:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
 356:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 357:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 358:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 359:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 360:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 361:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 362:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 363:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 364:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           j = (numCols - l);
 365:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 366:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0u)
 367:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 368:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 369:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 370:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT1;
 371:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 372:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 373:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement the loop counter */
 374:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 375:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 376:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 377:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 378:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 379:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           j = numCols;
 380:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 381:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           while (j > 0u)
 382:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 383:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 384:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 385:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             in1 = *pInT2;
 386:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 387:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 388:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Decrement the loop counter */
 389:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             j--;
 390:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 391:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 392:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 393:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 394:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment the temporary input pointer */
 395:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 396:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 397:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Decrement the loop counter */
 398:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         k--;
 399:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 400:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment the pivot index */
 401:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         i++;
 402:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 403:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 404:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 405:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 406:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 407:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 408:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 409:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 410:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 411:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 412:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 413:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 414:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 415:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #else
 416:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 417:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Run the below code for Cortex-M0 */
 418:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 419:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t Xchg, in = 0.0f;                     /* Temporary input values  */
 420:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   uint32_t i, rowCnt, flag = 0u, j, loopCnt, k, l;      /* loop counters */
 421:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   arm_status status;                             /* status of matrix inverse */
 422:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 423:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #ifdef ARM_MATH_MATRIX_CHECK
 424:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 425:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Check for matrix mismatch condition */
 426:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   if ((pSrc->numRows != pSrc->numCols) || (pDst->numRows != pDst->numCols)
 427:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****      || (pSrc->numRows != pDst->numRows))
 428:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 429:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 430:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SIZE_MISMATCH;
 431:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 432:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   else
 433:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 434:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   {
 435:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 436:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /*---------------------------------------------------------------------------------------------
 437:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 * Matrix Inverse can be solved using elementary row operations.
 438:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 439:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	Gauss-Jordan Method:
 440:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 441:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	   1. First combine the identity matrix and the input matrix separated by a bar to form an
 442:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *        augmented matrix as follows:
 443:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *				        _  _	      _	    _	   _   _         _	       _
 444:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |  |  a11  a12  | | | 1   0  |   |       |  X11 X12  |
 445:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |  |            | | |        |   |   =   |           |
 446:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *					   |_ |_ a21  a22 _| | |_0   1 _|  _|       |_ X21 X21 _|
 447:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 448:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		2. In our implementation, pDst Matrix is used as identity matrix.
 449:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 450:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		3. Begin with the first row. Let i = 1.
 451:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 452:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    4. Check to see if the pivot for row i is zero.
 453:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   The pivot is the element of the main diagonal that is on the current row.
 454:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   For instance, if working with row i, then the pivot element is aii.
 455:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   If the pivot is zero, exchange that row with a row below it that does not
 456:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   contain a zero in column i. If this is not possible, then an inverse
 457:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   to that matrix does not exist.
 458:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 459:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    5. Divide every element of row i by the pivot.
 460:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 461:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    6. For every row below and  row i, replace that row with the sum of that row and
 462:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   a multiple of row i so that each new element in column i below row i is zero.
 463:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 464:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *	    7. Move to the next row and column and repeat steps 2 through 5 until you have zeros
 465:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   for every element below and above the main diagonal.
 466:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *
 467:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, src).
 468:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *		   Therefore, the matrix to the right of the bar is our solution(dst matrix, dst).
 469:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 	 *------------------------------------------------------------------------------------------------
 470:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 471:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Working pointer for destination matrix */
 472:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     pOutT1 = pOut;
 473:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 474:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of rows */
 475:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     rowCnt = numRows;
 476:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 477:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Making the destination matrix as identity matrix */
 478:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     while (rowCnt > 0u)
 479:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 480:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in lower triangle of the destination matrix */
 481:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = numRows - rowCnt;
 482:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 483:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 484:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0f;
 485:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 486:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 487:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 488:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all ones in the diagonal of the destination matrix */
 489:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       *pOutT1++ = 1.0f;
 490:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 491:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Writing all zeroes in upper triangle of the destination matrix */
 492:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       j = rowCnt - 1u;
 493:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       while (j > 0u)
 494:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 495:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1++ = 0.0f;
 496:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         j--;
 497:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 498:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 499:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 500:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       rowCnt--;
 501:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 502:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 503:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Loop over the number of columns of the input matrix.
 504:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        All the elements in each column are processed by the row operations */
 505:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     loopCnt = numCols;
 506:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 507:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Index modifier to navigate through the columns */
 508:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     l = 0u;
 509:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     //for(loopCnt = 0u; loopCnt < numCols; loopCnt++)
 510:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     while (loopCnt > 0u)
 511:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 512:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero..
 513:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * If it is zero then interchange the row with non zero row below.
 514:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * If there is no non zero element to replace in the rows below,
 515:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * then the matrix is Singular. */
 516:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 517:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the input matrix that points
 518:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 519:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn + (l * numCols);
 520:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 521:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Working pointer for the destination matrix that points
 522:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the pivot element of the particular row  */
 523:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut + (l * numCols);
 524:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 525:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary variable to hold the pivot value */
 526:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *pInT1;
 527:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 528:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Destination pointer modifier */
 529:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       k = 1u;
 530:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 531:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Check if the pivot element is zero */
 532:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if (*pInT1 == 0.0f)
 533:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 534:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Loop over the number rows present below */
 535:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         for (i = (l + 1u); i < numRows; i++)
 536:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 537:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the input and destination pointers */
 538:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT2 = pInT1 + (numCols * l);
 539:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT2 = pOutT1 + (numCols * k);
 540:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 541:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Check if there is a non zero pivot element to
 542:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****            * replace in the rows below */
 543:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           if (*pInT2 != 0.0f)
 544:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 545:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Loop over number of columns
 546:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              * to the right of the pilot element */
 547:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0u; j < (numCols - l); j++)
 548:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 549:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               /* Exchange the row elements of the input matrix */
 550:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pInT2;
 551:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 552:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 553:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 554:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 555:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             for (j = 0u; j < numCols; j++)
 556:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 557:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               Xchg = *pOutT2;
 558:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 559:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 560:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             }
 561:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 562:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Flag to indicate whether exchange is done or not */
 563:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             flag = 1u;
 564:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 565:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Break after exchange is done */
 566:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 567:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 568:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 569:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Update the destination pointer modifier */
 570:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           k++;
 571:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 572:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 573:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 574:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Update the status if the matrix is singular */
 575:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if ((flag != 1u) && (in == 0.0f))
 576:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 577:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         return ARM_MATH_SINGULAR;
 578:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 579:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 580:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Points to the pivot row of input and destination matrices */
 581:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowIn = pIn + (l * numCols);
 582:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pPivotRowDst = pOut + (l * numCols);
 583:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 584:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers to the pivot row pointers */
 585:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pPivotRowIn;
 586:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pPivotRowDst;
 587:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 588:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Pivot element of the row */
 589:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       in = *(pIn + (l * numCols));
 590:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 591:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Loop over number of columns
 592:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * to the right of the pilot element */
 593:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0u; j < (numCols - l); j++)
 594:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 595:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the input matrix
 596:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 597:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pInT1 = *pInT1 / in;
 598:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1++;
 599:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 600:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       for (j = 0u; j < numCols; j++)
 601:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 602:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Divide each element of the row of the destination matrix
 603:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****          * by the pivot element */
 604:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         *pOutT1 = *pOutT1 / in;
 605:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pOutT1++;
 606:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 607:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 608:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Replace the rows with the sum of that row and a multiple of row i
 609:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****        * so that each new element in column i above row i is zero.*/
 610:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 611:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Temporary pointers for input and destination matrices */
 612:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pInT1 = pIn;
 613:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pOutT1 = pOut;
 614:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 615:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0u; i < numRows; i++)
 616:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 617:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Check for the pivot element */
 618:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         if (i == l)
 619:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 620:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* If the processing element is the pivot element,
 621:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              only the columns to the right are to be processed */
 622:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pInT1 += numCols - l;
 623:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pOutT1 += numCols;
 624:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 625:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         else
 626:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 627:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Element of the reference row */
 628:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           in = *pInT1;
 629:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 630:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Working pointers for input and destination pivot rows */
 631:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_in = pPivotRowIn;
 632:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           pPRT_pDst = pPivotRowDst;
 633:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 634:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to the right of the pivot element,
 635:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              to replace the elements in the input matrix */
 636:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0u; j < (numCols - l); j++)
 637:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 638:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 639:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 640:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1 = *pInT1 - (in * *pPRT_in++);
 641:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             pInT1++;
 642:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 643:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           /* Loop over the number of columns to
 644:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****              replace the elements in the destination matrix */
 645:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           for (j = 0u; j < numCols; j++)
 646:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 647:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             /* Replace the element by the sum of that row
 648:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****                and a multiple of the reference row  */
 649:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pOutT1 = *pOutT1 - (in * *pPRT_pDst++);
 650:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             pOutT1++;
 651:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           }
 652:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 653:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 654:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         /* Increment the temporary input pointer */
 655:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 = pInT1 + l;
 656:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 657:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the input pointer */
 658:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn++;
 659:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 660:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Decrement the loop counter */
 661:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       loopCnt--;
 662:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       /* Increment the index modifier */
 663:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       l++;
 664:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 665:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 666:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 667:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** #endif /* #if defined (ARM_MATH_DSP) */
 668:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 669:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     /* Set status as ARM_MATH_SUCCESS */
 670:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     status = ARM_MATH_SUCCESS;
 671:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 672:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     if ((flag != 1u) && (in == 0.0f))
 673:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 674:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       pIn = pSrc->pData;
 675:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       for (i = 0; i < numRows * numCols; i++)
 676:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 677:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         if (pIn[i] != 0.0f)
 678:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 679:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 680:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 681:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       if (i == numRows * numCols)
 682:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         status = ARM_MATH_SINGULAR;
 683:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 684:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   }
 685:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   /* Return to application */
 686:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   return (status);
 687:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** }
  81              	 .loc 1 687 0
  82 001c 19B0     	 add sp,sp,#100
  83              	.LCFI2:
  84              	 .cfi_remember_state
  85              	 .cfi_def_cfa_offset 36
  86              	 
  87 001e BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
  88              	.LVL5:
  89              	.L84:
  90              	.LCFI3:
  91              	 .cfi_restore_state
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****      || (pSrc->numRows != pDst->numRows))
  92              	 .loc 1 98 0 discriminator 1
  93 0022 0A88     	 ldrh r2,[r1]
  94 0024 4B88     	 ldrh r3,[r1,#2]
  95 0026 9342     	 cmp r3,r2
  96 0028 F6D1     	 bne .L41
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****      || (pSrc->numRows != pDst->numRows))
  97              	 .loc 1 99 0
  98 002a 039A     	 ldr r2,[sp,#12]
  99 002c 9A42     	 cmp r2,r3
 100 002e F3D1     	 bne .L41
 101              	.LVL6:
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 102              	 .loc 1 152 0
 103 0030 039B     	 ldr r3,[sp,#12]
 104 0032 002B     	 cmp r3,#0
 105 0034 00F04281 	 beq .L34
 106 0038 03F10057 	 add r7,r3,#536870912
 107 003c 013F     	 subs r7,r7,#1
 108 003e 4FF00008 	 mov r8,#0
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 109              	 .loc 1 163 0
 110 0042 4FF0000A 	 mov r10,#0
 111 0046 DFF830B3 	 ldr fp,.L91
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 112              	 .loc 1 152 0
 113 004a 0D9C     	 ldr r4,[sp,#52]
 114 004c FF00     	 lsls r7,r7,#3
 115 004e 4546     	 mov r5,r8
 116 0050 5E1E     	 subs r6,r3,#1
 117 0052 06E0     	 b .L38
 118              	.LVL7:
 119              	.L85:
 120 0054 FFF7FEFF 	 bl memset
 121              	.LVL8:
 122 0058 3C44     	 add r4,r4,r7
 123              	.LVL9:
 124 005a 0135     	 adds r5,r5,#1
 125 005c 083F     	 subs r7,r7,#8
 126 005e 08F10808 	 add r8,r8,#8
 127              	.L38:
 128              	.LVL10:
 129 0062 4246     	 mov r2,r8
 130 0064 2046     	 mov r0,r4
 131 0066 0021     	 movs r1,#0
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 132              	 .loc 1 156 0
 133 0068 15B1     	 cbz r5,.L4
 134              	.LVL11:
 135 006a FFF7FEFF 	 bl memset
 136              	.LVL12:
 137 006e 4444     	 add r4,r4,r8
 138              	.LVL13:
 139              	.L4:
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 140              	 .loc 1 163 0
 141 0070 C4E900AB 	 strd r10,[r4]
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 142              	 .loc 1 167 0
 143 0074 B542     	 cmp r5,r6
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 144              	 .loc 1 163 0
 145 0076 04F10804 	 add r4,r4,#8
 146              	.LVL14:
 147 007a 3A46     	 mov r2,r7
 148 007c 2046     	 mov r0,r4
 149 007e 4FF00001 	 mov r1,#0
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 150              	 .loc 1 167 0
 151 0082 E7D1     	 bne .L85
 152              	.LVL15:
 153 0084 0399     	 ldr r1,[sp,#12]
 154 0086 1295     	 str r5,[sp,#72]
 155 0088 CB00     	 lsls r3,r1,#3
 156 008a 0022     	 movs r2,#0
 157 008c 1046     	 mov r0,r2
 158 008e 0893     	 str r3,[sp,#32]
 159 0090 0592     	 str r2,[sp,#20]
 160 0092 1A46     	 mov r2,r3
 161 0094 0833     	 adds r3,r3,#8
 162 0096 1793     	 str r3,[sp,#92]
 163 0098 0992     	 str r2,[sp,#36]
 164 009a 0D9B     	 ldr r3,[sp,#52]
 165 009c 0E9A     	 ldr r2,[sp,#56]
 166 009e 1690     	 str r0,[sp,#88]
 167 00a0 0492     	 str r2,[sp,#16]
 168 00a2 0793     	 str r3,[sp,#28]
 169 00a4 0691     	 str r1,[sp,#24]
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****   float64_t *pOut = pDst->pData;                 /* output data matrix pointer */
 170              	 .loc 1 77 0
 171 00a6 0F92     	 str r2,[sp,#60]
 172              	.LVL16:
 173              	.L32:
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 174              	 .loc 1 200 0
 175 00a8 049B     	 ldr r3,[sp,#16]
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 176              	 .loc 1 204 0
 177 00aa 059A     	 ldr r2,[sp,#20]
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 178              	 .loc 1 200 0
 179 00ac D3E90089 	 ldrd r8,[r3]
 180              	.LVL17:
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 181              	 .loc 1 204 0
 182 00b0 039B     	 ldr r3,[sp,#12]
 183 00b2 9342     	 cmp r3,r2
 184 00b4 00F02081 	 beq .L80
 185 00b8 4FF0000A 	 mov r10,#0
 186 00bc 4FF0000B 	 mov fp,#0
 187 00c0 CDE90089 	 strd r8,[sp]
 188 00c4 1746     	 mov r7,r2
 189 00c6 D046     	 mov r8,r10
 190              	.LVL18:
 191 00c8 D946     	 mov r9,fp
 192 00ca 049E     	 ldr r6,[sp,#16]
 193 00cc DDF820A0 	 ldr r10,[sp,#32]
 194 00d0 DDF80CB0 	 ldr fp,[sp,#12]
 195 00d4 0AE0     	 b .L10
 196              	.LVL19:
 197              	.L87:
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 198              	 .loc 1 206 0 discriminator 1
 199 00d6 2046     	 mov r0,r4
 200 00d8 2946     	 mov r1,r5
 201 00da FFF7FEFF 	 bl __aeabi_dcmpgt
 202              	.LVL20:
 203 00de 08B1     	 cbz r0,.L13
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 204              	 .loc 1 206 0 is_stmt 0
 205 00e0 A046     	 mov r8,r4
 206              	.LVL21:
 207 00e2 A946     	 mov r9,r5
 208              	.L13:
 209              	.LVL22:
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 210              	 .loc 1 204 0 is_stmt 1 discriminator 12
 211 00e4 0137     	 adds r7,r7,#1
 212              	.LVL23:
 213 00e6 BB45     	 cmp fp,r7
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 214              	 .loc 1 207 0 discriminator 12
 215 00e8 5644     	 add r6,r6,r10
 216              	.LVL24:
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 217              	 .loc 1 204 0 discriminator 12
 218 00ea 1DD0     	 beq .L86
 219              	.LVL25:
 220              	.L10:
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 221              	 .loc 1 206 0
 222 00ec D6E90045 	 ldrd r4,[r6]
 223 00f0 0022     	 movs r2,#0
 224 00f2 0023     	 movs r3,#0
 225 00f4 2046     	 mov r0,r4
 226 00f6 2946     	 mov r1,r5
 227 00f8 FFF7FEFF 	 bl __aeabi_dcmpgt
 228              	.LVL26:
 229 00fc 4246     	 mov r2,r8
 230 00fe 4B46     	 mov r3,r9
 231 0100 0028     	 cmp r0,#0
 232 0102 E8D1     	 bne .L87
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 233              	 .loc 1 206 0 is_stmt 0 discriminator 2
 234 0104 05F10043 	 add r3,r5,#-2147483648
 235 0108 0B93     	 str r3,[sp,#44]
 236 010a 0A94     	 str r4,[sp,#40]
 237 010c DDE90A01 	 ldrd r0,[sp,#40]
 238 0110 4246     	 mov r2,r8
 239 0112 4B46     	 mov r3,r9
 240 0114 FFF7FEFF 	 bl __aeabi_dcmpgt
 241              	.LVL27:
 242 0118 0028     	 cmp r0,#0
 243 011a E3D0     	 beq .L13
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 244              	 .loc 1 204 0 is_stmt 1
 245 011c 0137     	 adds r7,r7,#1
 246              	.LVL28:
 247 011e BB45     	 cmp fp,r7
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         pInT1 += numCols;
 248              	 .loc 1 206 0
 249 0120 DDE90A89 	 ldrd r8,[sp,#40]
 250              	.LVL29:
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 251              	 .loc 1 207 0
 252 0124 5644     	 add r6,r6,r10
 253              	.LVL30:
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 254              	 .loc 1 204 0
 255 0126 E1D1     	 bne .L10
 256              	.L86:
 257 0128 C246     	 mov r10,r8
 258 012a CB46     	 mov fp,r9
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 259              	 .loc 1 211 0
 260 012c 5046     	 mov r0,r10
 261 012e 5946     	 mov r1,fp
 262 0130 0022     	 movs r2,#0
 263 0132 0023     	 movs r3,#0
 264 0134 DDE90089 	 ldrd r8,[sp]
 265              	.LVL31:
 266 0138 FFF7FEFF 	 bl __aeabi_dcmpeq
 267              	.LVL32:
 268 013c 0028     	 cmp r0,#0
 269 013e 40F0DB80 	 bne .L80
 270              	.LVL33:
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 271              	 .loc 1 223 0
 272 0142 4046     	 mov r0,r8
 273 0144 4946     	 mov r1,r9
 274 0146 0022     	 movs r2,#0
 275 0148 0023     	 movs r3,#0
 276 014a FFF7FEFF 	 bl __aeabi_dcmpgt
 277              	.LVL34:
 278 014e 0028     	 cmp r0,#0
 279 0150 00F0D480 	 beq .L88
 280 0154 CDE91089 	 strd r8,[sp,#64]
 281 0158 4046     	 mov r0,r8
 282 015a 4946     	 mov r1,r9
 283              	.L14:
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 284              	 .loc 1 223 0 is_stmt 0 discriminator 4
 285 015c 5246     	 mov r2,r10
 286 015e 5B46     	 mov r3,fp
 287 0160 FFF7FEFF 	 bl __aeabi_dcmpeq
 288              	.LVL35:
 289 0164 A8B9     	 cbnz r0,.L15
 290              	.LVL36:
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 291              	 .loc 1 228 0 is_stmt 1
 292 0166 129B     	 ldr r3,[sp,#72]
 293 0168 9BB1     	 cbz r3,.L15
 294 016a 4046     	 mov r0,r8
 295 016c 4946     	 mov r1,r9
 296 016e 0022     	 movs r2,#0
 297 0170 0023     	 movs r3,#0
 298 0172 FFF7FEFF 	 bl __aeabi_dcmpgt
 299              	.LVL37:
 300 0176 0028     	 cmp r0,#0
 301 0178 00F0C880 	 beq .L74
 302 017c CDE91489 	 strd r8,[sp,#80]
 303 0180 4046     	 mov r0,r8
 304 0182 4946     	 mov r1,r9
 305              	.L18:
 306 0184 5246     	 mov r2,r10
 307 0186 5B46     	 mov r3,fp
 308 0188 FFF7FEFF 	 bl __aeabi_dcmpeq
 309              	.LVL38:
 310 018c 0028     	 cmp r0,#0
 311 018e 40F0C780 	 bne .L89
 312              	.LVL39:
 313              	.L15:
 283:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 314              	 .loc 1 283 0
 315 0192 169B     	 ldr r3,[sp,#88]
 316 0194 012B     	 cmp r3,#1
 317 0196 09D0     	 beq .L79
 283:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 318              	 .loc 1 283 0 is_stmt 0 discriminator 1
 319 0198 4046     	 mov r0,r8
 320 019a 4946     	 mov r1,r9
 321 019c 0022     	 movs r2,#0
 322 019e 0023     	 movs r3,#0
 323 01a0 FFF7FEFF 	 bl __aeabi_dcmpeq
 324              	.LVL40:
 325 01a4 0028     	 cmp r0,#0
 326 01a6 40F0A780 	 bne .L80
 327 01aa 1690     	 str r0,[sp,#88]
 328              	.LVL41:
 329              	.L79:
 330 01ac 079B     	 ldr r3,[sp,#28]
 331 01ae 089A     	 ldr r2,[sp,#32]
 332 01b0 1344     	 add r3,r3,r2
 333 01b2 1393     	 str r3,[sp,#76]
 334              	.LVL42:
 335              	.L24:
 336 01b4 069D     	 ldr r5,[sp,#24]
 337 01b6 049C     	 ldr r4,[sp,#16]
 338              	.LVL43:
 339              	.L25:
 308:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 340              	 .loc 1 308 0 is_stmt 1
 341 01b8 D4E90001 	 ldrd r0,[r4]
 342 01bc 4246     	 mov r2,r8
 343 01be 4B46     	 mov r3,r9
 344 01c0 FFF7FEFF 	 bl __aeabi_ddiv
 345              	.LVL44:
 303:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 346              	 .loc 1 303 0
 347 01c4 013D     	 subs r5,r5,#1
 348              	.LVL45:
 308:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 349              	 .loc 1 308 0
 350 01c6 E4E80201 	 strd r0,[r4],#8
 351              	.LVL46:
 303:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 352              	 .loc 1 303 0
 353 01ca F5D1     	 bne .L25
 354 01cc 039D     	 ldr r5,[sp,#12]
 355              	.LVL47:
 356 01ce 079C     	 ldr r4,[sp,#28]
 357              	.LVL48:
 358              	.L26:
 322:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 359              	 .loc 1 322 0
 360 01d0 D4E90001 	 ldrd r0,[r4]
 361 01d4 4246     	 mov r2,r8
 362 01d6 4B46     	 mov r3,r9
 363 01d8 FFF7FEFF 	 bl __aeabi_ddiv
 364              	.LVL49:
 317:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 365              	 .loc 1 317 0
 366 01dc 013D     	 subs r5,r5,#1
 367              	.LVL50:
 322:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 368              	 .loc 1 322 0
 369 01de E4E80201 	 strd r0,[r4],#8
 370              	.LVL51:
 317:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 371              	 .loc 1 317 0
 372 01e2 F5D1     	 bne .L26
 373              	.LVL52:
 374 01e4 059B     	 ldr r3,[sp,#20]
 375 01e6 DDF83CB0 	 ldr fp,[sp,#60]
 376 01ea 0095     	 str r5,[sp]
 377 01ec DB00     	 lsls r3,r3,#3
 378 01ee 0C93     	 str r3,[sp,#48]
 379 01f0 0D9B     	 ldr r3,[sp,#52]
 380 01f2 0293     	 str r3,[sp,#8]
 381 01f4 2B46     	 mov r3,r5
 382              	.LVL53:
 383              	.L31:
 345:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         {
 384              	 .loc 1 345 0
 385 01f6 059A     	 ldr r2,[sp,#20]
 386 01f8 9342     	 cmp r3,r2
 387 01fa 00F0B480 	 beq .L90
 356:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 388              	 .loc 1 356 0
 389 01fe DBE90089 	 ldrd r8,[fp]
 390              	.LVL54:
 391 0202 069D     	 ldr r5,[sp,#24]
 392 0204 DDF810A0 	 ldr r10,[sp,#16]
 393 0208 5C46     	 mov r4,fp
 394              	.LVL55:
 395              	.L29:
 371:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 396              	 .loc 1 371 0
 397 020a FAE80223 	 ldrd r2,[r10],#8
 398              	.LVL56:
 399 020e 4046     	 mov r0,r8
 400 0210 4946     	 mov r1,r9
 401 0212 FFF7FEFF 	 bl __aeabi_dmul
 402              	.LVL57:
 370:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT1++ = in1 - (in * *pPRT_in++);
 403              	 .loc 1 370 0
 404 0216 D4E90067 	 ldrd r6,[r4]
 405              	.LVL58:
 371:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 406              	 .loc 1 371 0
 407 021a 0246     	 mov r2,r0
 408 021c 0B46     	 mov r3,r1
 409 021e 3046     	 mov r0,r6
 410 0220 3946     	 mov r1,r7
 411 0222 FFF7FEFF 	 bl __aeabi_dsub
 412              	.LVL59:
 366:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 413              	 .loc 1 366 0
 414 0226 013D     	 subs r5,r5,#1
 415              	.LVL60:
 371:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 416              	 .loc 1 371 0
 417 0228 E4E80201 	 strd r0,[r4],#8
 418              	.LVL61:
 366:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 419              	 .loc 1 366 0
 420 022c EDD1     	 bne .L29
 421 022e 099B     	 ldr r3,[sp,#36]
 422 0230 039F     	 ldr r7,[sp,#12]
 423 0232 029E     	 ldr r6,[sp,#8]
 424              	.LVL62:
 425 0234 0BEB030A 	 add r10,fp,r3
 426              	.LVL63:
 427 0238 DDF81CB0 	 ldr fp,[sp,#28]
 428              	.LVL64:
 429              	.L30:
 386:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 430              	 .loc 1 386 0
 431 023c FBE80223 	 ldrd r2,[fp],#8
 432              	.LVL65:
 433 0240 4046     	 mov r0,r8
 434 0242 4946     	 mov r1,r9
 435 0244 FFF7FEFF 	 bl __aeabi_dmul
 436              	.LVL66:
 385:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             *pInT2++ = in1 - (in * *pPRT_pDst++);
 437              	 .loc 1 385 0
 438 0248 D6E90045 	 ldrd r4,[r6]
 439              	.LVL67:
 386:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 440              	 .loc 1 386 0
 441 024c 0246     	 mov r2,r0
 442 024e 0B46     	 mov r3,r1
 443 0250 2046     	 mov r0,r4
 444 0252 2946     	 mov r1,r5
 445 0254 FFF7FEFF 	 bl __aeabi_dsub
 446              	.LVL68:
 381:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 447              	 .loc 1 381 0
 448 0258 013F     	 subs r7,r7,#1
 449              	.LVL69:
 386:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 450              	 .loc 1 386 0
 451 025a E6E80201 	 strd r0,[r6],#8
 452              	.LVL70:
 381:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 453              	 .loc 1 381 0
 454 025e EDD1     	 bne .L30
 455 0260 029B     	 ldr r3,[sp,#8]
 456 0262 089A     	 ldr r2,[sp,#32]
 457 0264 1344     	 add r3,r3,r2
 458 0266 0293     	 str r3,[sp,#8]
 459              	.LVL71:
 460              	.L28:
 395:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 461              	 .loc 1 395 0
 462 0268 0C9A     	 ldr r2,[sp,#48]
 401:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 463              	 .loc 1 401 0
 464 026a 009B     	 ldr r3,[sp]
 395:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 465              	 .loc 1 395 0
 466 026c 0AEB020B 	 add fp,r10,r2
 342:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 467              	 .loc 1 342 0
 468 0270 039A     	 ldr r2,[sp,#12]
 401:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 469              	 .loc 1 401 0
 470 0272 0133     	 adds r3,r3,#1
 471              	.LVL72:
 342:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 472              	 .loc 1 342 0
 473 0274 9A42     	 cmp r2,r3
 401:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       }
 474              	 .loc 1 401 0
 475 0276 0093     	 str r3,[sp]
 342:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 476              	 .loc 1 342 0
 477 0278 BDD1     	 bne .L31
 405:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 478              	 .loc 1 405 0
 479 027a 0F9B     	 ldr r3,[sp,#60]
 480              	.LVL73:
 481 027c 179A     	 ldr r2,[sp,#92]
 482 027e 0833     	 adds r3,r3,#8
 483 0280 0F93     	 str r3,[sp,#60]
 484              	.LVL74:
 411:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 485              	 .loc 1 411 0
 486 0282 059B     	 ldr r3,[sp,#20]
 487              	.LVL75:
 488 0284 0133     	 adds r3,r3,#1
 489 0286 0593     	 str r3,[sp,#20]
 490              	.LVL76:
 491 0288 049B     	 ldr r3,[sp,#16]
 492              	.LVL77:
 493 028a 1344     	 add r3,r3,r2
 494 028c 0493     	 str r3,[sp,#16]
 495              	.LVL78:
 496 028e 139B     	 ldr r3,[sp,#76]
 497 0290 0793     	 str r3,[sp,#28]
 498              	.LVL79:
 499 0292 129B     	 ldr r3,[sp,#72]
 500 0294 013B     	 subs r3,r3,#1
 501 0296 1293     	 str r3,[sp,#72]
 502 0298 099B     	 ldr r3,[sp,#36]
 503 029a 083B     	 subs r3,r3,#8
 504 029c 0993     	 str r3,[sp,#36]
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 505              	 .loc 1 184 0
 506 029e 069B     	 ldr r3,[sp,#24]
 507 02a0 013B     	 subs r3,r3,#1
 508              	.LVL80:
 509 02a2 0693     	 str r3,[sp,#24]
 510 02a4 7FF400AF 	 bne .L32
 511              	.LVL81:
 672:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 512              	 .loc 1 672 0
 513 02a8 169B     	 ldr r3,[sp,#88]
 514              	.LVL82:
 515 02aa 012B     	 cmp r3,#1
 516 02ac 36D0     	 beq .L35
 672:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     {
 517              	 .loc 1 672 0 is_stmt 0 discriminator 1
 518 02ae 4046     	 mov r0,r8
 519 02b0 4946     	 mov r1,r9
 520 02b2 0022     	 movs r2,#0
 521 02b4 0023     	 movs r3,#0
 522 02b6 FFF7FEFF 	 bl __aeabi_dcmpeq
 523              	.LVL83:
 524 02ba 78B3     	 cbz r0,.L35
 525              	.LVL84:
 526              	.L34:
 675:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 527              	 .loc 1 675 0 is_stmt 1
 528 02bc 039B     	 ldr r3,[sp,#12]
 529 02be 1E46     	 mov r6,r3
 530 02c0 06FB03F6 	 mul r6,r6,r3
 531 02c4 C6B1     	 cbz r6,.L80
 677:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 532              	 .loc 1 677 0
 533 02c6 0E9C     	 ldr r4,[sp,#56]
 534 02c8 0022     	 movs r2,#0
 535 02ca D4E90001 	 ldrd r0,[r4]
 536 02ce 0023     	 movs r3,#0
 537 02d0 FFF7FEFF 	 bl __aeabi_dcmpeq
 538              	.LVL85:
 539 02d4 10B3     	 cbz r0,.L35
 540 02d6 2346     	 mov r3,r4
 541 02d8 0833     	 adds r3,r3,#8
 542 02da 1D46     	 mov r5,r3
 543 02dc 0024     	 movs r4,#0
 544 02de 04E0     	 b .L36
 545              	.LVL86:
 546              	.L37:
 547 02e0 F5E80201 	 ldrd r0,[r5],#8
 548 02e4 FFF7FEFF 	 bl __aeabi_dcmpeq
 549              	.LVL87:
 550 02e8 C0B1     	 cbz r0,.L35
 551              	.LVL88:
 552              	.L36:
 675:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 553              	 .loc 1 675 0 discriminator 2
 554 02ea 0134     	 adds r4,r4,#1
 555              	.LVL89:
 556 02ec B442     	 cmp r4,r6
 677:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             break;
 557              	 .loc 1 677 0 discriminator 2
 558 02ee 4FF00002 	 mov r2,#0
 559 02f2 4FF00003 	 mov r3,#0
 675:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 560              	 .loc 1 675 0 discriminator 2
 561 02f6 F3D1     	 bne .L37
 562              	.LVL90:
 563              	.L80:
 682:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****     }
 564              	 .loc 1 682 0
 565 02f8 FB20     	 movs r0,#251
 566 02fa 8EE6     	 b .L2
 567              	.LVL91:
 568              	.L88:
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****       {
 569              	 .loc 1 223 0 discriminator 2
 570 02fc 09F10043 	 add r3,r9,#-2147483648
 571 0300 CDF84080 	 str r8,[sp,#64]
 572 0304 1193     	 str r3,[sp,#68]
 573 0306 DDE91001 	 ldrd r0,[sp,#64]
 574 030a 27E7     	 b .L14
 575              	.LVL92:
 576              	.L74:
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 577              	 .loc 1 236 0
 578 030c 09F10043 	 add r3,r9,#-2147483648
 579 0310 CDF85080 	 str r8,[sp,#80]
 580 0314 1593     	 str r3,[sp,#84]
 581 0316 DDE91401 	 ldrd r0,[sp,#80]
 582 031a 33E7     	 b .L18
 583              	.LVL93:
 584              	.L35:
 670:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 585              	 .loc 1 670 0
 586 031c 0020     	 movs r0,#0
 587 031e 7CE6     	 b .L2
 588              	.LVL94:
 589              	.L89:
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****           {
 590              	 .loc 1 236 0
 591 0320 0699     	 ldr r1,[sp,#24]
 592 0322 049A     	 ldr r2,[sp,#16]
 593 0324 0F9B     	 ldr r3,[sp,#60]
 594              	.LVL95:
 595              	.L21:
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT2++ = *pInT1;
 596              	 .loc 1 245 0
 597 0326 D2E90045 	 ldrd r4,[r2]
 598              	.LVL96:
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 599              	 .loc 1 246 0
 600 032a D3E90067 	 ldrd r6,[r3]
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 601              	 .loc 1 242 0
 602 032e 0139     	 subs r1,r1,#1
 603              	.LVL97:
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pInT1++ = Xchg;
 604              	 .loc 1 246 0
 605 0330 E2E80267 	 strd r6,[r2],#8
 606              	.LVL98:
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 607              	 .loc 1 247 0
 608 0334 E3E80245 	 strd r4,[r3],#8
 609              	.LVL99:
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 610              	 .loc 1 242 0
 611 0338 F5D1     	 bne .L21
 612 033a 079B     	 ldr r3,[sp,#28]
 613              	.LVL100:
 614 033c 089A     	 ldr r2,[sp,#32]
 615              	.LVL101:
 616 033e 9A18     	 adds r2,r3,r2
 617 0340 1392     	 str r2,[sp,#76]
 618 0342 1146     	 mov r1,r2
 619              	.LVL102:
 620 0344 039A     	 ldr r2,[sp,#12]
 621              	.L23:
 622              	.LVL103:
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT2++ = *pOutT1;
 623              	 .loc 1 259 0
 624 0346 D1E90045 	 ldrd r4,[r1]
 625              	.LVL104:
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 626              	 .loc 1 260 0
 627 034a D3E90067 	 ldrd r6,[r3]
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 628              	 .loc 1 256 0
 629 034e 013A     	 subs r2,r2,#1
 630              	.LVL105:
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****               *pOutT1++ = Xchg;
 631              	 .loc 1 260 0
 632 0350 E1E80267 	 strd r6,[r1],#8
 633              	.LVL106:
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 634              	 .loc 1 261 0
 635 0354 E3E80245 	 strd r4,[r3],#8
 636              	.LVL107:
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****             {
 637              	 .loc 1 256 0
 638 0358 F5D1     	 bne .L23
 639 035a 049B     	 ldr r3,[sp,#16]
 640              	.LVL108:
 641 035c D3E90089 	 ldrd r8,[r3]
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 642              	 .loc 1 268 0
 643 0360 0123     	 movs r3,#1
 644 0362 1693     	 str r3,[sp,#88]
 645              	.LVL109:
 646 0364 26E7     	 b .L24
 647              	.LVL110:
 648              	.L90:
 349:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 649              	 .loc 1 349 0
 650 0366 099B     	 ldr r3,[sp,#36]
 351:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 651              	 .loc 1 351 0
 652 0368 089A     	 ldr r2,[sp,#32]
 349:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c **** 
 653              	 .loc 1 349 0
 654 036a 0BEB030A 	 add r10,fp,r3
 655              	.LVL111:
 351:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_inverse_f64.c ****         }
 656              	 .loc 1 351 0
 657 036e 029B     	 ldr r3,[sp,#8]
 658 0370 1344     	 add r3,r3,r2
 659 0372 0293     	 str r3,[sp,#8]
 660              	.LVL112:
 661 0374 78E7     	 b .L28
 662              	.L92:
 663 0376 00BF     	 .align 2
 664              	.L91:
 665 0378 0000F03F 	 .word 1072693248
 666              	 .cfi_endproc
 667              	.LFE135:
 669              	 .text
 670              	.Letext0:
 671              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 672              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 673              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_inverse_f64.c
    {standard input}:25     .text.arm_mat_inverse_f64:00000000 $t
    {standard input}:30     .text.arm_mat_inverse_f64:00000000 arm_mat_inverse_f64
    {standard input}:665    .text.arm_mat_inverse_f64:00000378 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_dcmpgt
__aeabi_dcmpeq
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
memset
