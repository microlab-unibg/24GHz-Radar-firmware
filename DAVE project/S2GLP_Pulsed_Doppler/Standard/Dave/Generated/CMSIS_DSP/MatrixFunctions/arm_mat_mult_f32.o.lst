   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mat_mult_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mat_mult_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_mult_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_mult_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Title:        arm_mat_mult_f32.c
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Description:  Floating-point matrix multiplication
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @ingroup groupMatrix
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @defgroup MatrixMult Matrix Multiplication
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Multiplies two matrices.
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * \image html MatrixMultiplication.gif "Multiplication of two 3 x 3 matrices"
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Matrix multiplication is only defined if the number of columns of the
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * first matrix equals the number of rows of the second matrix.
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * Multiplying an <code>M x N</code> matrix with an <code>N x P</code> matrix results
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * in an <code>M x P</code> matrix.
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * When matrix size checking is enabled, the functions check: (1) that the inner dimensions of
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * <code>pSrcA</code> and <code>pSrcB</code> are equal; and (2) that the size of the output
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * matrix equals the outer dimensions of <code>pSrcA</code> and <code>pSrcB</code>.
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  */
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /**
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @addtogroup MatrixMult
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @{
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  */
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** /**
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @brief Floating-point matrix multiplication.
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[in]       *pSrcA points to the first input matrix structure
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[in]       *pSrcB points to the second input matrix structure
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @param[out]      *pDst points to output matrix structure
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * @return     		The function returns either
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****  */
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** arm_status arm_mat_mult_f32(
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   arm_matrix_instance_f32 * pDst)
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** {
  28              	 .loc 1 70 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t sum;                                 /* Accumulator */
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  45              	 .loc 1 79 0
  46 0004 4388     	 ldrh r3,[r0,#2]
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #if defined (ARM_MATH_DSP)
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t in1, in2, in3, in4;
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   /* Check for matrix mismatch condition */
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
  47              	 .loc 1 93 0
  48 0006 0C88     	 ldrh r4,[r1]
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  49              	 .loc 1 73 0
  50 0008 D0F804E0 	 ldr lr,[r0,#4]
  51              	.LVL1:
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  52              	 .loc 1 74 0
  53 000c 5568     	 ldr r5,[r2,#4]
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  54              	 .loc 1 77 0
  55 000e 0088     	 ldrh r0,[r0]
  56              	.LVL2:
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  57              	 .loc 1 78 0
  58 0010 B1F80290 	 ldrh r9,[r1,#2]
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  59              	 .loc 1 70 0
  60 0014 87B0     	 sub sp,sp,#28
  61              	.LCFI1:
  62              	 .cfi_def_cfa_offset 64
  63              	 .loc 1 93 0
  64 0016 9C42     	 cmp r4,r3
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  65              	 .loc 1 77 0
  66 0018 0390     	 str r0,[sp,#12]
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  67              	 .loc 1 74 0
  68 001a 0495     	 str r5,[sp,#16]
  69              	.LVL3:
  70              	 .loc 1 93 0
  71 001c 7DD1     	 bne .L11
  72              	 .loc 1 93 0 is_stmt 0 discriminator 1
  73 001e 1388     	 ldrh r3,[r2]
  74              	.LVL4:
  75 0020 8342     	 cmp r3,r0
  76 0022 7AD1     	 bne .L11
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  77              	 .loc 1 94 0 is_stmt 1
  78 0024 5388     	 ldrh r3,[r2,#2]
  79 0026 4B45     	 cmp r3,r9
  80 0028 77D1     	 bne .L11
  81 002a A308     	 lsrs r3,r4,#2
  82 002c 04F00302 	 and r2,r4,#3
  83              	.LVL5:
  84 0030 0093     	 str r3,[sp]
  85 0032 013B     	 subs r3,r3,#1
  86 0034 0192     	 str r2,[sp,#4]
  87 0036 9BB2     	 uxth r3,r3
  88 0038 013A     	 subs r2,r2,#1
  89 003a 0133     	 adds r3,r3,#1
  90 003c 92B2     	 uxth r2,r2
  91 003e D1F80480 	 ldr r8,[r1,#4]
  92 0042 4FEA0911 	 lsl r1,r9,#4
  93              	.LVL6:
  94 0046 01FB03FB 	 mul fp,r1,r3
  95 004a 0132     	 adds r2,r2,#1
  96 004c 0EEB031C 	 add ip,lr,r3,lsl#4
  97 0050 A300     	 lsls r3,r4,#2
  98 0052 4FEA820A 	 lsl r10,r2,#2
  99 0056 0593     	 str r3,[sp,#20]
 100 0058 0023     	 movs r3,#0
 101 005a 0293     	 str r3,[sp,#8]
 102 005c 5346     	 mov r3,r10
 103 005e 4FEA8900 	 lsl r0,r9,#2
 104              	.LVL7:
 105 0062 DA46     	 mov r10,fp
 106 0064 9B46     	 mov fp,r3
 107              	.LVL8:
 108              	.L8:
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   {
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   }
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   else
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   {
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* row loop */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     do
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     {
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       px = pOut + i;
 109              	 .loc 1 109 0
 110 0066 049B     	 ldr r3,[sp,#16]
 111 0068 029A     	 ldr r2,[sp,#8]
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       col = numColsB;
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****        ** to the starting address of the pSrcB data */
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pIn2 = pSrcB->pData;
 112              	 .loc 1 116 0
 113 006a 4446     	 mov r4,r8
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 114              	 .loc 1 109 0
 115 006c 03EB8207 	 add r7,r3,r2,lsl#2
 116              	.LVL9:
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       j = 0u;
 117              	 .loc 1 118 0
 118 0070 0026     	 movs r6,#0
 119 0072 0CF11005 	 add r5,ip,#16
 120              	.LVL10:
 121              	.L7:
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* column loop */
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       do
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       {
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         sum = 0.0f;
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1 = pInA;
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA >> 2u;
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* matrix multiplication        */
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0u)
 122              	 .loc 1 133 0
 123 0076 009B     	 ldr r3,[sp]
 124 0078 DFED2A7A 	 flds s15,.L22
 125 007c 002B     	 cmp r3,#0
 126 007e 4AD0     	 beq .L12
 127 0080 0EF11001 	 add r1,lr,#16
 128 0084 2346     	 mov r3,r4
 129              	.LVL11:
 130              	.L4:
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in3 = *pIn2;
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in1 = pIn1[0];
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in2 = pIn1[1];
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += in1 * in3;
 131              	 .loc 1 140 0
 132 0086 11ED045A 	 flds s10,[r1,#-16]
 133 008a 93ED007A 	 flds s14,[r3]
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in4 = *pIn2;
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += in2 * in4;
 134              	 .loc 1 143 0
 135 008e 11ED036A 	 flds s12,[r1,#-12]
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in3 = *pIn2;
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in1 = pIn1[2];
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in2 = pIn1[3];
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += in1 * in3;
 136              	 .loc 1 149 0
 137 0092 51ED025A 	 flds s11,[r1,#-8]
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in4 = *pIn2;
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += in2 * in4;
 138              	 .loc 1 152 0
 139 0096 51ED016A 	 flds s13,[r1,#-4]
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in4 = *pIn2;
 140              	 .loc 1 140 0
 141 009a E5EE077A 	 vfma.f32 s15,s10,s14
 142              	.LVL12:
 143 009e 0344     	 add r3,r3,r0
 144              	.LVL13:
 145 00a0 1A18     	 adds r2,r3,r0
 146              	.LVL14:
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 147              	 .loc 1 143 0
 148 00a2 93ED007A 	 flds s14,[r3]
 149              	.LVL15:
 150 00a6 E6EE077A 	 vfma.f32 s15,s12,s14
 151              	.LVL16:
 152 00aa 1318     	 adds r3,r2,r0
 153              	.LVL17:
 154 00ac 1031     	 adds r1,r1,#16
 155              	.LVL18:
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in4 = *pIn2;
 156              	 .loc 1 149 0
 157 00ae 92ED006A 	 flds s12,[r2]
 158              	 .loc 1 152 0
 159 00b2 93ED007A 	 flds s14,[r3]
 160              	.LVL19:
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           in4 = *pIn2;
 161              	 .loc 1 149 0
 162 00b6 E5EE867A 	 vfma.f32 s15,s11,s12
 163              	.LVL20:
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 164              	 .loc 1 133 0
 165 00ba A942     	 cmp r1,r5
 166 00bc 0344     	 add r3,r3,r0
 167              	.LVL21:
 168              	 .loc 1 152 0
 169 00be E6EE877A 	 vfma.f32 s15,s13,s14
 170              	.LVL22:
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 171              	 .loc 1 133 0
 172 00c2 E0D1     	 bne .L4
 173 00c4 5444     	 add r4,r4,r10
 174 00c6 6346     	 mov r3,ip
 175              	.LVL23:
 176              	.L3:
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn1 += 4u;
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop count */
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         }
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****          ** No loop unrolling is used. */
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA % 0x4u;
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0u)
 177              	 .loc 1 163 0
 178 00c8 019A     	 ldr r2,[sp,#4]
 179 00ca 52B1     	 cbz r2,.L5
 180 00cc 03EB0B02 	 add r2,r3,fp
 181              	.LVL24:
 182              	.L6:
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * (*pIn2);
 183              	 .loc 1 166 0
 184 00d0 F3EC016A 	 fldmias r3!,{s13}
 185              	.LVL25:
 186 00d4 94ED007A 	 flds s14,[r4]
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 187              	 .loc 1 163 0
 188 00d8 9342     	 cmp r3,r2
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 189              	 .loc 1 167 0
 190 00da 0444     	 add r4,r4,r0
 191              	.LVL26:
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 192              	 .loc 1 166 0
 193 00dc E6EE877A 	 vfma.f32 s15,s13,s14
 194              	.LVL27:
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 195              	 .loc 1 163 0
 196 00e0 F6D1     	 bne .L6
 197              	.L5:
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop counter */
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         }
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Store the result in the destination buffer */
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         *px++ = sum;
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         j++;
 198              	 .loc 1 177 0
 199 00e2 0136     	 adds r6,r6,#1
 200              	.LVL28:
 201 00e4 B6B2     	 uxth r6,r6
 202              	.LVL29:
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pSrcB->pData + j;
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Decrement the column loop counter */
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         col--;
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       } while (col > 0u);
 203              	 .loc 1 183 0
 204 00e6 4E45     	 cmp r6,r9
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 205              	 .loc 1 174 0
 206 00e8 E7EC017A 	 fstmias r7!,{s15}
 207              	.LVL30:
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pSrcB->pData + j;
 208              	 .loc 1 178 0
 209 00ec 08EB8604 	 add r4,r8,r6,lsl#2
 210              	.LVL31:
 211              	 .loc 1 183 0
 212 00f0 C1D1     	 bne .L7
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #else
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   /* Run the below code for Cortex-M0 */
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   /* Check for matrix mismatch condition */
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   if ((pSrcA->numCols != pSrcB->numRows) ||
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   {
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   }
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   else
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 205:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   {
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* The following loop performs the dot-product of each row in pInA with each column in pInB */
 208:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* row loop */
 209:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     do
 210:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     {
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 212:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       px = pOut + i;
 213:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 214:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 215:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       col = numColsB;
 216:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 217:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set
 218:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****        ** to the starting address of the pSrcB data */
 219:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pIn2 = pSrcB->pData;
 220:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* column loop */
 222:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       do
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       {
 224:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 225:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         sum = 0.0f;
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 227:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Initialize the pointer pIn1 to point to the starting address of the row being processed 
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         pIn1 = pInA;
 229:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 230:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Matrix A columns number of MAC operations are to be performed */
 231:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         colCnt = numColsA;
 232:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 233:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         while (colCnt > 0u)
 234:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         {
 235:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           sum += *pIn1++ * (*pIn2);
 237:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           pIn2 += numColsB;
 238:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 239:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           /* Decrement the loop counter */
 240:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****           colCnt--;
 241:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         }
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 243:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Store the result in the destination buffer */
 244:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         *px++ = sum;
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Decrement the column loop counter */
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         col--;
 248:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 249:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 250:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****         pIn2 = pInB + (numColsB - col);
 251:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 252:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       } while (col > 0u);
 253:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 254:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 255:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       i = i + numColsB;
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       /* Decrement the row loop counter */
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       row--;
 213              	 .loc 1 261 0
 214 00f2 039B     	 ldr r3,[sp,#12]
 215              	.LVL32:
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 216              	 .loc 1 257 0
 217 00f4 029A     	 ldr r2,[sp,#8]
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 218              	 .loc 1 258 0
 219 00f6 0599     	 ldr r1,[sp,#20]
 220              	 .loc 1 261 0
 221 00f8 013B     	 subs r3,r3,#1
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 222              	 .loc 1 257 0
 223 00fa 3244     	 add r2,r2,r6
 224              	 .loc 1 261 0
 225 00fc 9BB2     	 uxth r3,r3
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 226              	 .loc 1 257 0
 227 00fe 92B2     	 uxth r2,r2
 228              	 .loc 1 261 0
 229 0100 0393     	 str r3,[sp,#12]
 230              	.LVL33:
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****       pInA = pInA + numColsA;
 231              	 .loc 1 257 0
 232 0102 0292     	 str r2,[sp,#8]
 233              	.LVL34:
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 234              	 .loc 1 258 0
 235 0104 8E44     	 add lr,lr,r1
 236              	.LVL35:
 237 0106 8C44     	 add ip,ip,r1
 262:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 263:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     } while (row > 0u);
 238              	 .loc 1 263 0
 239 0108 002B     	 cmp r3,#0
 240 010a ACD1     	 bne .L8
 264:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 265:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 241              	 .loc 1 265 0
 242 010c 1846     	 mov r0,r3
 243              	.LVL36:
 266:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   }
 267:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   /* Return to application */
 269:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   return (status);
 270:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** }
 244              	 .loc 1 270 0
 245 010e 40B2     	 sxtb r0,r0
 246 0110 07B0     	 add sp,sp,#28
 247              	.LCFI2:
 248              	 .cfi_remember_state
 249              	 .cfi_def_cfa_offset 36
 250              	 
 251 0112 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 252              	.LVL37:
 253              	.L12:
 254              	.LCFI3:
 255              	 .cfi_restore_state
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c **** 
 256              	 .loc 1 127 0
 257 0116 7346     	 mov r3,lr
 258 0118 D6E7     	 b .L3
 259              	.LVL38:
 260              	.L11:
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_f32.c ****   }
 261              	 .loc 1 98 0
 262 011a FD20     	 movs r0,#253
 263              	.LVL39:
 264              	 .loc 1 270 0
 265 011c 40B2     	 sxtb r0,r0
 266 011e 07B0     	 add sp,sp,#28
 267              	.LCFI4:
 268              	 .cfi_def_cfa_offset 36
 269              	 
 270 0120 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 271              	.LVL40:
 272              	.L23:
 273              	 .align 2
 274              	.L22:
 275 0124 00000000 	 .word 0
 276              	 .cfi_endproc
 277              	.LFE135:
 279              	 .text
 280              	.Letext0:
 281              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 282              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 283              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_mult_f32.c
    {standard input}:20     .text.arm_mat_mult_f32:00000000 $t
    {standard input}:25     .text.arm_mat_mult_f32:00000000 arm_mat_mult_f32
    {standard input}:275    .text.arm_mat_mult_f32:00000124 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
