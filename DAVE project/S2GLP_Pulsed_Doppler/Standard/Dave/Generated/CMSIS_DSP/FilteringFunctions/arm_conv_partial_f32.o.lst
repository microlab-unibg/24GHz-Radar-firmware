   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_conv_partial_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_conv_partial_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_conv_partial_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_conv_partial_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Title:        arm_conv_partial_f32.c
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Description:  Partial convolution of floating-point sequences
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @defgroup PartialConv Partial Convolution
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Partial Convolution is equivalent to Convolution except that a subset of the output samples is g
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Each function has two additional arguments.
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * <code>firstIndex</code> specifies the starting index of the subset of output samples.
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * <code>numPoints</code> is the number of output samples to compute.
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * The function computes the output in the range
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * <code>[firstIndex, ..., firstIndex+numPoints-1]</code>.
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * The output array <code>pDst</code> contains <code>numPoints</code> values.
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * The allowable range of output indices is [0 srcALen+srcBLen-2].
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * If the requested subset does not fall in this range then the functions return ARM_MATH_ARGUMENT_
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Otherwise the functions return ARM_MATH_SUCCESS.
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * \note Refer arm_conv_f32() for details on fixed point behavior.
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * <b>Fast Versions</b>
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * \par
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Fast versions are supported for Q31 and Q15 of partial convolution.  Cycles for Fast versions ar
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * the input signals should be scaled down to avoid intermediate overflows.
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * <b>Opt Versions</b>
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  *
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * \par
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * Opt versions are supported for Q15 and Q7.  Design uses internal scratch buffer for getting good
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * These versions are optimised in cycles and consumes more memory(Scratch memory) compared to Q15 
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  */
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /**
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @addtogroup PartialConv
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @{
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  */
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** /**
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @brief Partial convolution of floating-point sequences.
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       *pSrcA points to the first input sequence.
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       srcALen length of the first input sequence.
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       *pSrcB points to the second input sequence.
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       srcBLen length of the second input sequence.
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[out]      *pDst points to the location where the output result is written.
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       firstIndex is the first output sample to start with.
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @param[in]       numPoints is the number of output points to be computed.
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  * @return  Returns either ARM_MATH_SUCCESS if the function completed correctly or ARM_MATH_ARGUMEN
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****  */
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** arm_status arm_conv_partial_f32(
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pSrcA,
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t srcALen,
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pSrcB,
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t srcBLen,
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t * pDst,
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t firstIndex,
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t numPoints)
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** {
  28              	 .loc 1 91 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  45 0004 89B0     	 sub sp,sp,#36
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 72
  48              	 .loc 1 91 0
  49 0006 0F46     	 mov r7,r1
  50 0008 0091     	 str r1,[sp]
  51 000a 139E     	 ldr r6,[sp,#76]
  52 000c 1499     	 ldr r1,[sp,#80]
  53              	.LVL1:
  54 000e 9B46     	 mov fp,r3
  55 0010 7C1E     	 subs r4,r7,#1
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** #if defined (ARM_MATH_DSP)
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn1 = pSrcA;                       /* inputA pointer */
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn2 = pSrcB;                       /* inputB pointer */
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pOut = pDst;                        /* output pointer */
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *px;                                 /* Intermediate inputA pointer */
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *py;                                 /* Intermediate inputB pointer */
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pSrc1, *pSrc2;                      /* Intermediate pointers */
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t sum, acc0, acc1, acc2, acc3;         /* Accumulator */
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t x0, x1, x2, x3, c0;                  /* Temporary variables to hold state and coefficie
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t j, k, count = 0u, blkCnt, check;
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   int32_t blockSize1, blockSize2, blockSize3;    /* loop counters */
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   arm_status status;                             /* status of Partial convolution */
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
  56              	 .loc 1 112 0
  57 0012 04EB0B05 	 add r5,r4,fp
  58 0016 7318     	 adds r3,r6,r1
  59              	.LVL2:
  60 0018 AB42     	 cmp r3,r5
  61 001a 00F22282 	 bhi .L42
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   {
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_MATH_ARGUMENT_ERROR */
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   }
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   else
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   {
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* The algorithm implementation is based on the lengths of the inputs. */
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* srcB is always made to slide across srcA. */
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* So srcBLen is always considered as shorter or equal to srcALen */
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     if (srcALen >= srcBLen)
  62              	 .loc 1 123 0
  63 001e BB45     	 cmp fp,r7
  64 0020 8046     	 mov r8,r0
  65              	.LVL3:
  66 0022 40F2C781 	 bls .L81
  67 0026 0098     	 ldr r0,[sp]
  68              	.LVL4:
  69 0028 CDF800B0 	 str fp,[sp]
  70 002c 4546     	 mov r5,r8
  71 002e 8346     	 mov fp,r0
  72              	.LVL5:
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcA;
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcB;
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     else
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputA pointer */
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       pIn1 = pSrcB;
  73              	 .loc 1 134 0
  74 0030 9046     	 mov r8,r2
  75              	.LVL6:
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialization of inputB pointer */
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       pIn2 = pSrcA;
  76              	 .loc 1 137 0
  77 0032 2A46     	 mov r2,r5
  78              	.LVL7:
  79              	.L3:
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* srcBLen is always considered as shorter or equal to srcALen */
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       j = srcBLen;
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       srcBLen = srcALen;
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       srcALen = j;
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Conditions to check which loopCounter holds
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * the first and last indices of the output samples to be calculated. */
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     check = firstIndex + numPoints;
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)check > (int32_t)srcALen) ? (int32_t)check - (int32_t)srcALen : 0;
  80              	 .loc 1 148 0
  81 0034 0098     	 ldr r0,[sp]
  82 0036 8342     	 cmp r3,r0
  83 0038 CCBF     	 ite gt
  84 003a 181A     	 subgt r0,r3,r0
  85 003c 0020     	 movle r0,#0
  86 003e 0190     	 str r0,[sp,#4]
  87              	.LVL8:
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize3 = ((int32_t)firstIndex > (int32_t)srcALen - 1) ? blockSize3 - (int32_t)firstIndex + 
  88              	 .loc 1 149 0
  89 0040 0098     	 ldr r0,[sp]
  90 0042 B042     	 cmp r0,r6
  91 0044 04DC     	 bgt .L5
  92 0046 0546     	 mov r5,r0
  93              	 .loc 1 149 0 is_stmt 0 discriminator 1
  94 0048 0198     	 ldr r0,[sp,#4]
  95 004a 801B     	 subs r0,r0,r6
  96              	.LVL9:
  97 004c 2818     	 adds r0,r5,r0
  98              	.LVL10:
  99 004e 0190     	 str r0,[sp,#4]
 100              	.LVL11:
 101              	.L5:
 102 0050 6FEA0609 	 mvn r9,r6
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = ((int32_t) srcBLen - 1) - (int32_t) firstIndex;
 103              	 .loc 1 150 0 is_stmt 1 discriminator 4
 104 0054 D944     	 add r9,r9,fp
 105              	.LVL12:
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****                                      (int32_t) numPoints) : 0;
 106              	 .loc 1 152 0 discriminator 4
 107 0056 B9F1000F 	 cmp r9,#0
 108 005a 40F3F681 	 ble .L6
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize1 = (blockSize1 > 0) ? ((check > (srcBLen - 1u)) ? blockSize1 :
 109              	 .loc 1 151 0
 110 005e A342     	 cmp r3,r4
 111 0060 00F2E281 	 bhi .L7
 112              	.LVL13:
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = ((int32_t) check - blockSize3) -
 113              	 .loc 1 153 0 discriminator 1
 114 0064 019B     	 ldr r3,[sp,#4]
 115              	.LVL14:
 116 0066 5F42     	 negs r7,r3
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       (blockSize1 + (int32_t) firstIndex);
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 117              	 .loc 1 155 0 discriminator 1
 118 0068 27EAE773 	 bic r3,r7,r7,asr#31
 119 006c 0293     	 str r3,[sp,#8]
 120              	.LVL15:
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* conv(x,y) at n = x[n] * y[0] + x[n-1] * y[1] + x[n-2] * y[2] + ...+ x[n-N+1] * y[N -1] */
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* The function is internally
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * divided into three stages according to the number of multiplications that has to be
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * taken place between inputA samples and inputB samples. In the first stage of the
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * algorithm, the multiplications increase by one for every iteration.
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * In the second stage of the algorithm, srcBLen number of multiplications are done.
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * In the third stage of the algorithm, the multiplications decrease by one
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * for every iteration. */
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set the output pointer to point to the firstIndex
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * of the output sample to be calculated. */
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     pOut = pDst + firstIndex;
 121              	 .loc 1 168 0 discriminator 1
 122 006e 129B     	 ldr r3,[sp,#72]
 123              	.LVL16:
 124 0070 4FEA860C 	 lsl ip,r6,#2
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage1
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[0]
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[1] + x[1] * y[0]
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[0] * y[srcBlen - 1] + x[1] * y[srcBlen - 2] +...+ x[srcBLen - 1] * y[0]
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      */
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are increased by 1 for every iteration.
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        The count variable holds the number of MAC operations performed.
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        Since the partial convolution starts from from firstIndex
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        Number of Macs to be performed is firstIndex + 1 */
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     count = 1u + firstIndex;
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     px = pIn1;
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = pIn2 + firstIndex;
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc1;
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* ------------------------
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * Stage1 process
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ----------------------*/
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* The first stage starts here */
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize1 > 0)
 125              	 .loc 1 198 0 discriminator 1
 126 0074 B1F10009 	 subs r9,r1,#0
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 127              	 .loc 1 168 0 discriminator 1
 128 0078 03EB0C05 	 add r5,r3,ip
 129              	.LVL17:
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 130              	 .loc 1 184 0 discriminator 1
 131 007c 06F1010E 	 add lr,r6,#1
 132              	.LVL18:
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc1;
 133              	 .loc 1 190 0 discriminator 1
 134 0080 9444     	 add ip,ip,r2
 135              	.LVL19:
 136              	 .loc 1 198 0 discriminator 1
 137 0082 41DD     	 ble .L8
 138              	.LVL20:
 139              	.L13:
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2u;
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 140              	 .loc 1 208 0
 141 0084 5FEA9E07 	 lsrs r7,lr,#2
 142              	.LVL21:
 143 0088 DFEDCF7A 	 flds s15,.L83
 144 008c 00F09881 	 beq .L45
 145 0090 08F11001 	 add r1,r8,#16
 146 0094 ACF11003 	 sub r3,ip,#16
 147 0098 3846     	 mov r0,r7
 148              	.LVL22:
 149              	.L10:
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[0] * y[srcBLen - 1] */
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 150              	 .loc 1 211 0
 151 009a 51ED043A 	 flds s7,[r1,#-16]
 152 009e 93ED044A 	 flds s8,[r3,#16]
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[1] * y[srcBLen - 2] */
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 153              	 .loc 1 214 0
 154 00a2 51ED034A 	 flds s9,[r1,#-12]
 155 00a6 93ED035A 	 flds s10,[r3,#12]
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[2] * y[srcBLen - 3] */
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 156              	 .loc 1 217 0
 157 00aa 51ED025A 	 flds s11,[r1,#-8]
 158 00ae 93ED026A 	 flds s12,[r3,#8]
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* x[3] * y[srcBLen - 4] */
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 159              	 .loc 1 220 0
 160 00b2 51ED016A 	 flds s13,[r1,#-4]
 161 00b6 93ED017A 	 flds s14,[r3,#4]
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 162              	 .loc 1 211 0
 163 00ba E3EE847A 	 vfma.f32 s15,s7,s8
 164              	.LVL23:
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 165              	 .loc 1 208 0
 166 00be 0138     	 subs r0,r0,#1
 167              	.LVL24:
 168 00c0 01F11001 	 add r1,r1,#16
 169              	.LVL25:
 170 00c4 A3F11003 	 sub r3,r3,#16
 171              	.LVL26:
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 172              	 .loc 1 214 0
 173 00c8 E4EE857A 	 vfma.f32 s15,s9,s10
 174              	.LVL27:
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 175              	 .loc 1 217 0
 176 00cc E5EE867A 	 vfma.f32 s15,s11,s12
 177              	.LVL28:
 178              	 .loc 1 220 0
 179 00d0 E6EE877A 	 vfma.f32 s15,s13,s14
 180              	.LVL29:
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 181              	 .loc 1 208 0
 182 00d4 E1D1     	 bne .L10
 183 00d6 08EB0710 	 add r0,r8,r7,lsl#4
 184 00da ACEB0711 	 sub r1,ip,r7,lsl#4
 185              	.LVL30:
 186              	.L9:
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4u;
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 187              	 .loc 1 230 0
 188 00de 1EF00303 	 ands r3,lr,#3
 189              	.LVL31:
 190 00e2 08D0     	 beq .L11
 191 00e4 0431     	 adds r1,r1,#4
 192              	.LVL32:
 193              	.L12:
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulates */
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 194              	 .loc 1 233 0
 195 00e6 F0EC016A 	 fldmias r0!,{s13}
 196              	.LVL33:
 197 00ea 31ED017A 	 fldmdbs r1!,{s14}
 198              	.LVL34:
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 199              	 .loc 1 230 0
 200 00ee 013B     	 subs r3,r3,#1
 201              	.LVL35:
 202              	 .loc 1 233 0
 203 00f0 E6EE877A 	 vfma.f32 s15,s13,s14
 204              	.LVL36:
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 205              	 .loc 1 230 0
 206 00f4 F7D1     	 bne .L12
 207              	.LVL37:
 208              	.L11:
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 209              	 .loc 1 198 0
 210 00f6 B9F10109 	 subs r9,r9,#1
 211              	.LVL38:
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 212              	 .loc 1 240 0
 213 00fa E5EC017A 	 fstmias r5!,{s15}
 214              	.LVL39:
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       py = ++pSrc1;
 215              	 .loc 1 243 0
 216 00fe 0CF1040C 	 add ip,ip,#4
 217              	.LVL40:
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1;
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Increment the MAC count */
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       count++;
 218              	 .loc 1 247 0
 219 0102 0EF1010E 	 add lr,lr,#1
 220              	.LVL41:
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 221              	 .loc 1 198 0
 222 0106 BDD1     	 bne .L13
 223              	.LVL42:
 224              	.L8:
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the loop counter */
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       blockSize1--;
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage2
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------------*/
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum = x[0] * y[srcBLen-1] + x[1] * y[srcBLen-2] +...+ x[srcBLen-1] * y[0]
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[1] * y[srcBLen-1] + x[2] * y[srcBLen-2] +...+ x[srcBLen] * y[0]
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum = x[srcALen-srcBLen-2] * y[srcBLen-1] + x[srcALen] * y[srcBLen-2] +...+ x[srcALen-1] * y
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      */
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     if ((int32_t)firstIndex - (int32_t)srcBLen + 1 > 0)
 225              	 .loc 1 264 0
 226 0108 CBEB0603 	 rsb r3,fp,r6
 227 010c 002B     	 cmp r3,#0
 228 010e A4BF     	 itt ge
 229 0110 711C     	 addge r1,r6,#1
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1 + firstIndex - srcBLen + 1;
 230              	 .loc 1 266 0
 231 0112 CBEB0101 	 rsbge r1,fp,r1
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     else
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       px = pIn1;
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 232              	 .loc 1 274 0
 233 0116 0BF18046 	 add r6,fp,#1073741824
 234              	.LVL43:
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 235              	 .loc 1 266 0
 236 011a ACBF     	 ite ge
 237 011c 08EB8101 	 addge r1,r8,r1,lsl#2
 238              	.LVL44:
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 239              	 .loc 1 270 0
 240 0120 4146     	 movlt r1,r8
 241              	.LVL45:
 242              	 .loc 1 274 0
 243 0122 013E     	 subs r6,r6,#1
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* count is index by which the pointer pIn1 to be incremented */
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     count = 0u;
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* -------------------
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * Stage2 process
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ------------------*/
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Stage2 depends on srcBLen as in this stage srcBLen number of MACS are performed.
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * So, to loop unroll over blockSize2,
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * srcBLen should be greater than or equal to 4 */
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     if (srcBLen >= 4u)
 244              	 .loc 1 287 0
 245 0124 BBF1030F 	 cmp fp,#3
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 246              	 .loc 1 274 0
 247 0128 02EB8606 	 add r6,r2,r6,lsl#2
 248              	.LVL46:
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop unroll over blockSize2, by 4 */
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = ((uint32_t) blockSize2 >> 2u);
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 249              	 .loc 1 292 0
 250 012c 029B     	 ldr r3,[sp,#8]
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 251              	 .loc 1 287 0
 252 012e 40F24D81 	 bls .L15
 253              	.LVL47:
 254              	 .loc 1 292 0
 255 0132 9B08     	 lsrs r3,r3,#2
 256              	.LVL48:
 257 0134 1A46     	 mov r2,r3
 258              	.LVL49:
 259 0136 0393     	 str r3,[sp,#12]
 260 0138 00F09880 	 beq .L16
 261 013c 4FEA9B09 	 lsr r9,fp,#2
 262 0140 4FEA0913 	 lsl r3,r9,#4
 263              	.LVL50:
 264 0144 0132     	 adds r2,r2,#1
 265              	.LVL51:
 266 0146 1201     	 lsls r2,r2,#4
 267 0148 C3F10403 	 rsb r3,r3,#4
 268 014c F318     	 adds r3,r6,r3
 269 014e 05EB020A 	 add r10,r5,r2
 270 0152 0BF0030C 	 and ip,fp,#3
 271 0156 0492     	 str r2,[sp,#16]
 272 0158 A6F11000 	 sub r0,r6,#16
 273 015c 4FEA0912 	 lsl r2,r9,#4
 274 0160 05F11007 	 add r7,r5,#16
 275 0164 0595     	 str r5,[sp,#20]
 276 0166 0696     	 str r6,[sp,#24]
 277 0168 0794     	 str r4,[sp,#28]
 278 016a 08F1100E 	 add lr,r8,#16
 279 016e 6446     	 mov r4,ip
 280 0170 1546     	 mov r5,r2
 281              	.LVL52:
 282 0172 9C46     	 mov ip,r3
 283 0174 0646     	 mov r6,r0
 284              	.LVL53:
 285              	.L21:
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Set all accumulators to zero */
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc0 = 0.0f;
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc1 = 0.0f;
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc2 = 0.0f;
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc3 = 0.0f;
 286              	 .loc 1 298 0
 287 0176 DFED947A 	 flds s15,.L83
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* read x[0], x[1], x[2] samples */
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         x0 = *(px++);
 288              	 .loc 1 301 0
 289 017a D1ED004A 	 flds s9,[r1]
 290              	.LVL54:
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         x1 = *(px++);
 291              	 .loc 1 302 0
 292 017e D1ED015A 	 flds s11,[r1,#4]
 293              	.LVL55:
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         x2 = *(px++);
 294              	 .loc 1 303 0
 295 0182 91ED025A 	 flds s10,[r1,#8]
 296 0186 91ED034A 	 flds s8,[r1,#12]
 297 018a 01F10C00 	 add r0,r1,#12
 298              	.LVL56:
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc3 = 0.0f;
 299              	 .loc 1 297 0
 300 018e B0EE677A 	 fcpys s14,s15
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc2 = 0.0f;
 301              	 .loc 1 296 0
 302 0192 F0EE676A 	 fcpys s13,s15
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         acc1 = 0.0f;
 303              	 .loc 1 295 0
 304 0196 B0EE676A 	 fcpys s12,s15
 305 019a 0246     	 mov r2,r0
 306 019c 3346     	 mov r3,r6
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2u;
 307              	 .loc 1 306 0
 308 019e 4946     	 mov r1,r9
 309 01a0 02E0     	 b .L18
 310              	.LVL57:
 311              	.L82:
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         do
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 1] sample */
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[3] sample */
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *(px++);
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[0] * y[srcBLen - 1] */
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[1] * y[srcBLen - 1] */
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[2] * y[srcBLen - 1] */
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[3] * y[srcBLen - 1] */
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 2] sample */
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[4] sample */
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x0 = *(px++);
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[1] * y[srcBLen - 2] */
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x1 * c0;
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[2] * y[srcBLen - 2] */
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x2 * c0;
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[3] * y[srcBLen - 2] */
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x3 * c0;
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[4] * y[srcBLen - 2] */
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x0 * c0;
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 3] sample */
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[5] sample */
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x1 = *(px++);
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 354:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[2] * y[srcBLen - 3] */
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x2 * c0;
 356:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[3] * y[srcBLen - 2] */
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x3 * c0;
 358:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[4] * y[srcBLen - 2] */
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x0 * c0;
 360:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[5] * y[srcBLen - 2] */
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x1 * c0;
 362:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 363:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 4] sample */
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 365:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 366:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[6] sample */
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x2 = *(px++);
 312              	 .loc 1 367 0
 313 01a2 1032     	 adds r2,r2,#16
 314              	.LVL58:
 315 01a4 92ED004A 	 flds s8,[r2]
 316              	.LVL59:
 317              	.L18:
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 318              	 .loc 1 313 0 discriminator 1
 319 01a8 93ED042A 	 flds s4,[r3,#16]
 320              	.LVL60:
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 321              	 .loc 1 332 0 discriminator 1
 322 01ac D3ED032A 	 flds s5,[r3,#12]
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 323              	 .loc 1 348 0 discriminator 1
 324 01b0 93ED023A 	 flds s6,[r3,#8]
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 325              	 .loc 1 364 0 discriminator 1
 326 01b4 D3ED013A 	 flds s7,[r3,#4]
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 327              	 .loc 1 320 0 discriminator 1
 328 01b8 A4EE826A 	 vfma.f32 s12,s9,s4
 329              	.LVL61:
 368:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 369:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 370:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[3] * y[srcBLen - 4] */
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x3 * c0;
 372:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[4] * y[srcBLen - 4] */
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x0 * c0;
 374:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[5] * y[srcBLen - 4] */
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x1 * c0;
 376:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[6] * y[srcBLen - 4] */
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x2 * c0;
 378:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 379:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 380:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         } while (--k);
 330              	 .loc 1 380 0 discriminator 1
 331 01bc 0139     	 subs r1,r1,#1
 332              	.LVL62:
 333 01be A3F11003 	 sub r3,r3,#16
 334              	.LVL63:
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 335              	 .loc 1 323 0 discriminator 1
 336 01c2 E5EE826A 	 vfma.f32 s13,s11,s4
 337              	.LVL64:
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 338              	 .loc 1 326 0 discriminator 1
 339 01c6 A5EE027A 	 vfma.f32 s14,s10,s4
 340              	.LVL65:
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 341              	 .loc 1 329 0 discriminator 1
 342 01ca E4EE027A 	 vfma.f32 s15,s8,s4
 343              	.LVL66:
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 344              	 .loc 1 335 0 discriminator 1
 345 01ce D2ED014A 	 flds s9,[r2,#4]
 346              	.LVL67:
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[2] * y[srcBLen - 2] */
 347              	 .loc 1 339 0 discriminator 1
 348 01d2 A5EEA26A 	 vfma.f32 s12,s11,s5
 349              	.LVL68:
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[3] * y[srcBLen - 2] */
 350              	 .loc 1 341 0 discriminator 1
 351 01d6 E5EE226A 	 vfma.f32 s13,s10,s5
 352              	.LVL69:
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[4] * y[srcBLen - 2] */
 353              	 .loc 1 343 0 discriminator 1
 354 01da A4EE227A 	 vfma.f32 s14,s8,s5
 355              	.LVL70:
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 356              	 .loc 1 345 0 discriminator 1
 357 01de E4EEA27A 	 vfma.f32 s15,s9,s5
 358              	.LVL71:
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 359              	 .loc 1 351 0 discriminator 1
 360 01e2 D2ED025A 	 flds s11,[r2,#8]
 361              	.LVL72:
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[3] * y[srcBLen - 2] */
 362              	 .loc 1 355 0 discriminator 1
 363 01e6 A5EE036A 	 vfma.f32 s12,s10,s6
 364              	.LVL73:
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[4] * y[srcBLen - 2] */
 365              	 .loc 1 357 0 discriminator 1
 366 01ea E4EE036A 	 vfma.f32 s13,s8,s6
 367              	.LVL74:
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[5] * y[srcBLen - 2] */
 368              	 .loc 1 359 0 discriminator 1
 369 01ee A4EE837A 	 vfma.f32 s14,s9,s6
 370              	.LVL75:
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 371              	 .loc 1 361 0 discriminator 1
 372 01f2 E5EE837A 	 vfma.f32 s15,s11,s6
 373              	.LVL76:
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 374              	 .loc 1 367 0 discriminator 1
 375 01f6 92ED035A 	 flds s10,[r2,#12]
 376              	.LVL77:
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[4] * y[srcBLen - 4] */
 377              	 .loc 1 371 0 discriminator 1
 378 01fa A4EE236A 	 vfma.f32 s12,s8,s7
 379              	.LVL78:
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[5] * y[srcBLen - 4] */
 380              	 .loc 1 373 0 discriminator 1
 381 01fe E4EEA36A 	 vfma.f32 s13,s9,s7
 382              	.LVL79:
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[6] * y[srcBLen - 4] */
 383              	 .loc 1 375 0 discriminator 1
 384 0202 A5EEA37A 	 vfma.f32 s14,s11,s7
 385              	.LVL80:
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 386              	 .loc 1 377 0 discriminator 1
 387 0206 E5EE237A 	 vfma.f32 s15,s10,s7
 388              	.LVL81:
 389              	 .loc 1 380 0 discriminator 1
 390 020a CAD1     	 bne .L82
 391 020c 2844     	 add r0,r0,r5
 392              	.LVL82:
 381:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 382:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 383:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****          ** No loop unrolling is used. */
 384:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4u;
 385:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 393              	 .loc 1 386 0
 394 020e ACB1     	 cbz r4,.L19
 395 0210 6246     	 mov r2,ip
 396              	.LVL83:
 397 0212 2346     	 mov r3,r4
 398              	.LVL84:
 399              	.L20:
 387:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 388:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read y[srcBLen - 5] sample */
 389:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           c0 = *(py--);
 400              	 .loc 1 389 0
 401 0214 32ED014A 	 fldmdbs r2!,{s8}
 402              	.LVL85:
 390:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 391:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Read x[7] sample */
 392:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x3 = *(px++);
 403              	 .loc 1 392 0
 404 0218 F0EC013A 	 fldmias r0!,{s7}
 405              	.LVL86:
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 406              	 .loc 1 386 0
 407 021c 013B     	 subs r3,r3,#1
 408              	.LVL87:
 393:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 394:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 395:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc0 +=  x[4] * y[srcBLen - 5] */
 396:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc0 += x0 * c0;
 409              	 .loc 1 396 0
 410 021e A4EE846A 	 vfma.f32 s12,s9,s8
 411              	.LVL88:
 397:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc1 +=  x[5] * y[srcBLen - 5] */
 398:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc1 += x1 * c0;
 412              	 .loc 1 398 0
 413 0222 E5EE846A 	 vfma.f32 s13,s11,s8
 414              	.LVL89:
 399:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc2 +=  x[6] * y[srcBLen - 5] */
 400:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc2 += x2 * c0;
 415              	 .loc 1 400 0
 416 0226 A5EE047A 	 vfma.f32 s14,s10,s8
 417              	.LVL90:
 418 022a F0EE654A 	 fcpys s9,s11
 419              	.LVL91:
 401:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* acc3 +=  x[7] * y[srcBLen - 5] */
 402:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           acc3 += x3 * c0;
 420              	 .loc 1 402 0
 421 022e E3EE847A 	 vfma.f32 s15,s7,s8
 422              	.LVL92:
 423 0232 F0EE455A 	 fcpys s11,s10
 424              	.LVL93:
 403:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 404:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Reuse the present samples for the next MAC */
 405:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x0 = x1;
 406:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x1 = x2;
 407:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           x2 = x3;
 425              	 .loc 1 407 0
 426 0236 B0EE635A 	 fcpys s10,s7
 427              	.LVL94:
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 428              	 .loc 1 386 0
 429 023a EBD1     	 bne .L20
 430              	.LVL95:
 431              	.L19:
 408:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 409:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 410:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 411:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         }
 412:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 413:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 414:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc0;
 432              	 .loc 1 414 0
 433 023c 07ED046A 	 fsts s12,[r7,#-16]
 415:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc1;
 434              	 .loc 1 415 0
 435 0240 47ED036A 	 fsts s13,[r7,#-12]
 416:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc2;
 436              	 .loc 1 416 0
 437 0244 07ED027A 	 fsts s14,[r7,#-8]
 417:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = acc3;
 438              	 .loc 1 417 0
 439 0248 47ED017A 	 fsts s15,[r7,#-4]
 440 024c 1037     	 adds r7,r7,#16
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 441              	 .loc 1 292 0
 442 024e 5745     	 cmp r7,r10
 418:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 419:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the pointer pIn1 index, count by 1 */
 420:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         count += 4u;
 421:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 422:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 423:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 443              	 .loc 1 423 0
 444 0250 7146     	 mov r1,lr
 445              	.LVL96:
 446 0252 0EF1100E 	 add lr,lr,#16
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 447              	 .loc 1 292 0
 448 0256 8ED1     	 bne .L21
 449 0258 049B     	 ldr r3,[sp,#16]
 450 025a 059D     	 ldr r5,[sp,#20]
 451 025c 069E     	 ldr r6,[sp,#24]
 452 025e 079C     	 ldr r4,[sp,#28]
 453 0260 A3F11001 	 sub r1,r3,#16
 454              	.LVL97:
 455 0264 039B     	 ldr r3,[sp,#12]
 456 0266 0D44     	 add r5,r5,r1
 457 0268 9B00     	 lsls r3,r3,#2
 458 026a 4144     	 add r1,r1,r8
 459              	.LVL98:
 460              	.L16:
 424:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 425:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 426:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 427:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 428:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 429:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 430:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* If the blockSize2 is not a multiple of 4, compute any remaining output samples here.
 431:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 432:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2 % 0x4u;
 433:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 434:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 461              	 .loc 1 434 0
 462 026c 029A     	 ldr r2,[sp,#8]
 463 026e 12F00307 	 ands r7,r2,#3
 464              	.LVL99:
 465 0272 00F0F480 	 beq .L49
 466 0276 4FEA9B0A 	 lsr r10,fp,#2
 467 027a 4FEA0A19 	 lsl r9,r10,#4
 468 027e 0133     	 adds r3,r3,#1
 469              	.LVL100:
 470 0280 C9F10409 	 rsb r9,r9,#4
 471 0284 0BF0030C 	 and ip,fp,#3
 472 0288 08EB830E 	 add lr,r8,r3,lsl#2
 473 028c A6F11002 	 sub r2,r6,#16
 474 0290 06EB0903 	 add r3,r6,r9
 475              	.LVL101:
 476 0294 0296     	 str r6,[sp,#8]
 477 0296 0394     	 str r4,[sp,#12]
 478 0298 05EB8707 	 add r7,r5,r7,lsl#2
 479              	.LVL102:
 480 029c 6446     	 mov r4,ip
 481 029e 4FEA0A19 	 lsl r9,r10,#4
 482 02a2 9C46     	 mov ip,r3
 483 02a4 1646     	 mov r6,r2
 484              	.LVL103:
 485              	.L26:
 435:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 436:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 437:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 486              	 .loc 1 437 0
 487 02a6 DFED487A 	 flds s15,.L83
 488 02aa 01F11002 	 add r2,r1,#16
 489 02ae 3346     	 mov r3,r6
 438:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 439:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 440:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen >> 2u;
 490              	 .loc 1 440 0
 491 02b0 5046     	 mov r0,r10
 492              	.LVL104:
 493              	.L23:
 441:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 442:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 443:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****          ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 444:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 445:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 446:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulates */
 447:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 494              	 .loc 1 447 0
 495 02b2 52ED043A 	 flds s7,[r2,#-16]
 496 02b6 93ED044A 	 flds s8,[r3,#16]
 448:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 497              	 .loc 1 448 0
 498 02ba 52ED034A 	 flds s9,[r2,#-12]
 499 02be 93ED035A 	 flds s10,[r3,#12]
 449:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 500              	 .loc 1 449 0
 501 02c2 52ED025A 	 flds s11,[r2,#-8]
 502 02c6 93ED026A 	 flds s12,[r3,#8]
 450:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 503              	 .loc 1 450 0
 504 02ca 52ED016A 	 flds s13,[r2,#-4]
 505 02ce 93ED017A 	 flds s14,[r3,#4]
 447:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 506              	 .loc 1 447 0
 507 02d2 E3EE847A 	 vfma.f32 s15,s7,s8
 508              	.LVL105:
 444:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 509              	 .loc 1 444 0
 510 02d6 0138     	 subs r0,r0,#1
 511              	.LVL106:
 512 02d8 02F11002 	 add r2,r2,#16
 513              	.LVL107:
 514 02dc A3F11003 	 sub r3,r3,#16
 515              	.LVL108:
 448:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 516              	 .loc 1 448 0
 517 02e0 E4EE857A 	 vfma.f32 s15,s9,s10
 518              	.LVL109:
 449:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 519              	 .loc 1 449 0
 520 02e4 E5EE867A 	 vfma.f32 s15,s11,s12
 521              	.LVL110:
 522              	 .loc 1 450 0
 523 02e8 E6EE877A 	 vfma.f32 s15,s13,s14
 524              	.LVL111:
 444:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 525              	 .loc 1 444 0
 526 02ec E1D1     	 bne .L23
 527 02ee 4944     	 add r1,r1,r9
 528              	.LVL112:
 451:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 452:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 453:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 454:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         }
 455:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 456:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* If the srcBLen is not a multiple of 4, compute any remaining MACs here.
 457:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****          ** No loop unrolling is used. */
 458:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen % 0x4u;
 459:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 460:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 529              	 .loc 1 460 0
 530 02f0 4CB1     	 cbz r4,.L24
 531 02f2 6246     	 mov r2,ip
 532 02f4 2346     	 mov r3,r4
 533              	.LVL113:
 534              	.L25:
 461:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 462:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 463:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 535              	 .loc 1 463 0
 536 02f6 F1EC016A 	 fldmias r1!,{s13}
 537              	.LVL114:
 538 02fa 32ED017A 	 fldmdbs r2!,{s14}
 539              	.LVL115:
 460:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 540              	 .loc 1 460 0
 541 02fe 013B     	 subs r3,r3,#1
 542              	.LVL116:
 543              	 .loc 1 463 0
 544 0300 E6EE877A 	 vfma.f32 s15,s13,s14
 545              	.LVL117:
 460:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 546              	 .loc 1 460 0
 547 0304 F7D1     	 bne .L25
 548              	.LVL118:
 549              	.L24:
 464:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 465:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 466:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 467:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         }
 468:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 469:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 470:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 550              	 .loc 1 470 0
 551 0306 E5EC017A 	 fstmias r5!,{s15}
 552              	.LVL119:
 434:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 553              	 .loc 1 434 0
 554 030a BD42     	 cmp r5,r7
 471:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 472:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the MAC count */
 473:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 474:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 475:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 476:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 555              	 .loc 1 476 0
 556 030c 7146     	 mov r1,lr
 557              	.LVL120:
 558 030e 0EF1040E 	 add lr,lr,#4
 434:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 559              	 .loc 1 434 0
 560 0312 C8D1     	 bne .L26
 561 0314 029E     	 ldr r6,[sp,#8]
 562 0316 039C     	 ldr r4,[sp,#12]
 563              	.LVL121:
 564              	.L22:
 565 0318 009B     	 ldr r3,[sp]
 566 031a 0133     	 adds r3,r3,#1
 477:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 478:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 479:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 480:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 481:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 482:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 483:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     else
 484:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 485:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* If the srcBLen is not a multiple of 4,
 486:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        * the blockSize2 loop cannot be unrolled by 4 */
 487:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       blkCnt = (uint32_t) blockSize2;
 488:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (blkCnt > 0u)
 490:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 491:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Accumulator is made zero for every iteration */
 492:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum = 0.0f;
 493:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 494:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* srcBLen number of MACS should be performed */
 495:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k = srcBLen;
 496:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 497:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         while (k > 0u)
 498:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 499:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Perform the multiply-accumulate */
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += *px++ * *py--;
 501:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 502:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* Decrement the loop counter */
 503:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           k--;
 504:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         }
 505:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 506:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Store the result in the accumulator in the destination buffer. */
 507:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         *pOut++ = sum;
 508:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 509:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Increment the MAC count */
 510:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         count++;
 511:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 512:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Update the inputA and inputB pointers for next MAC calculation */
 513:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         px = pIn1 + count;
 514:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 515:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 516:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 517:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         blkCnt--;
 518:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 519:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 520:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 521:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 522:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* --------------------------
 523:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * Initializations of stage3
 524:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * -------------------------*/
 525:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 526:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* sum += x[srcALen-srcBLen+1] * y[srcBLen-1] + x[srcALen-srcBLen+2] * y[srcBLen-2] +...+ x[src
 527:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum += x[srcALen-srcBLen+2] * y[srcBLen-1] + x[srcALen-srcBLen+3] * y[srcBLen-2] +...+ x[src
 528:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * ....
 529:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-2] * y[srcBLen-1] + x[srcALen-1] * y[srcBLen-2]
 530:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      * sum +=  x[srcALen-1] * y[srcBLen-1]
 531:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****      */
 532:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 533:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* In this stage the MAC operations are decreased by 1 for every iteration.
 534:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        The count variable holds the number of MAC operations performed */
 535:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     count = srcBLen - 1u;
 536:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 537:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputA */
 538:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc1 = (pIn1 + srcALen) - (srcBLen - 1u);
 567              	 .loc 1 538 0
 568 031c CBEB0303 	 rsb r3,fp,r3
 569 0320 08EB8308 	 add r8,r8,r3,lsl#2
 570              	.LVL122:
 539:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     px = pSrc1;
 540:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 541:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Working pointer of inputB */
 542:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     pSrc2 = pIn2 + (srcBLen - 1u);
 543:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 544:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 545:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     while (blockSize3 > 0)
 571              	 .loc 1 545 0
 572 0324 019B     	 ldr r3,[sp,#4]
 573 0326 002B     	 cmp r3,#0
 574 0328 C8BF     	 it gt
 575 032a E51A     	 subgt r5,r4,r3
 576 032c 3DDD     	 ble .L40
 577              	.LVL123:
 578              	.L39:
 546:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 547:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Accumulator is made zero for every iteration */
 548:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 549:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 550:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Apply loop unrolling and compute 4 MACs simultaneously. */
 551:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       k = count >> 2u;
 552:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 553:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* First part of the processing with loop unrolling.  Compute 4 MACs at a time.
 554:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        ** a second loop below computes MACs for the remaining 1 to 3 samples. */
 555:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 579              	 .loc 1 555 0
 580 032e A008     	 lsrs r0,r4,#2
 581              	.LVL124:
 582 0330 DFED257A 	 flds s15,.L83
 583 0334 41D0     	 beq .L50
 584 0336 08F11002 	 add r2,r8,#16
 585 033a A6F11003 	 sub r3,r6,#16
 586 033e 0146     	 mov r1,r0
 587              	.LVL125:
 588              	.L36:
 556:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 557:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 1] * y[srcBLen - 1] */
 558:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 589              	 .loc 1 558 0
 590 0340 52ED043A 	 flds s7,[r2,#-16]
 591 0344 93ED044A 	 flds s8,[r3,#16]
 559:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 560:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 2] * y[srcBLen - 2] */
 561:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 592              	 .loc 1 561 0
 593 0348 52ED034A 	 flds s9,[r2,#-12]
 594 034c 93ED035A 	 flds s10,[r3,#12]
 562:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 563:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 3] * y[srcBLen - 3] */
 564:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 595              	 .loc 1 564 0
 596 0350 52ED025A 	 flds s11,[r2,#-8]
 597 0354 93ED026A 	 flds s12,[r3,#8]
 565:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 566:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum += x[srcALen - srcBLen + 4] * y[srcBLen - 4] */
 567:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 598              	 .loc 1 567 0
 599 0358 52ED016A 	 flds s13,[r2,#-4]
 600 035c 93ED017A 	 flds s14,[r3,#4]
 558:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 601              	 .loc 1 558 0
 602 0360 E3EE847A 	 vfma.f32 s15,s7,s8
 603              	.LVL126:
 555:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 604              	 .loc 1 555 0
 605 0364 0139     	 subs r1,r1,#1
 606              	.LVL127:
 607 0366 02F11002 	 add r2,r2,#16
 608              	.LVL128:
 609 036a A3F11003 	 sub r3,r3,#16
 610              	.LVL129:
 561:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 611              	 .loc 1 561 0
 612 036e E4EE857A 	 vfma.f32 s15,s9,s10
 613              	.LVL130:
 564:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 614              	 .loc 1 564 0
 615 0372 E5EE867A 	 vfma.f32 s15,s11,s12
 616              	.LVL131:
 617              	 .loc 1 567 0
 618 0376 E6EE877A 	 vfma.f32 s15,s13,s14
 619              	.LVL132:
 555:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 620              	 .loc 1 555 0
 621 037a E1D1     	 bne .L36
 622 037c 08EB0011 	 add r1,r8,r0,lsl#4
 623 0380 A6EB0012 	 sub r2,r6,r0,lsl#4
 624              	.LVL133:
 625              	.L35:
 568:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 569:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 570:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 571:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 572:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 573:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* If the count is not a multiple of 4, compute any remaining MACs here.
 574:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****        ** No loop unrolling is used. */
 575:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       k = count % 0x4u;
 576:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 577:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       while (k > 0u)
 626              	 .loc 1 577 0
 627 0384 14F00303 	 ands r3,r4,#3
 628              	.LVL134:
 629 0388 08D0     	 beq .L37
 630 038a 0432     	 adds r2,r2,#4
 631              	.LVL135:
 632              	.L38:
 578:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 579:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Perform the multiply-accumulates */
 580:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* sum +=  x[srcALen-1] * y[srcBLen-1] */
 581:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         sum += *px++ * *py--;
 633              	 .loc 1 581 0
 634 038c F1EC016A 	 fldmias r1!,{s13}
 635              	.LVL136:
 636 0390 32ED017A 	 fldmdbs r2!,{s14}
 637              	.LVL137:
 577:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 638              	 .loc 1 577 0
 639 0394 013B     	 subs r3,r3,#1
 640              	.LVL138:
 641              	 .loc 1 581 0
 642 0396 E6EE877A 	 vfma.f32 s15,s13,s14
 643              	.LVL139:
 577:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 644              	 .loc 1 577 0
 645 039a F7D1     	 bne .L38
 646              	.LVL140:
 647              	.L37:
 582:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 583:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Decrement the loop counter */
 584:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         k--;
 585:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 586:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 587:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 588:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       *pOut++ = sum;
 589:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 590:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Update the inputA and inputB pointers for next MAC calculation */
 591:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       px = ++pSrc1;
 592:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       py = pSrc2;
 593:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 594:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the MAC count */
 595:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       count--;
 648              	 .loc 1 595 0
 649 039c 013C     	 subs r4,r4,#1
 650              	.LVL141:
 545:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 651              	 .loc 1 545 0
 652 039e AC42     	 cmp r4,r5
 588:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 653              	 .loc 1 588 0
 654 03a0 E7EC017A 	 fstmias r7!,{s15}
 655              	.LVL142:
 591:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       py = pSrc2;
 656              	 .loc 1 591 0
 657 03a4 08F10408 	 add r8,r8,#4
 658              	.LVL143:
 545:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 659              	 .loc 1 545 0
 660 03a8 C1D1     	 bne .L39
 661              	.LVL144:
 662              	.L40:
 596:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 597:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Decrement the loop counter */
 598:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       blockSize3--;
 599:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 600:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 601:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 602:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* set status as ARM_MATH_SUCCESS */
 603:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 663              	 .loc 1 603 0
 664 03aa 0020     	 movs r0,#0
 665              	.LVL145:
 666              	.L2:
 604:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   }
 605:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 606:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   /* Return to application */
 607:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 667              	 .loc 1 607 0
 668 03ac 40B2     	 sxtb r0,r0
 608:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 609:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** #else
 610:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 611:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   /* Run the below code for Cortex-M0 */
 612:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 613:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn1 = pSrcA;                       /* inputA pointer */
 614:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t *pIn2 = pSrcB;                       /* inputB pointer */
 615:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   float32_t sum;                                 /* Accumulator */
 616:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   uint32_t i, j;                                 /* loop counters */
 617:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   arm_status status;                             /* status of Partial convolution */
 618:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 619:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   /* Check for range of output samples to be calculated */
 620:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   if ((firstIndex + numPoints) > ((srcALen + (srcBLen - 1u))))
 621:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   {
 622:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Set status as ARM_ARGUMENT_ERROR */
 623:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_ARGUMENT_ERROR;
 624:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   }
 625:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   else
 626:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   {
 627:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* Loop to calculate convolution for output length number of values */
 628:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     for (i = firstIndex; i <= (firstIndex + numPoints - 1); i++)
 629:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     {
 630:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Initialize sum with zero to carry on MAC operations */
 631:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       sum = 0.0f;
 632:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 633:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Loop to perform MAC operations according to convolution equation */
 634:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       for (j = 0u; j <= i; j++)
 635:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 636:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         /* Check the array limitations for inputs */
 637:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         if ((((i - j) < srcBLen) && (j < srcALen)))
 638:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         {
 639:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           /* z[i] += x[i-j] * y[j] */
 640:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****           sum += pIn1[j] * pIn2[i - j];
 641:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         }
 642:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       }
 643:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       /* Store the output in the destination buffer */
 644:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       pDst[i] = sum;
 645:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     }
 646:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     /* set status as ARM_SUCCESS as there are no argument errors */
 647:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     status = ARM_MATH_SUCCESS;
 648:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   }
 649:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   return (status);
 650:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 651:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 652:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 653:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** }
 669              	 .loc 1 653 0
 670 03ae 09B0     	 add sp,sp,#36
 671              	.LCFI2:
 672              	 .cfi_remember_state
 673              	 .cfi_def_cfa_offset 36
 674              	.LVL146:
 675              	 
 676 03b0 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 677              	.LVL147:
 678              	.L81:
 679              	.LCFI3:
 680              	 .cfi_restore_state
 681 03b4 0BF1FF34 	 add r4,fp,#-1
 682 03b8 3CE6     	 b .L3
 683              	.LVL148:
 684              	.L50:
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc2;
 685              	 .loc 1 274 0
 686 03ba 3246     	 mov r2,r6
 555:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 687              	 .loc 1 555 0
 688 03bc 4146     	 mov r1,r8
 689 03be E1E7     	 b .L35
 690              	.LVL149:
 691              	.L45:
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 692              	 .loc 1 208 0
 693 03c0 6146     	 mov r1,ip
 694 03c2 4046     	 mov r0,r8
 695 03c4 8BE6     	 b .L9
 696              	.L84:
 697 03c6 00BF     	 .align 2
 698              	.L83:
 699 03c8 00000000 	 .word 0
 700              	.LVL150:
 701              	.L15:
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 702              	 .loc 1 489 0
 703 03cc 002B     	 cmp r3,#0
 704 03ce 46D0     	 beq .L49
 705 03d0 BBF1000F 	 cmp fp,#0
 706 03d4 47D0     	 beq .L27
 707 03d6 BBF1010F 	 cmp fp,#1
 708 03da 6BD0     	 beq .L28
 709 03dc BBF1020F 	 cmp fp,#2
 710 03e0 4AD0     	 beq .L29
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 711              	 .loc 1 500 0
 712 03e2 5FED074A 	 flds s9,.L83
 713 03e6 05EB8307 	 add r7,r5,r3,lsl#2
 714 03ea 08F10403 	 add r3,r8,#4
 715              	.LVL151:
 716              	.L30:
 717 03ee 91ED005A 	 flds s10,[r1]
 718 03f2 D6ED007A 	 flds s15,[r6]
 719 03f6 D1ED015A 	 flds s11,[r1,#4]
 720 03fa 16ED016A 	 flds s12,[r6,#-4]
 721 03fe D1ED026A 	 flds s13,[r1,#8]
 722 0402 16ED027A 	 flds s14,[r6,#-8]
 723 0406 B0EE644A 	 fcpys s8,s9
 724 040a A5EE274A 	 vfma.f32 s8,s10,s15
 513:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 725              	 .loc 1 513 0
 726 040e 1946     	 mov r1,r3
 727              	.LVL152:
 728 0410 0433     	 adds r3,r3,#4
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 729              	 .loc 1 500 0
 730 0412 F0EE447A 	 fcpys s15,s8
 731              	.LVL153:
 732 0416 E5EE867A 	 vfma.f32 s15,s11,s12
 733              	.LVL154:
 734 041a E6EE877A 	 vfma.f32 s15,s13,s14
 507:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 735              	 .loc 1 507 0
 736 041e E5EC017A 	 fstmias r5!,{s15}
 737              	.LVL155:
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 738              	 .loc 1 489 0
 739 0422 BD42     	 cmp r5,r7
 740 0424 E3D1     	 bne .L30
 741 0426 77E7     	 b .L22
 742              	.LVL156:
 743              	.L7:
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       (blockSize1 + (int32_t) firstIndex);
 744              	 .loc 1 153 0
 745 0428 0199     	 ldr r1,[sp,#4]
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     blockSize2 = (blockSize2 > 0) ? blockSize2 : 0;
 746              	 .loc 1 154 0
 747 042a 06EB0907 	 add r7,r6,r9
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       (blockSize1 + (int32_t) firstIndex);
 748              	 .loc 1 153 0
 749 042e 5B1A     	 subs r3,r3,r1
 750              	.LVL157:
 751 0430 DF1B     	 subs r7,r3,r7
 752              	.LVL158:
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 753              	 .loc 1 155 0
 754 0432 27EAE773 	 bic r3,r7,r7,asr#31
 755 0436 0293     	 str r3,[sp,#8]
 756              	.LVL159:
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 757              	 .loc 1 168 0
 758 0438 129B     	 ldr r3,[sp,#72]
 759              	.LVL160:
 760 043a 4FEA860C 	 lsl ip,r6,#2
 761 043e 03EB0C05 	 add r5,r3,ip
 762              	.LVL161:
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 763              	 .loc 1 184 0
 764 0442 06F1010E 	 add lr,r6,#1
 765              	.LVL162:
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****     py = pSrc1;
 766              	 .loc 1 190 0
 767 0446 9444     	 add ip,ip,r2
 768              	.LVL163:
 769 0448 1CE6     	 b .L13
 770              	.LVL164:
 771              	.L6:
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       (blockSize1 + (int32_t) firstIndex);
 772              	 .loc 1 153 0
 773 044a 0199     	 ldr r1,[sp,#4]
 774 044c 5B1A     	 subs r3,r3,r1
 775              	.LVL165:
 776 044e 9F1B     	 subs r7,r3,r6
 777              	.LVL166:
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 778              	 .loc 1 155 0
 779 0450 27EAE773 	 bic r3,r7,r7,asr#31
 780 0454 0293     	 str r3,[sp,#8]
 781              	.LVL167:
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 782              	 .loc 1 168 0
 783 0456 129B     	 ldr r3,[sp,#72]
 784              	.LVL168:
 785 0458 03EB8605 	 add r5,r3,r6,lsl#2
 786              	.LVL169:
 787 045c 54E6     	 b .L8
 788              	.LVL170:
 789              	.L49:
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 790              	 .loc 1 489 0
 791 045e 2F46     	 mov r7,r5
 792 0460 5AE7     	 b .L22
 793              	.LVL171:
 794              	.L42:
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****   }
 795              	 .loc 1 115 0
 796 0462 FF20     	 movs r0,#255
 797              	.LVL172:
 798 0464 A2E7     	 b .L2
 799              	.LVL173:
 800              	.L27:
 507:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 801              	 .loc 1 507 0
 802 0466 029B     	 ldr r3,[sp,#8]
 803 0468 9F00     	 lsls r7,r3,#2
 804 046a 3A46     	 mov r2,r7
 805              	.LVL174:
 806 046c 2846     	 mov r0,r5
 807 046e 5946     	 mov r1,fp
 808              	.LVL175:
 809 0470 FFF7FEFF 	 bl memset
 810              	.LVL176:
 811 0474 2F44     	 add r7,r7,r5
 812 0476 4FE7     	 b .L22
 813              	.LVL177:
 814              	.L29:
 815 0478 029B     	 ldr r3,[sp,#8]
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 816              	 .loc 1 500 0
 817 047a 5FED2D5A 	 flds s11,.L83
 818 047e 05EB8307 	 add r7,r5,r3,lsl#2
 819 0482 08F10403 	 add r3,r8,#4
 820              	.LVL178:
 821              	.L31:
 822 0486 91ED006A 	 flds s12,[r1]
 823 048a D6ED007A 	 flds s15,[r6]
 824 048e D1ED016A 	 flds s13,[r1,#4]
 825 0492 16ED017A 	 flds s14,[r6,#-4]
 826 0496 B0EE655A 	 fcpys s10,s11
 827 049a A6EE275A 	 vfma.f32 s10,s12,s15
 513:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 828              	 .loc 1 513 0
 829 049e 1946     	 mov r1,r3
 830              	.LVL179:
 831 04a0 0433     	 adds r3,r3,#4
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 832              	 .loc 1 500 0
 833 04a2 F0EE457A 	 fcpys s15,s10
 834              	.LVL180:
 835 04a6 E6EE877A 	 vfma.f32 s15,s13,s14
 507:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 836              	 .loc 1 507 0
 837 04aa E5EC017A 	 fstmias r5!,{s15}
 838              	.LVL181:
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 839              	 .loc 1 489 0
 840 04ae BD42     	 cmp r5,r7
 841 04b0 E9D1     	 bne .L31
 842 04b2 31E7     	 b .L22
 843              	.LVL182:
 844              	.L28:
 845 04b4 029B     	 ldr r3,[sp,#8]
 500:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 846              	 .loc 1 500 0
 847 04b6 5FED3C6A 	 flds s13,.L83
 848 04ba 05EB8307 	 add r7,r5,r3,lsl#2
 849 04be 08F10403 	 add r3,r8,#4
 850              	.LVL183:
 851              	.L33:
 852 04c2 91ED007A 	 flds s14,[r1]
 853 04c6 D6ED007A 	 flds s15,[r6]
 854 04ca B0EE666A 	 fcpys s12,s13
 855 04ce A7EE276A 	 vfma.f32 s12,s14,s15
 513:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****         py = pSrc2;
 856              	 .loc 1 513 0
 857 04d2 1946     	 mov r1,r3
 858              	.LVL184:
 859 04d4 0433     	 adds r3,r3,#4
 507:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c **** 
 860              	 .loc 1 507 0
 861 04d6 A5EC016A 	 fstmias r5!,{s12}
 862              	.LVL185:
 489:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_conv_partial_f32.c ****       {
 863              	 .loc 1 489 0
 864 04da BD42     	 cmp r5,r7
 865 04dc F1D1     	 bne .L33
 866 04de 1BE7     	 b .L22
 867              	 .cfi_endproc
 868              	.LFE135:
 870              	 .text
 871              	.Letext0:
 872              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 873              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 874              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_conv_partial_f32.c
    {standard input}:20     .text.arm_conv_partial_f32:00000000 $t
    {standard input}:25     .text.arm_conv_partial_f32:00000000 arm_conv_partial_f32
    {standard input}:699    .text.arm_conv_partial_f32:000003c8 $d
    {standard input}:703    .text.arm_conv_partial_f32:000003cc $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
