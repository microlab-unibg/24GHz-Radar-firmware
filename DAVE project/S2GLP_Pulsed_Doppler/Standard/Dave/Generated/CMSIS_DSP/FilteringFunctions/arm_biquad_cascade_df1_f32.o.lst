   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_biquad_cascade_df1_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_biquad_cascade_df1_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_biquad_cascade_df1_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_biquad_cascade_df1_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Title:        arm_biquad_cascade_df1_f32.c
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Description:  Processing function for the floating-point Biquad cascade DirectFormI(DF1) filter
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @defgroup BiquadCascadeDF1 Biquad Cascade IIR Filters Using Direct Form I Structure
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This set of functions implements arbitrary order recursive (IIR) filters.
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The filters are implemented as a cascade of second order Biquad sections.
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The functions support Q15, Q31 and floating-point data types.
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Fast version of Q15 and Q31 also supported on CortexM4 and Cortex-M3.
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The functions operate on blocks of input and output data and each call to the function
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * processes <code>blockSize</code> samples through the filter.
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pSrc</code> points to the array of input data and
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pDst</code> points to the array of output data.
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Both arrays contain <code>blockSize</code> values.
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Algorithm
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Each Biquad stage implements a second order filter using the difference equation:
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2]
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A Direct Form I algorithm is used with 5 coefficients and 4 state variables per stage.
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html Biquad.gif "Single Biquad filter stage"
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficients <code>b0, b1 and b2 </code> multiply the input signal <code>x[n]</code> and are ref
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficients <code>a1</code> and <code>a2</code> multiply the output signal <code>y[n]</code> an
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Pay careful attention to the sign of the feedback coefficients.
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Some design tools use the difference equation
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     y[n] = b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] - a1 * y[n-1] - a2 * y[n-2]
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * In this case the feedback coefficients <code>a1</code> and <code>a2</code> must be negated when 
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Higher order filters are realized as a cascade of second order sections.
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>numStages</code> refers to the number of second order stages used.
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For example, an 8th order filter would be realized with <code>numStages=4</code> second order st
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html BiquadCascade.gif "8th order filter using a cascade of Biquad stages"
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A 9th order filter would be realized with <code>numStages=5</code> second order stages with the 
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The <code>pState</code> points to state variables array.
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Each Biquad stage has 4 state variables <code>x[n-1], x[n-2], y[n-1],</code> and <code>y[n-2]</c
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state variables are arranged in the <code>pState</code> array as:
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     {x[n-1], x[n-2], y[n-1], y[n-2]}
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The 4 state variables for stage 1 are first, then the 4 state variables for stage 2, and so on.
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state array has a total length of <code>4*numStages</code> values.
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The state variables are updated after each block of data is processed, the coefficients are unto
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Instance Structure
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The coefficients and state variables for a filter are stored together in an instance data struct
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * A separate instance structure must be defined for each filter.
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Coefficient arrays may be shared among several instances while state variable arrays cannot be s
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * There are separate instance structure declarations for each of the 3 supported data types.
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Init Functions
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * There is also an associated initialization function for each data type.
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The initialization function performs following operations:
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Sets the values of the internal structure fields.
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Zeros out the values in the state buffer.
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To do this manually without calling the init function, assign the follow subfields of the instan
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * numStages, pCoeffs, pState. Also set all of the values in pState to zero.
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Use of the initialization function is optional.
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * However, if the initialization function is used, then the instance structure cannot be placed in
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To place an instance structure into a const data section, the instance structure must be manuall
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Set the values in the state buffer to zeros before static initialization.
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The code below statically initializes each of the 3 different data type filter instance structur
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_f32 S1 = {numStages, pState, pCoeffs};
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_q15 S2 = {numStages, pState, pCoeffs, postShift};
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *     arm_biquad_casd_df1_inst_q31 S3 = {numStages, pState, pCoeffs, postShift};
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * where <code>numStages</code> is the number of Biquad stages in the filter; <code>pState</code> i
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <code>pCoeffs</code> is the address of the coefficient buffer; <code>postShift</code> shift to b
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par Fixed-Point Behavior
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Care must be taken when using the Q15 and Q31 versions of the Biquad Cascade filter functions.
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Following issues must be considered:
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Scaling of coefficients
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Filter gain
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * - Overflow and saturation
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Scaling of coefficients: </b>
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * Filter coefficients are represented as fractional values and
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The fixed-point functions have an additional scaling parameter <code>postShift</code>
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * which allow the filter coefficients to exceed the range <code>[+1 -1)</code>.
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * At the output of the filter's accumulator is a shift register which shifts the result by <code>p
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \image html BiquadPostshift.gif "Fixed-point Biquad with shift by postShift bits after accumulat
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This essentially scales the filter coefficients by <code>2^postShift</code>.
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For example, to realize the coefficients
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *    {1.5, -0.8, 1.2, 1.6, -0.9}
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * set the pCoeffs array to:
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <pre>
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *    {0.75, -0.4, 0.6, 0.8, -0.45}
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * </pre>
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * and set <code>postShift=1</code>
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Filter gain: </b>
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * The frequency response of a Biquad filter is a function of its coefficients.
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * It is possible for the gain through the filter to exceed 1.0 meaning that the filter increases t
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * This means that an input signal with amplitude < 1.0 may result in an output > 1.0 and these are
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * To avoid this behavior the filter needs to be scaled down such that its peak gain < 1.0 or the i
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * \par
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * <b>Overflow and saturation: </b>
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * For Q15 and Q31 versions, it is described separately as part of the function specific documentat
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @addtogroup BiquadCascadeDF1
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @{
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** /**
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  *S         points to an instance of the floating-point Biquad cascade structure.
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  *pSrc      points to the block of input data.
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[out] *pDst      points to the block of output data.
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @param[in]  blockSize  number of samples to process per call.
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  * @return     none.
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  *
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****  */
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** void arm_biquad_cascade_df1_f32(
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   const arm_biquad_casd_df1_inst_f32 * S,
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pSrc,
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t * pDst,
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t blockSize)
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** {
  28              	 .loc 1 170 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F043 	 push {r4,r5,r6,r7,r8,r9,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 28
  36              	 .cfi_offset 4,-28
  37              	 .cfi_offset 5,-24
  38              	 .cfi_offset 6,-20
  39              	 .cfi_offset 7,-16
  40              	 .cfi_offset 8,-12
  41              	 .cfi_offset 9,-8
  42              	 .cfi_offset 14,-4
  43 0004 4FEA930C 	 lsr ip,r3,#2
  44 0008 8668     	 ldr r6,[r0,#8]
  45 000a 4568     	 ldr r5,[r0,#4]
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pIn = pSrc;                         /*  source pointer            */
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pOut = pDst;                        /*  destination pointer       */
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pState = S->pState;                 /*  pState pointer            */
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /*  coefficient pointer       */
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t acc;                                 /*  Simulates the accumulator */
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t b0, b1, b2, a1, a2;                  /*  Filter coefficients       */
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t Xn1, Xn2, Yn1, Yn2;                  /*  Filter pState variables   */
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t Xn;                                  /*  temporary input           */
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   uint32_t sample, stage = S->numStages;         /*  loop counters             */
  46              	 .loc 1 179 0
  47 000c 0768     	 ldr r7,[r0]
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   float32_t *pIn = pSrc;                         /*  source pointer            */
  48              	 .loc 1 170 0
  49 000e 9646     	 mov lr,r2
  50 0010 4FEA0C18 	 lsl r8,ip,#4
  51              	.LVL1:
  52 0014 03F00302 	 and r2,r3,#3
  53              	.LVL2:
  54 0018 0EEB0809 	 add r9,lr,r8
  55 001c 1436     	 adds r6,r6,#20
  56 001e 1035     	 adds r5,r5,#16
  57              	.LVL3:
  58              	.L6:
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #if defined (ARM_MATH_DSP)
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   do
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b0 = *pCoeffs++;
  59              	 .loc 1 189 0
  60 0020 56ED054A 	 flds s9,[r6,#-20]
  61              	.LVL4:
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b1 = *pCoeffs++;
  62              	 .loc 1 190 0
  63 0024 16ED044A 	 flds s8,[r6,#-16]
  64              	.LVL5:
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b2 = *pCoeffs++;
  65              	 .loc 1 191 0
  66 0028 56ED033A 	 flds s7,[r6,#-12]
  67              	.LVL6:
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a1 = *pCoeffs++;
  68              	 .loc 1 192 0
  69 002c 16ED023A 	 flds s6,[r6,#-8]
  70              	.LVL7:
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a2 = *pCoeffs++;
  71              	 .loc 1 193 0
  72 0030 56ED012A 	 flds s5,[r6,#-4]
  73              	.LVL8:
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn1 = pState[0];
  74              	 .loc 1 196 0
  75 0034 55ED045A 	 flds s11,[r5,#-16]
  76              	.LVL9:
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn2 = pState[1];
  77              	 .loc 1 197 0
  78 0038 15ED035A 	 flds s10,[r5,#-12]
  79              	.LVL10:
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn1 = pState[2];
  80              	 .loc 1 198 0
  81 003c 55ED027A 	 flds s15,[r5,#-8]
  82              	.LVL11:
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn2 = pState[3];
  83              	 .loc 1 199 0
  84 0040 15ED017A 	 flds s14,[r5,#-4]
  85              	.LVL12:
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Apply loop unrolling and compute 4 output values simultaneously. */
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*      The variable acc hold output values that are being computed:
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize >> 2u;
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
  86              	 .loc 1 214 0
  87 0044 BCF1000F 	 cmp ip,#0
  88 0048 7AD0     	 beq .L7
  89 004a 01F11000 	 add r0,r1,#16
  90 004e 0EF11003 	 add r3,lr,#16
  91 0052 6446     	 mov r4,ip
  92              	.LVL13:
  93              	.L3:
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the first input */
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
  94              	 .loc 1 217 0
  95 0054 50ED041A 	 flds s3,[r0,#-16]
  96              	.LVL14:
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
  97              	 .loc 1 220 0
  98 0058 24EE256A 	 fmuls s12,s8,s11
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the second input */
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = *pIn++;
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn2) + (b1 * Xn) + (b2 * Xn1) + (a1 * Yn2) + (a2 * Yn1);
  99              	 .loc 1 236 0
 100 005c 64EE216A 	 fmuls s13,s8,s3
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 101              	 .loc 1 220 0
 102 0060 A4EEA16A 	 vfma.f32 s12,s9,s3
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 103              	 .loc 1 214 0
 104 0064 013C     	 subs r4,r4,#1
 105              	.LVL15:
 106 0066 00F11000 	 add r0,r0,#16
 107              	.LVL16:
 108 006a 03F11003 	 add r3,r3,#16
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 109              	 .loc 1 220 0
 110 006e A3EE856A 	 vfma.f32 s12,s7,s10
 111 0072 A3EE276A 	 vfma.f32 s12,s6,s15
 112 0076 A2EE876A 	 vfma.f32 s12,s5,s14
 113              	.LVL17:
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 114              	 .loc 1 223 0
 115 007a 03ED086A 	 fsts s12,[r3,#-32]
 116              	.LVL18:
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 117              	 .loc 1 233 0
 118 007e 10ED072A 	 flds s4,[r0,#-28]
 119              	.LVL19:
 120              	 .loc 1 236 0
 121 0082 E4EE826A 	 vfma.f32 s13,s9,s4
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the third input */
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = *pIn++;
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = (b0 * Xn1) + (b1 * Xn2) + (b2 * Xn) + (a1 * Yn1) + (a2 * Yn2);
 122              	 .loc 1 252 0
 123 0086 24EE027A 	 fmuls s14,s8,s4
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 124              	 .loc 1 236 0
 125 008a E3EEA56A 	 vfma.f32 s13,s7,s11
 126 008e E3EE066A 	 vfma.f32 s13,s6,s12
 127 0092 E2EEA76A 	 vfma.f32 s13,s5,s15
 128              	.LVL20:
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 129              	 .loc 1 239 0
 130 0096 43ED076A 	 fsts s13,[r3,#-28]
 131              	.LVL21:
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 132              	 .loc 1 249 0
 133 009a 10ED065A 	 flds s10,[r0,#-24]
 134              	.LVL22:
 135              	 .loc 1 252 0
 136 009e A4EE857A 	 vfma.f32 s14,s9,s10
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn2;
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as: */
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the forth input */
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn2) + (a2 * Yn1);
 137              	 .loc 1 268 0
 138 00a2 64EE057A 	 fmuls s15,s8,s10
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 139              	 .loc 1 252 0
 140 00a6 A3EEA17A 	 vfma.f32 s14,s7,s3
 141 00aa A3EE267A 	 vfma.f32 s14,s6,s13
 142 00ae A2EE867A 	 vfma.f32 s14,s5,s12
 143              	.LVL23:
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 144              	 .loc 1 255 0
 145 00b2 03ED067A 	 fsts s14,[r3,#-24]
 146              	.LVL24:
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 147              	 .loc 1 265 0
 148 00b6 50ED055A 	 flds s11,[r0,#-20]
 149              	.LVL25:
 150              	 .loc 1 268 0
 151 00ba E4EEA57A 	 vfma.f32 s15,s9,s11
 152 00be E3EE827A 	 vfma.f32 s15,s7,s4
 153 00c2 E3EE077A 	 vfma.f32 s15,s6,s14
 154 00c6 E2EEA67A 	 vfma.f32 s15,s5,s13
 155              	.LVL26:
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = Yn1;
 156              	 .loc 1 271 0
 157 00ca 43ED057A 	 fsts s15,[r3,#-20]
 158              	.LVL27:
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 159              	 .loc 1 214 0
 160 00ce C1D1     	 bne .L3
 161 00d0 4144     	 add r1,r1,r8
 162              	 .loc 1 271 0
 163 00d2 4846     	 mov r0,r9
 164              	.LVL28:
 165              	.L2:
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:  */
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      ** No loop unrolling is used. */
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize & 0x3u;
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
 166              	 .loc 1 291 0
 167 00d4 5AB3     	 cbz r2,.L8
 168 00d6 1346     	 mov r3,r2
 169 00d8 03E0     	 b .L5
 170              	.LVL29:
 171              	.L9:
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 172              	 .loc 1 297 0
 173 00da F0EE667A 	 fcpys s15,s13
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 174              	 .loc 1 294 0
 175 00de F0EE465A 	 fcpys s11,s12
 176              	.LVL30:
 177              	.L5:
 178 00e2 B1EC016A 	 fldmias r1!,{s12}
 179              	.LVL31:
 180              	 .loc 1 297 0
 181 00e6 64EE256A 	 fmuls s13,s8,s11
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 182              	 .loc 1 291 0
 183 00ea 013B     	 subs r3,r3,#1
 184              	.LVL32:
 185              	 .loc 1 297 0
 186 00ec E4EE866A 	 vfma.f32 s13,s9,s12
 187 00f0 E3EE856A 	 vfma.f32 s13,s7,s10
 188 00f4 B0EE655A 	 fcpys s10,s11
 189              	.LVL33:
 190 00f8 E3EE276A 	 vfma.f32 s13,s6,s15
 191 00fc E2EE876A 	 vfma.f32 s13,s5,s14
 192              	.LVL34:
 193 0100 B0EE677A 	 fcpys s14,s15
 194              	.LVL35:
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 195              	 .loc 1 300 0
 196 0104 E0EC016A 	 fstmias r0!,{s13}
 197              	.LVL36:
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 198              	 .loc 1 291 0
 199 0108 E7D1     	 bne .L9
 200              	.LVL37:
 201              	.L4:
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:    */
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = Yn1;
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = acc;
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Store the updated state variables back into the pState array */
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn1;
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Subsequent numStages  occur in-place in the output buffer */
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset the output pointer */
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* decrement the loop counter */
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   } while (stage > 0u);
 202              	 .loc 1 334 0
 203 010a 013F     	 subs r7,r7,#1
 204              	.LVL38:
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 205              	 .loc 1 319 0
 206 010c 05ED046A 	 fsts s12,[r5,#-16]
 207              	.LVL39:
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 208              	 .loc 1 320 0
 209 0110 45ED035A 	 fsts s11,[r5,#-12]
 210              	.LVL40:
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 211              	 .loc 1 321 0
 212 0114 45ED026A 	 fsts s13,[r5,#-8]
 213              	.LVL41:
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 214              	 .loc 1 322 0
 215 0118 45ED017A 	 fsts s15,[r5,#-4]
 216              	.LVL42:
 217 011c 06F11406 	 add r6,r6,#20
 218              	.LVL43:
 219 0120 05F11005 	 add r5,r5,#16
 220              	.LVL44:
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 221              	 .loc 1 326 0
 222 0124 7146     	 mov r1,lr
 223              	 .loc 1 334 0
 224 0126 7FF47BAF 	 bne .L6
 225              	.LVL45:
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #else
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   /* Run the below code for Cortex-M0 */
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   do
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   {
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the coefficients */
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b0 = *pCoeffs++;
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b1 = *pCoeffs++;
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     b2 = *pCoeffs++;
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a1 = *pCoeffs++;
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     a2 = *pCoeffs++;
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reading the pState values */
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn1 = pState[0];
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Xn2 = pState[1];
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn1 = pState[2];
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     Yn2 = pState[3];
 354:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*      The variables acc holds the output value that is computed:
 356:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      *    acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1]   + a2 * y[n-2]
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****      */
 358:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     sample = blockSize;
 360:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     while (sample > 0u)
 362:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 363:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Read the input */
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn = *pIn++;
 365:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 366:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* acc =  b0 * x[n] + b1 * x[n-1] + b2 * x[n-2] + a1 * y[n-1] + a2 * y[n-2] */
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       acc = (b0 * Xn) + (b1 * Xn1) + (b2 * Xn2) + (a1 * Yn1) + (a2 * Yn2);
 368:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 369:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Store the result in the accumulator in the destination buffer. */
 370:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       *pOut++ = acc;
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 372:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Every time after the output is computed state should be updated. */
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* The states should be updated as:    */
 374:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn2 = Xn1    */
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Xn1 = Xn     */
 376:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn2 = Yn1    */
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* Yn1 = acc   */
 378:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn2 = Xn1;
 379:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Xn1 = Xn;
 380:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn2 = Yn1;
 381:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       Yn1 = acc;
 382:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 383:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       /* decrement the loop counter */
 384:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****       sample--;
 385:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     }
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 387:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Store the updated state variables back into the pState array */
 388:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn1;
 389:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Xn2;
 390:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn1;
 391:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     *pState++ = Yn2;
 392:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 393:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  The first stage goes from the input buffer to the output buffer. */
 394:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /*  Subsequent numStages  occur in-place in the output buffer */
 395:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pIn = pDst;
 396:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 397:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* Reset the output pointer */
 398:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     pOut = pDst;
 399:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 400:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     /* decrement the loop counter */
 401:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     stage--;
 402:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 403:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****   } while (stage > 0u);
 404:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 405:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 406:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** 
 407:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c **** }
 226              	 .loc 1 407 0
 227 012a BDE8F083 	 pop {r4,r5,r6,r7,r8,r9,pc}
 228              	.LVL46:
 229              	.L8:
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 230              	 .loc 1 291 0
 231 012e F0EE676A 	 fcpys s13,s15
 232 0132 B0EE656A 	 fcpys s12,s11
 233 0136 F0EE477A 	 fcpys s15,s14
 234              	.LVL47:
 235 013a F0EE455A 	 fcpys s11,s10
 236              	.LVL48:
 237 013e E4E7     	 b .L4
 238              	.LVL49:
 239              	.L7:
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_biquad_cascade_df1_f32.c ****     {
 240              	 .loc 1 214 0
 241 0140 7046     	 mov r0,lr
 242 0142 C7E7     	 b .L2
 243              	 .cfi_endproc
 244              	.LFE135:
 246              	 .text
 247              	.Letext0:
 248              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 249              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 250              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_biquad_cascade_df1_f32.c
    {standard input}:20     .text.arm_biquad_cascade_df1_f32:00000000 $t
    {standard input}:25     .text.arm_biquad_cascade_df1_f32:00000000 arm_biquad_cascade_df1_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
