   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_lms_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_lms_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_lms_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_lms_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Title:        arm_lms_f32.c
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Description:  Processing function for the floating-point LMS filter
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @ingroup groupFilters
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @defgroup LMS Least Mean Square (LMS) Filters
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * LMS filters are a class of adaptive filters that are able to "learn" an unknown transfer functio
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * LMS filters use a gradient descent method in which the filter coefficients are updated based on 
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Adaptive filters are often used in communication systems, equalizers, and noise removal.
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The CMSIS DSP Library contains LMS filter functions that operate on Q15, Q31, and floating-point
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The library also contains normalized LMS filters in which the filter coefficient adaptation is i
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * An LMS filter consists of two components as shown below.
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The first component is a standard transversal or FIR filter.
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The second component is a coefficient update mechanism.
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The LMS filter has two input signals.
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The "input" feeds the FIR filter while the "reference input" corresponds to the desired output o
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * That is, the FIR filter coefficients are updated so that the output of the FIR filter matches th
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The filter coefficient update mechanism is based on the difference between the FIR filter output
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This "error signal" tends towards zero as the filter adapts.
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The LMS processing functions accept the input and reference input signals and generate the filte
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \image html LMS.gif "Internal structure of the Least Mean Square filter"
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on blocks of data and each call to the function processes
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>blockSize</code> samples through the filter.
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pSrc</code> points to input signal, <code>pRef</code> points to reference signal,
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pOut</code> points to output signal and <code>pErr</code> points to error signal.
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * All arrays contain <code>blockSize</code> values.
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on a block-by-block basis.
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Internally, the filter coefficients <code>b[n]</code> are updated on a sample-by-sample basis.
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The convergence of the LMS filter is slower compared to the normalized LMS algorithm.
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Algorithm:
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The output signal <code>y[n]</code> is computed by a standard FIR filter:
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The error signal equals the difference between the reference signal <code>d[n]</code> and the fi
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     e[n] = d[n] - y[n].
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * After each sample of the error signal is computed, the filter coefficients <code>b[k]</code> are
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     b[k] = b[k] + e[n] * mu * x[n-k],  for k=0, 1, ..., numTaps-1
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * where <code>mu</code> is the step size and controls the rate of coefficient convergence.
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *\par
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * In the APIs, <code>pCoeffs</code> points to a coefficient array of size <code>numTaps</code>.
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Coefficients are stored in time reversed order.
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pState</code> points to a state array of size <code>numTaps + blockSize - 1</code>.
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Samples in the state buffer are stored in the order:
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Note that the length of the state buffer exceeds the length of the coefficient array by <code>bl
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The increased state buffer length allows circular addressing, which is traditionally used in FIR
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * to be avoided and yields a significant speed improvement.
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The state variables are updated after each block of data is processed.
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Instance Structure
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The coefficients and state variables for a filter are stored together in an instance data struct
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * A separate instance structure must be defined for each filter and
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * coefficient and state arrays cannot be shared among instances.
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * There are separate instance structure declarations for each of the 3 supported data types.
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Initialization Functions
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * There is also an associated initialization function for each data type.
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The initialization function performs the following operations:
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Sets the values of the internal structure fields.
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Zeros out the values in the state buffer.
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * To do this manually without calling the init function, assign the follow subfields of the instan
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * numTaps, pCoeffs, mu, postShift (not for f32), pState. Also set all of the values in pState to z
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Use of the initialization function is optional.
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * However, if the initialization function is used, then the instance structure cannot be placed in
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * To place an instance structure into a const data section, the instance structure must be manuall
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Set the values in the state buffer to zeros before static initialization.
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The code below statically initializes each of the 3 different data type filter instance structur
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_f32 S = {numTaps, pState, pCoeffs, mu};
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q31 S = {numTaps, pState, pCoeffs, mu, postShift};
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q15 S = {numTaps, pState, pCoeffs, mu, postShift};
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * where <code>numTaps</code> is the number of filter coefficients in the filter; <code>pState</cod
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pCoeffs</code> is the address of the coefficient buffer; <code>mu</code> is the step size 
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Fixed-Point Behavior:
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Care must be taken when using the Q15 and Q31 versions of the LMS filter.
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The following issues must be considered:
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Scaling of coefficients
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Overflow and saturation
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Scaling of Coefficients:
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Filter coefficients are represented as fractional values and
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * coefficients are restricted to lie in the range <code>[-1 +1)</code>.
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The fixed-point functions have an additional scaling parameter <code>postShift</code>.
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * At the output of the filter's accumulator is a shift register which shifts the result by <code>p
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This essentially scales the filter coefficients by <code>2^postShift</code> and
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * allows the filter coefficients to exceed the range <code>[+1 -1)</code>.
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The value of <code>postShift</code> is set by the user based on the expected gain through the sy
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Overflow and Saturation:
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * described separately as part of the function specific documentation below.
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @addtogroup LMS
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @{
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @details
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This function operates on floating-point data types.
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @brief Processing function for floating-point LMS filter.
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *S points to an instance of the floating-point LMS filter structure.
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pSrc points to the block of input data.
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pRef points to the block of reference data.
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pOut points to the block of output data.
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pErr points to the block of error data.
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  blockSize number of samples to process.
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @return     none.
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** void arm_lms_f32(
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   const arm_lms_instance_f32 * S,
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pSrc,
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pRef,
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pOut,
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pErr,
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t blockSize)
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** {
  28              	 .loc 1 176 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient bu
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t mu = S->mu;                          /* Adaptive factor */
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  45              	 .loc 1 182 0
  46 0004 0488     	 ldrh r4,[r0]
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
  47              	 .loc 1 177 0
  48 0006 4568     	 ldr r5,[r0,#4]
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
  49              	 .loc 1 178 0
  50 0008 D0F80890 	 ldr r9,[r0,#8]
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  51              	 .loc 1 181 0
  52 000c D0ED033A 	 flds s7,[r0,#12]
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
  53              	 .loc 1 176 0
  54 0010 85B0     	 sub sp,sp,#20
  55              	.LCFI1:
  56              	 .cfi_def_cfa_offset 56
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t sum, e, d;                           /* accumulator, error, reference data sample */
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t w = 0.0f;                            /* weight factor */
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   e = 0.0f;
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   d = 0.0f;
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  57              	 .loc 1 192 0
  58 0012 04F18040 	 add r0,r4,#1073741824
  59              	.LVL1:
  60 0016 0138     	 subs r0,r0,#1
  61 0018 05EB8008 	 add r8,r5,r0,lsl#2
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   blkCnt = blockSize;
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #if defined (ARM_MATH_DSP)
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0u)
  62              	 .loc 1 201 0
  63 001c 0F98     	 ldr r0,[sp,#60]
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
  64              	 .loc 1 182 0
  65 001e 0394     	 str r4,[sp,#12]
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  66              	 .loc 1 177 0
  67 0020 0295     	 str r5,[sp,#8]
  68              	.LVL2:
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
  69              	 .loc 1 176 0
  70 0022 DDF838A0 	 ldr r10,[sp,#56]
  71              	.LVL3:
  72              	 .loc 1 201 0
  73 0026 0028     	 cmp r0,#0
  74 0028 00F0CD80 	 beq .L19
  75 002c A608     	 lsrs r6,r4,#2
  76 002e 8446     	 mov ip,r0
  77 0030 3001     	 lsls r0,r6,#4
  78              	.LVL4:
  79 0032 05EB000E 	 add lr,r5,r0
  80 0036 4844     	 add r0,r9,r0
  81 0038 0190     	 str r0,[sp,#4]
  82 003a 04F00307 	 and r7,r4,#3
  83              	.LVL5:
  84              	.L10:
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
  85              	 .loc 1 204 0
  86 003e 51F8040B 	 ldr r0,[r1],#4
  87              	.LVL6:
  88 0042 48F8040B 	 str r0,[r8],#4
  89              	.LVL7:
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
  90              	 .loc 1 218 0
  91 0046 DFED617A 	 flds s15,.L39
  92 004a 002E     	 cmp r6,#0
  93 004c 00F0B880 	 beq .L20
  94 0050 05F11004 	 add r4,r5,#16
  95 0054 09F11000 	 add r0,r9,#16
  96 0058 B346     	 mov fp,r6
  97              	.LVL8:
  98              	.L4:
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
  99              	 .loc 1 221 0
 100 005a 14ED043A 	 flds s6,[r4,#-16]
 101 005e 10ED044A 	 flds s8,[r0,#-16]
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 102              	 .loc 1 222 0
 103 0062 54ED034A 	 flds s9,[r4,#-12]
 104 0066 10ED035A 	 flds s10,[r0,#-12]
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 105              	 .loc 1 223 0
 106 006a 54ED025A 	 flds s11,[r4,#-8]
 107 006e 10ED026A 	 flds s12,[r0,#-8]
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 108              	 .loc 1 224 0
 109 0072 54ED016A 	 flds s13,[r4,#-4]
 110 0076 10ED017A 	 flds s14,[r0,#-4]
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 111              	 .loc 1 221 0
 112 007a E3EE047A 	 vfma.f32 s15,s6,s8
 113              	.LVL9:
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 114              	 .loc 1 218 0
 115 007e BBF1010B 	 subs fp,fp,#1
 116              	.LVL10:
 117 0082 04F11004 	 add r4,r4,#16
 118              	.LVL11:
 119 0086 00F11000 	 add r0,r0,#16
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 120              	 .loc 1 222 0
 121 008a E4EE857A 	 vfma.f32 s15,s9,s10
 122              	.LVL12:
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 123              	 .loc 1 223 0
 124 008e E5EE867A 	 vfma.f32 s15,s11,s12
 125              	.LVL13:
 126              	 .loc 1 224 0
 127 0092 E6EE877A 	 vfma.f32 s15,s13,s14
 128              	.LVL14:
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 129              	 .loc 1 218 0
 130 0096 E0D1     	 bne .L4
 131              	 .loc 1 224 0
 132 0098 DDF804B0 	 ldr fp,[sp,#4]
 133 009c 7446     	 mov r4,lr
 134              	.LVL15:
 135              	.L3:
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4u;
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
 136              	 .loc 1 233 0
 137 009e 47B1     	 cbz r7,.L5
 138 00a0 3846     	 mov r0,r7
 139              	.LVL16:
 140              	.L6:
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 141              	 .loc 1 236 0
 142 00a2 F4EC016A 	 fldmias r4!,{s13}
 143              	.LVL17:
 144 00a6 BBEC017A 	 fldmias fp!,{s14}
 145              	.LVL18:
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 146              	 .loc 1 233 0
 147 00aa 0138     	 subs r0,r0,#1
 148              	.LVL19:
 149              	 .loc 1 236 0
 150 00ac E6EE877A 	 vfma.f32 s15,s13,s14
 151              	.LVL20:
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 152              	 .loc 1 233 0
 153 00b0 F7D1     	 bne .L6
 154              	.L5:
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* The result in the accumulator, store in the destination buffer. */
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 155              	 .loc 1 243 0
 156 00b2 E3EC017A 	 fstmias r3!,{s15}
 157              	.LVL21:
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 158              	 .loc 1 247 0
 159 00b6 B2EC017A 	 fldmias r2!,{s14}
 160              	.LVL22:
 161 00ba 77EE677A 	 fsubs s15,s14,s15
 162              	.LVL23:
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 163              	 .loc 1 248 0
 164 00be EAEC017A 	 fstmias r10!,{s15}
 165              	.LVL24:
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Calculation of Weighting factor for the updating filter coefficients */
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 166              	 .loc 1 251 0
 167 00c2 67EEA37A 	 fmuls s15,s15,s7
 168              	.LVL25:
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Update filter coefficients */
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
 169              	 .loc 1 263 0
 170 00c6 002E     	 cmp r6,#0
 171 00c8 77D0     	 beq .L21
 172 00ca 05F11004 	 add r4,r5,#16
 173 00ce 09F11000 	 add r0,r9,#16
 174 00d2 B346     	 mov fp,r6
 175              	.LVL26:
 176              	.L8:
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 177              	 .loc 1 266 0
 178 00d4 14ED045A 	 flds s10,[r4,#-16]
 179 00d8 50ED045A 	 flds s11,[r0,#-16]
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 180              	 .loc 1 269 0
 181 00dc 10ED036A 	 flds s12,[r0,#-12]
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 182              	 .loc 1 272 0
 183 00e0 50ED026A 	 flds s13,[r0,#-8]
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 184              	 .loc 1 275 0
 185 00e4 10ED017A 	 flds s14,[r0,#-4]
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 186              	 .loc 1 266 0
 187 00e8 E5EE275A 	 vfma.f32 s11,s10,s15
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 188              	 .loc 1 263 0
 189 00ec BBF1010B 	 subs fp,fp,#1
 190              	.LVL27:
 191 00f0 04F11004 	 add r4,r4,#16
 192 00f4 00F11000 	 add r0,r0,#16
 193              	.LVL28:
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 194              	 .loc 1 266 0
 195 00f8 40ED085A 	 fsts s11,[r0,#-32]
 196              	.LVL29:
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 197              	 .loc 1 269 0
 198 00fc 54ED075A 	 flds s11,[r4,#-28]
 199 0100 A5EEA76A 	 vfma.f32 s12,s11,s15
 200 0104 00ED076A 	 fsts s12,[r0,#-28]
 201              	.LVL30:
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 202              	 .loc 1 272 0
 203 0108 14ED066A 	 flds s12,[r4,#-24]
 204 010c E6EE276A 	 vfma.f32 s13,s12,s15
 205 0110 40ED066A 	 fsts s13,[r0,#-24]
 206              	.LVL31:
 207              	 .loc 1 275 0
 208 0114 54ED056A 	 flds s13,[r4,#-20]
 209 0118 A6EEA77A 	 vfma.f32 s14,s13,s15
 210 011c 00ED057A 	 fsts s14,[r0,#-20]
 211              	.LVL32:
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 212              	 .loc 1 263 0
 213 0120 D8D1     	 bne .L8
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 214              	 .loc 1 276 0
 215 0122 0198     	 ldr r0,[sp,#4]
 216 0124 F346     	 mov fp,lr
 217              	.L7:
 218              	.LVL33:
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4u;
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
 219              	 .loc 1 285 0
 220 0126 3C46     	 mov r4,r7
 221 0128 4FB1     	 cbz r7,.L13
 222              	.LVL34:
 223              	.L12:
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 224              	 .loc 1 288 0
 225 012a FBEC016A 	 fldmias fp!,{s13}
 226              	.LVL35:
 227 012e 90ED007A 	 flds s14,[r0]
 228 0132 A6EEA77A 	 vfma.f32 s14,s13,s15
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 229              	 .loc 1 285 0
 230 0136 013C     	 subs r4,r4,#1
 231              	.LVL36:
 232              	 .loc 1 288 0
 233 0138 A0EC017A 	 fstmias r0!,{s14}
 234              	.LVL37:
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 235              	 .loc 1 285 0
 236 013c F5D1     	 bne .L12
 237              	.L13:
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 238              	 .loc 1 201 0
 239 013e BCF1010C 	 subs ip,ip,#1
 240              	.LVL38:
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 241              	 .loc 1 296 0
 242 0142 05F10405 	 add r5,r5,#4
 243              	.LVL39:
 244 0146 0EF1040E 	 add lr,lr,#4
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 245              	 .loc 1 201 0
 246 014a 7FF478AF 	 bne .L10
 247 014e 029B     	 ldr r3,[sp,#8]
 248              	.LVL40:
 249 0150 0F9A     	 ldr r2,[sp,#60]
 250              	.LVL41:
 251 0152 03EB8204 	 add r4,r3,r2,lsl#2
 252              	.LVL42:
 253              	.L2:
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****      satrt of the state buffer. This prepares the state buffer for the
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****      next function call. */
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Loop unrolling for (numTaps - 1u) samples copy */
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u) >> 2u;
 254              	 .loc 1 311 0
 255 0156 039B     	 ldr r3,[sp,#12]
 256 0158 591E     	 subs r1,r3,#1
 257              	.LVL43:
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* copy data */
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0u)
 258              	 .loc 1 314 0
 259 015a 8E08     	 lsrs r6,r1,#2
 260              	.LVL44:
 261 015c 20D0     	 beq .L14
 262 015e 029B     	 ldr r3,[sp,#8]
 263 0160 3046     	 mov r0,r6
 264 0162 03F11002 	 add r2,r3,#16
 265 0166 04F11003 	 add r3,r4,#16
 266              	.LVL45:
 267              	.L15:
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 268              	 .loc 1 316 0
 269 016a 53F8105C 	 ldr r5,[r3,#-16]
 270 016e 42F8105C 	 str r5,[r2,#-16]
 271              	.LVL46:
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 272              	 .loc 1 317 0
 273 0172 53F80C5C 	 ldr r5,[r3,#-12]
 274 0176 42F80C5C 	 str r5,[r2,#-12]
 275              	.LVL47:
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 276              	 .loc 1 318 0
 277 017a 53F8085C 	 ldr r5,[r3,#-8]
 278 017e 42F8085C 	 str r5,[r2,#-8]
 279              	.LVL48:
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 280              	 .loc 1 319 0
 281 0182 53F8045C 	 ldr r5,[r3,#-4]
 282 0186 42F8045C 	 str r5,[r2,#-4]
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 283              	 .loc 1 314 0
 284 018a 0138     	 subs r0,r0,#1
 285              	.LVL49:
 286 018c 03F11003 	 add r3,r3,#16
 287              	.LVL50:
 288 0190 02F11002 	 add r2,r2,#16
 289 0194 E9D1     	 bne .L15
 290 0196 029A     	 ldr r2,[sp,#8]
 291 0198 3301     	 lsls r3,r6,#4
 292              	.LVL51:
 293 019a 1A44     	 add r2,r2,r3
 294 019c 0292     	 str r2,[sp,#8]
 295 019e 1C44     	 add r4,r4,r3
 296              	.LVL52:
 297              	.L14:
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Calculate remaining number of copies */
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Copy the remaining q31_t data */
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0u)
 298              	 .loc 1 329 0
 299 01a0 11F00303 	 ands r3,r1,#3
 300              	.LVL53:
 301 01a4 06D0     	 beq .L1
 302 01a6 029A     	 ldr r2,[sp,#8]
 303              	.L17:
 304              	.LVL54:
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 305              	 .loc 1 331 0
 306 01a8 54F8041B 	 ldr r1,[r4],#4
 307              	.LVL55:
 308 01ac 42F8041B 	 str r1,[r2],#4
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 309              	 .loc 1 329 0
 310 01b0 013B     	 subs r3,r3,#1
 311              	.LVL56:
 312 01b2 F9D1     	 bne .L17
 313              	.L1:
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #else
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M0 */
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while (blkCnt > 0u)
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 354:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 356:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 358:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 360:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 362:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 363:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 365:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 366:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* The result is stored in the destination buffer. */
 368:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 369:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 370:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 372:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 374:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Weighting factor for the LMS version */
 376:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 378:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 379:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 380:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 381:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 382:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 383:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 384:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 385:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 387:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while (tapCnt > 0u)
 388:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 389:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 390:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 391:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 392:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 393:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 394:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 395:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 396:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 397:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 398:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 399:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 400:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 401:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 402:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 403:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 404:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 405:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the
 406:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****    * start of the state buffer. This prepares the state buffer for the
 407:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****    * next function call. */
 408:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 409:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 410:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 411:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 412:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /*  Copy (numTaps - 1u) samples  */
 413:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u);
 414:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 415:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Copy the data */
 416:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while (tapCnt > 0u)
 417:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 418:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 419:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 420:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 421:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 422:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 423:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 424:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #endif /*   #if defined (ARM_MATH_DSP) */
 425:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 426:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** }
 314              	 .loc 1 426 0
 315 01b4 05B0     	 add sp,sp,#20
 316              	.LCFI2:
 317              	 .cfi_remember_state
 318              	 .cfi_def_cfa_offset 36
 319              	 
 320 01b6 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 321              	.LVL57:
 322              	.L21:
 323              	.LCFI3:
 324              	 .cfi_restore_state
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 325              	 .loc 1 257 0
 326 01ba 4846     	 mov r0,r9
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 327              	 .loc 1 263 0
 328 01bc AB46     	 mov fp,r5
 329 01be B2E7     	 b .L7
 330              	.LVL58:
 331              	.L20:
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 332              	 .loc 1 210 0
 333 01c0 CB46     	 mov fp,r9
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 334              	 .loc 1 218 0
 335 01c2 2C46     	 mov r4,r5
 336 01c4 6BE7     	 b .L3
 337              	.LVL59:
 338              	.L19:
 339 01c6 2C46     	 mov r4,r5
 340              	.LVL60:
 341 01c8 C5E7     	 b .L2
 342              	.L40:
 343 01ca 00BF     	 .align 2
 344              	.L39:
 345 01cc 00000000 	 .word 0
 346              	 .cfi_endproc
 347              	.LFE135:
 349              	 .text
 350              	.Letext0:
 351              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 352              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 353              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_lms_f32.c
    {standard input}:20     .text.arm_lms_f32:00000000 $t
    {standard input}:25     .text.arm_lms_f32:00000000 arm_lms_f32
    {standard input}:345    .text.arm_lms_f32:000001cc $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
