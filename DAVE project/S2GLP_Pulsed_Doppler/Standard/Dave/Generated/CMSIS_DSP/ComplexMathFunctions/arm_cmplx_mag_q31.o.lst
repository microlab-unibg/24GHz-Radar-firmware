   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mag_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mag_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mag_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mag_q31:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Title:        arm_cmplx_mag_q31.c
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Description:  Q31 complex magnitude
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @addtogroup cmplx_mag
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** /**
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @brief  Q31 complex magnitude
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @param  *pSrc points to the complex input vector
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @param  *pDst points to the real output vector
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @param  numSamples number of complex samples in the input vector
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * @return none.
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  *
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * \par
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * The function implements 1.31 by 1.31 multiplications and finally output is converted into 2.30 f
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  * Input down scaling is not required.
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****  */
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** void arm_cmplx_mag_q31(
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t * pSrc,
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t * pDst,
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   uint32_t numSamples)
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** {
  28              	 .loc 1 57 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  45 0004 1346     	 mov r3,r2
  46 0006 85B0     	 sub sp,sp,#20
  47              	.LCFI1:
  48              	 .cfi_def_cfa_offset 56
  49              	 .loc 1 57 0
  50 0008 8DE80900 	 stmia sp,{r0,r3}
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t real, imag;                              /* Temporary variables to hold input values */
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t acc0, acc1;                              /* Accumulators */
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** #if defined (ARM_MATH_DSP)
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t real1, real2, imag1, imag2;              /* Temporary variables to hold input values */
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t out1, out2, out3, out4;                  /* Accumulators */
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q63_t mul1, mul2, mul3, mul4;                  /* Temporary variables */
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /*loop Unrolling */
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples >> 2u;
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   while (blkCnt > 0u)
  51              	 .loc 1 75 0
  52 000c 9308     	 lsrs r3,r2,#2
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   q31_t real, imag;                              /* Temporary variables to hold input values */
  53              	 .loc 1 57 0
  54 000e 0E46     	 mov r6,r1
  55              	 .loc 1 75 0
  56 0010 0293     	 str r3,[sp,#8]
  57 0012 4CD0     	 beq .L2
  58 0014 00F12004 	 add r4,r0,#32
  59 0018 9B46     	 mov fp,r3
  60 001a 0D46     	 mov r5,r1
  61 001c 0391     	 str r1,[sp,#12]
  62              	.LVL1:
  63              	.L3:
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* read complex input from source buffer */
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real1 = pSrc[0];
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag1 = pSrc[1];
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real2 = pSrc[2];
  64              	 .loc 1 80 0
  65 001e A4F12000 	 sub r0,r4,#32
  66              	.LVL2:
  67 0022 90E88540 	 ldmia r0,{r0,r2,r7,lr}
  68              	.LVL3:
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag2 = pSrc[3];
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate power of input values */
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul1 = (q63_t) real1 *real1;
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul2 = (q63_t) imag1 *imag1;
  69              	 .loc 1 85 0
  70 0026 82FB0223 	 smull r2,r3,r2,r2
  71              	.LVL4:
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul3 = (q63_t) real2 *real2;
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul4 = (q63_t) imag2 *imag2;
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* get the result to 3.29 format */
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out1 = (q31_t) (mul1 >> 33);
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out2 = (q31_t) (mul2 >> 33);
  72              	 .loc 1 91 0
  73 002a 5B10     	 asrs r3,r3,#1
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul2 = (q63_t) imag1 *imag1;
  74              	 .loc 1 84 0
  75 002c 80FB0001 	 smull r0,r1,r0,r0
  76              	.LVL5:
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out3 = (q31_t) (mul3 >> 33);
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out4 = (q31_t) (mul4 >> 33);
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* add real and imaginary accumulators */
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out1 = out1 + out2;
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out3 = out3 + out4;
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* read complex input from source buffer */
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real1 = pSrc[4];
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag1 = pSrc[5];
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real2 = pSrc[6];
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag2 = pSrc[7];
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate square root */
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(out1, &pDst[0]);
  77              	 .loc 1 106 0
  78 0030 03EB6100 	 add r0,r3,r1,asr#1
  79              	.LVL6:
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  80              	 .loc 1 87 0
  81 0034 8EFB0E23 	 smull r2,r3,lr,lr
  82              	.LVL7:
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  83              	 .loc 1 93 0
  84 0038 5910     	 asrs r1,r3,#1
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul4 = (q63_t) imag2 *imag2;
  85              	 .loc 1 86 0
  86 003a 87FB0723 	 smull r2,r3,r7,r7
  87              	.LVL8:
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  88              	 .loc 1 97 0
  89 003e 01EB630A 	 add r10,r1,r3,asr#1
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real2 = pSrc[6];
  90              	 .loc 1 101 0
  91 0042 54F80C8C 	 ldr r8,[r4,#-12]
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
  92              	 .loc 1 103 0
  93 0046 54F8049C 	 ldr r9,[r4,#-4]
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag2 = pSrc[7];
  94              	 .loc 1 102 0
  95 004a 54F8087C 	 ldr r7,[r4,#-8]
  96              	.LVL9:
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag1 = pSrc[5];
  97              	 .loc 1 100 0
  98 004e 54F8106C 	 ldr r6,[r4,#-16]
  99              	.LVL10:
 100              	 .loc 1 106 0
 101 0052 2946     	 mov r1,r5
 102 0054 FFF7FEFF 	 bl arm_sqrt_q31
 103              	.LVL11:
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate power of input values */
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul1 = (q63_t) real1 *real1;
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate square root */
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(out3, &pDst[1]);
 104              	 .loc 1 112 0
 105 0058 291D     	 adds r1,r5,#4
 106 005a 5046     	 mov r0,r10
 107 005c FFF7FEFF 	 bl arm_sqrt_q31
 108              	.LVL12:
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate power of input values */
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul2 = (q63_t) imag1 *imag1;
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul3 = (q63_t) real2 *real2;
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul4 = (q63_t) imag2 *imag2;
 109              	 .loc 1 117 0
 110 0060 89FB0901 	 smull r0,r1,r9,r9
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul3 = (q63_t) real2 *real2;
 111              	 .loc 1 115 0
 112 0064 88FB0823 	 smull r2,r3,r8,r8
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* get the result to 3.29 format */
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out1 = (q31_t) (mul1 >> 33);
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out2 = (q31_t) (mul2 >> 33);
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out3 = (q31_t) (mul3 >> 33);
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out4 = (q31_t) (mul4 >> 33);
 113              	 .loc 1 123 0
 114 0068 4910     	 asrs r1,r1,#1
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out3 = (q31_t) (mul3 >> 33);
 115              	 .loc 1 121 0
 116 006a 5810     	 asrs r0,r3,#1
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     mul4 = (q63_t) imag2 *imag2;
 117              	 .loc 1 116 0
 118 006c 87FB0789 	 smull r8,r9,r7,r7
 119              	.LVL13:
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 120              	 .loc 1 109 0
 121 0070 86FB0623 	 smull r2,r3,r6,r6
 122              	.LVL14:
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* add real and imaginary accumulators */
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out1 = out1 + out2;
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     out3 = out3 + out4;
 123              	 .loc 1 127 0
 124 0074 01EB6907 	 add r7,r1,r9,asr#1
 125              	.LVL15:
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate square root */
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(out1, &pDst[2]);
 126              	 .loc 1 130 0
 127 0078 00EB6300 	 add r0,r0,r3,asr#1
 128 007c 05F10801 	 add r1,r5,#8
 129 0080 FFF7FEFF 	 bl arm_sqrt_q31
 130              	.LVL16:
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* increment destination by 8 to process next samples */
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     pSrc += 8u;
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* calculate square root */
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(out3, &pDst[3]);
 131              	 .loc 1 136 0
 132 0084 05F10C01 	 add r1,r5,#12
 133 0088 3846     	 mov r0,r7
 134 008a FFF7FEFF 	 bl arm_sqrt_q31
 135              	.LVL17:
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 136              	 .loc 1 75 0
 137 008e BBF1010B 	 subs fp,fp,#1
 138              	.LVL18:
 139 0092 04F12004 	 add r4,r4,#32
 140              	.LVL19:
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* increment destination by 4 to process next samples */
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     pDst += 4u;
 141              	 .loc 1 139 0
 142 0096 05F11005 	 add r5,r5,#16
 143              	.LVL20:
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 144              	 .loc 1 75 0
 145 009a C0D1     	 bne .L3
 146 009c 009B     	 ldr r3,[sp]
 147 009e 029A     	 ldr r2,[sp,#8]
 148 00a0 039E     	 ldr r6,[sp,#12]
 149              	.LVL21:
 150 00a2 1946     	 mov r1,r3
 151 00a4 01EB4213 	 add r3,r1,r2,lsl#5
 152 00a8 0093     	 str r3,[sp]
 153 00aa 06EB0216 	 add r6,r6,r2,lsl#4
 154              	.LVL22:
 155              	.L2:
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* Decrement the loop counter */
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt--;
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   }
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****    ** No loop unrolling is used. */
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples % 0x4u;
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** #else
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   /* Run the below code for Cortex-M0 */
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   blkCnt = numSamples;
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   while (blkCnt > 0u)
 156              	 .loc 1 156 0
 157 00ae 019B     	 ldr r3,[sp,#4]
 158 00b0 13F00305 	 ands r5,r3,#3
 159              	.LVL23:
 160 00b4 15D0     	 beq .L1
 161 00b6 009C     	 ldr r4,[sp]
 162 00b8 0834     	 adds r4,r4,#8
 163              	.LVL24:
 164              	.L5:
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     real = *pSrc++;
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 165              	 .loc 1 160 0
 166 00ba 54F8040C 	 ldr r0,[r4,#-4]
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     imag = *pSrc++;
 167              	 .loc 1 159 0
 168 00be 54F8082C 	 ldr r2,[r4,#-8]
 169              	.LVL25:
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 170              	 .loc 1 162 0
 171 00c2 80FB0001 	 smull r0,r1,r0,r0
 172              	.LVL26:
 173 00c6 4810     	 asrs r0,r1,#1
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 174              	 .loc 1 161 0
 175 00c8 82FB0223 	 smull r2,r3,r2,r2
 176              	.LVL27:
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* store the result in 2.30 format in the destination buffer. */
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     arm_sqrt_q31(acc0 + acc1, pDst++);
 177              	 .loc 1 164 0
 178 00cc 3146     	 mov r1,r6
 179 00ce 00EB6300 	 add r0,r0,r3,asr#1
 180 00d2 FFF7FEFF 	 bl arm_sqrt_q31
 181              	.LVL28:
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 182              	 .loc 1 156 0
 183 00d6 013D     	 subs r5,r5,#1
 184              	.LVL29:
 185              	 .loc 1 164 0
 186 00d8 06F10406 	 add r6,r6,#4
 187              	.LVL30:
 188 00dc 04F10804 	 add r4,r4,#8
 189              	.LVL31:
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   {
 190              	 .loc 1 156 0
 191 00e0 EBD1     	 bne .L5
 192              	.LVL32:
 193              	.L1:
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** 
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     /* Decrement the loop counter */
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****     blkCnt--;
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c ****   }
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_q31.c **** }
 194              	 .loc 1 169 0
 195 00e2 05B0     	 add sp,sp,#20
 196              	.LCFI2:
 197              	 .cfi_def_cfa_offset 36
 198              	 
 199 00e4 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 200              	 .cfi_endproc
 201              	.LFE135:
 203              	 .text
 204              	.Letext0:
 205              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 206              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 207              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_q31.c
    {standard input}:20     .text.arm_cmplx_mag_q31:00000000 $t
    {standard input}:25     .text.arm_cmplx_mag_q31:00000000 arm_cmplx_mag_q31
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
arm_sqrt_q31
