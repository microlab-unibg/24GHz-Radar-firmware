   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_mag_squared_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_mag_squared_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_mag_squared_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_mag_squared_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Title:        arm_cmplx_mag_squared_f32.c
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Description:  Floating-point complex magnitude squared
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @defgroup cmplx_mag_squared Complex Magnitude Squared
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Computes the magnitude squared of the elements of a complex data vector.
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The <code>pSrc</code> points to the source data and
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>pDst</code> points to the where the result should be written.
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>numSamples</code> specifies the number of complex samples
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * in the input array and the data is stored in an interleaved fashion
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * (real, imag, real, imag, ...).
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The input array has a total of <code>2*numSamples</code> values;
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * the output array has a total of <code>numSamples</code> values.
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The underlying algorithm is used:
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <pre>
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * for(n=0; n<numSamples; n++) {
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *     pDst[n] = pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2;
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * }
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * </pre>
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @addtogroup cmplx_mag_squared
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @{
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @brief  Floating-point complex magnitude squared
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  *pSrc points to the complex input vector
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[out]  *pDst points to the real output vector
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  numSamples number of complex samples in the input vector
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @return none.
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pSrc,
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pDst,
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t numSamples)
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  28              	 .loc 1 77 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  34 0000 70B4     	 push {r4,r5,r6}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 6,-4
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real, imag;                          /* Temporary variables to store real and imaginary
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #if defined (ARM_MATH_DSP)
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real1, real2, real3, real4;          /* Temporary variables to hold real values */
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t imag1, imag2, imag3, imag4;          /* Temporary variables to hold imaginary values */
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /*loop Unrolling */
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 2u;
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0u)
  40              	 .loc 1 93 0
  41 0002 9608     	 lsrs r6,r2,#2
  42              	.LVL1:
  43 0004 36D0     	 beq .L2
  44 0006 00F12003 	 add r3,r0,#32
  45 000a 01F11004 	 add r4,r1,#16
  46 000e 3546     	 mov r5,r6
  47              	.LVL2:
  48              	.L3:
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real1 = pSrc[0];
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag1 = pSrc[1];
  49              	 .loc 1 99 0
  50 0010 13ED076A 	 flds s12,[r3,#-28]
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul1 = real1 * real1;
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real2 = pSrc[2];
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul2 = imag1 * imag1;
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag2 = pSrc[3];
  51              	 .loc 1 111 0
  52 0014 53ED056A 	 flds s13,[r3,#-20]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul3 = real2 * real2;
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real3 = pSrc[4];
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul4 = imag2 * imag2;
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag3 = pSrc[5];
  53              	 .loc 1 123 0
  54 0018 13ED037A 	 flds s14,[r3,#-12]
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul5 = real3 * real3;
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul6 = imag3 * imag3;
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real4 = pSrc[6];
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out1 = mul1 + mul2;
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag4 = pSrc[7];
  55              	 .loc 1 137 0
  56 001c 53ED017A 	 flds s15,[r3,#-4]
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
  57              	 .loc 1 97 0
  58 0020 13ED084A 	 flds s8,[r3,#-32]
  59              	.LVL3:
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  60              	 .loc 1 105 0
  61 0024 53ED064A 	 flds s9,[r3,#-24]
  62              	.LVL4:
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  63              	 .loc 1 117 0
  64 0028 13ED045A 	 flds s10,[r3,#-16]
  65              	.LVL5:
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  66              	 .loc 1 131 0
  67 002c 53ED025A 	 flds s11,[r3,#-8]
  68              	.LVL6:
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  69              	 .loc 1 108 0
  70 0030 26EE066A 	 fmuls s12,s12,s12
  71              	.LVL7:
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  72              	 .loc 1 120 0
  73 0034 66EEA66A 	 fmuls s13,s13,s13
  74              	.LVL8:
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  75              	 .loc 1 128 0
  76 0038 27EE077A 	 fmuls s14,s14,s14
  77              	.LVL9:
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out2 = mul3 + mul4;
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul7 = real4 * real4;
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul8 = imag4 * imag4;
  78              	 .loc 1 145 0
  79 003c 67EEA77A 	 fmuls s15,s15,s15
  80              	.LVL10:
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  81              	 .loc 1 134 0
  82 0040 A4EE046A 	 vfma.f32 s12,s8,s8
  83              	.LVL11:
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
  84              	 .loc 1 93 0
  85 0044 013D     	 subs r5,r5,#1
  86              	.LVL12:
  87 0046 03F12003 	 add r3,r3,#32
  88              	.LVL13:
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  89              	 .loc 1 140 0
  90 004a E4EEA46A 	 vfma.f32 s13,s9,s9
  91              	.LVL14:
  92 004e 04F11004 	 add r4,r4,#16
  93              	.LVL15:
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[0] = out1;
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out3 = mul5 + mul6;
  94              	 .loc 1 151 0
  95 0052 A5EE057A 	 vfma.f32 s14,s10,s10
  96              	.LVL16:
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[1] = out2;
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out4 = mul7 + mul8;
  97              	 .loc 1 157 0
  98 0056 E5EEA57A 	 vfma.f32 s15,s11,s11
  99              	.LVL17:
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 100              	 .loc 1 148 0
 101 005a 04ED086A 	 fsts s12,[r4,#-32]
 102              	.LVL18:
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 103              	 .loc 1 154 0
 104 005e 44ED076A 	 fsts s13,[r4,#-28]
 105              	.LVL19:
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[2] = out3;
 106              	 .loc 1 160 0
 107 0062 04ED067A 	 fsts s14,[r4,#-24]
 108              	.LVL20:
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 8 to process next samples */
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8u;
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[3] = out4;
 109              	 .loc 1 166 0
 110 0066 44ED057A 	 fsts s15,[r4,#-20]
 111              	.LVL21:
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 112              	 .loc 1 93 0
 113 006a D1D1     	 bne .L3
 114 006c 00EB4610 	 add r0,r0,r6,lsl#5
 115 0070 01EB0611 	 add r1,r1,r6,lsl#4
 116              	.LVL22:
 117              	.L2:
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 4 to process next samples */
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4u;
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** No loop unrolling is used. */
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples % 0x4u;
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Run the below code for Cortex-M0 */
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples;
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while (blkCnt > 0u)
 118              	 .loc 1 187 0
 119 0074 12F00302 	 ands r2,r2,#3
 120              	.LVL23:
 121 0078 0ED0     	 beq .L1
 122 007a 0830     	 adds r0,r0,#8
 123              	.LVL24:
 124              	.L5:
 188:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 189:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 191:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 125              	 .loc 1 191 0
 126 007c 50ED017A 	 flds s15,[r0,#-4]
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 127              	 .loc 1 190 0
 128 0080 10ED027A 	 flds s14,[r0,#-8]
 129              	.LVL25:
 192:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* out = (real * real) + (imag * imag) */
 194:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store the result in the destination buffer. */
 195:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 130              	 .loc 1 195 0
 131 0084 67EEA77A 	 fmuls s15,s15,s15
 132              	.LVL26:
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 133              	 .loc 1 187 0
 134 0088 013A     	 subs r2,r2,#1
 135              	.LVL27:
 136              	 .loc 1 195 0
 137 008a E7EE077A 	 vfma.f32 s15,s14,s14
 138 008e 00F10800 	 add r0,r0,#8
 139              	.LVL28:
 140 0092 E1EC017A 	 fstmias r1!,{s15}
 141              	.LVL29:
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 142              	 .loc 1 187 0
 143 0096 F1D1     	 bne .L5
 144              	.LVL30:
 145              	.L1:
 196:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 199:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 200:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 146              	 .loc 1 200 0
 147 0098 70BC     	 pop {r4,r5,r6}
 148              	.LCFI1:
 149              	 .cfi_restore 6
 150              	 .cfi_restore 5
 151              	 .cfi_restore 4
 152              	 .cfi_def_cfa_offset 0
 153 009a 7047     	 bx lr
 154              	 .cfi_endproc
 155              	.LFE135:
 157              	 .text
 158              	.Letext0:
 159              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 160              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 161              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_squared_f32.c
    {standard input}:20     .text.arm_cmplx_mag_squared_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_mag_squared_f32:00000000 arm_cmplx_mag_squared_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
