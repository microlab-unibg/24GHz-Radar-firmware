   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_cmplx_dot_prod_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_cmplx_dot_prod_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_cmplx_dot_prod_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_cmplx_dot_prod_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Title:        arm_cmplx_dot_prod_f32.c
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Description:  Floating-point complex dot product
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @ingroup groupCmplxMath
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @defgroup cmplx_dot_prod Complex Dot Product
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Computes the dot product of two complex vectors.
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The vectors are multiplied element-by-element and then summed.
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The <code>pSrcA</code> points to the first complex input vector and
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <code>pSrcB</code> points to the second complex input vector.
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <code>numSamples</code> specifies the number of complex samples
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * and the data in each array is stored in an interleaved fashion
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * (real, imag, real, imag, ...).
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Each array has a total of <code>2*numSamples</code> values.
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The underlying algorithm is used:
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <pre>
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * realResult=0;
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * imagResult=0;
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * for(n=0; n<numSamples; n++) {
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *     realResult += pSrcA[(2*n)+0]*pSrcB[(2*n)+0] - pSrcA[(2*n)+1]*pSrcB[(2*n)+1];
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *     imagResult += pSrcA[(2*n)+0]*pSrcB[(2*n)+1] + pSrcA[(2*n)+1]*pSrcB[(2*n)+0];
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * }
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * </pre>
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @addtogroup cmplx_dot_prod
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @{
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @brief  Floating-point complex dot product
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *pSrcA points to the first input vector
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *pSrcB points to the second input vector
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  numSamples number of complex samples in each vector
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *realResult real part of the result returned here
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *imagResult imaginary part of the result returned here
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @return none.
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * pSrcA,
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * pSrcB,
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   uint32_t numSamples,
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * realResult,
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * imagResult)
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
  28              	 .loc 1 82 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 20
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result storage */
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t a0,b0,c0,d0;
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #if defined (ARM_MATH_DSP)
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /*loop Unrolling */
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples >> 2u;
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0u)
  41              	 .loc 1 96 0
  42 0002 DFED3D7A 	 flds s15,.L14
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result storage */
  43              	 .loc 1 82 0
  44 0006 2DED028B 	 fstmfdd sp!,{d8}
  45              	.LCFI1:
  46              	 .cfi_def_cfa_offset 28
  47              	 .cfi_offset 80,-28
  48              	 .cfi_offset 81,-24
  49              	 .loc 1 96 0
  50 000a 5FEA920E 	 lsrs lr,r2,#2
  51              	.LVL1:
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result storage */
  52              	 .loc 1 82 0
  53 000e 079E     	 ldr r6,[sp,#28]
  54              	 .loc 1 96 0
  55 0010 B0EE677A 	 fcpys s14,s15
  56 0014 4ED0     	 beq .L2
  57 0016 00F12005 	 add r5,r0,#32
  58 001a 01F12004 	 add r4,r1,#32
  59 001e 7746     	 mov r7,lr
  60              	.LVL2:
  61              	.L3:
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
  62              	 .loc 1 98 0
  63 0020 55ED088A 	 flds s17,[r5,#-32]
  64              	.LVL3:
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
  65              	 .loc 1 100 0
  66 0024 54ED080A 	 flds s1,[r4,#-32]
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
  67              	 .loc 1 101 0
  68 0028 14ED078A 	 flds s16,[r4,#-28]
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
  69              	 .loc 1 99 0
  70 002c 15ED070A 	 flds s0,[r5,#-28]
  71              	.LVL4:
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
  72              	 .loc 1 108 0
  73 0030 15ED061A 	 flds s2,[r5,#-24]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
  74              	 .loc 1 110 0
  75 0034 54ED062A 	 flds s5,[r4,#-24]
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
  76              	 .loc 1 111 0
  77 0038 54ED051A 	 flds s3,[r4,#-20]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
  78              	 .loc 1 109 0
  79 003c 15ED052A 	 flds s4,[r5,#-20]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
  80              	 .loc 1 118 0
  81 0040 15ED043A 	 flds s6,[r5,#-16]
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
  82              	 .loc 1 120 0
  83 0044 54ED044A 	 flds s9,[r4,#-16]
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
  84              	 .loc 1 121 0
  85 0048 54ED033A 	 flds s7,[r4,#-12]
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
  86              	 .loc 1 119 0
  87 004c 15ED034A 	 flds s8,[r5,#-12]
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
  88              	 .loc 1 128 0
  89 0050 15ED025A 	 flds s10,[r5,#-8]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
  90              	 .loc 1 130 0
  91 0054 54ED026A 	 flds s13,[r4,#-8]
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
  92              	 .loc 1 131 0
  93 0058 54ED015A 	 flds s11,[r4,#-4]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
  94              	 .loc 1 129 0
  95 005c 15ED016A 	 flds s12,[r5,#-4]
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
  96              	 .loc 1 103 0
  97 0060 A8EEA07A 	 vfma.f32 s14,s17,s1
  98              	.LVL5:
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
  99              	 .loc 1 96 0
 100 0064 013F     	 subs r7,r7,#1
 101              	.LVL6:
 102 0066 04F12004 	 add r4,r4,#32
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 103              	 .loc 1 104 0
 104 006a E8EE887A 	 vfma.f32 s15,s17,s16
 105              	.LVL7:
 106 006e 05F12005 	 add r5,r5,#32
 107              	.LVL8:
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 108              	 .loc 1 105 0
 109 0072 A0EE487A 	 vfms.f32 s14,s0,s16
 110              	.LVL9:
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 111              	 .loc 1 106 0
 112 0076 E0EE207A 	 vfma.f32 s15,s0,s1
 113              	.LVL10:
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 114              	 .loc 1 113 0
 115 007a A1EE227A 	 vfma.f32 s14,s2,s5
 116              	.LVL11:
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 117              	 .loc 1 114 0
 118 007e E1EE217A 	 vfma.f32 s15,s2,s3
 119              	.LVL12:
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 120              	 .loc 1 115 0
 121 0082 A2EE617A 	 vfms.f32 s14,s4,s3
 122              	.LVL13:
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 123              	 .loc 1 116 0
 124 0086 E2EE227A 	 vfma.f32 s15,s4,s5
 125              	.LVL14:
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 126              	 .loc 1 123 0
 127 008a A3EE247A 	 vfma.f32 s14,s6,s9
 128              	.LVL15:
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 129              	 .loc 1 124 0
 130 008e E3EE237A 	 vfma.f32 s15,s6,s7
 131              	.LVL16:
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 132              	 .loc 1 125 0
 133 0092 A4EE637A 	 vfms.f32 s14,s8,s7
 134              	.LVL17:
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 135              	 .loc 1 126 0
 136 0096 E4EE247A 	 vfma.f32 s15,s8,s9
 137              	.LVL18:
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 138              	 .loc 1 133 0
 139 009a A5EE267A 	 vfma.f32 s14,s10,s13
 140              	.LVL19:
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 141              	 .loc 1 134 0
 142 009e E5EE257A 	 vfma.f32 s15,s10,s11
 143              	.LVL20:
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 144              	 .loc 1 135 0
 145 00a2 A6EE657A 	 vfms.f32 s14,s12,s11
 146              	.LVL21:
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 147              	 .loc 1 136 0
 148 00a6 E6EE267A 	 vfma.f32 s15,s12,s13
 149              	.LVL22:
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 150              	 .loc 1 96 0
 151 00aa B9D1     	 bne .L3
 152 00ac 4FEA4E1E 	 lsl lr,lr,#5
 153 00b0 7044     	 add r0,r0,lr
 154 00b2 7144     	 add r1,r1,lr
 155              	.LVL23:
 156              	.L2:
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       blkCnt--;
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****    ** No loop unrolling is used. */
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples & 0x3u;
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (blkCnt > 0u)
 157              	 .loc 1 146 0
 158 00b4 12F00302 	 ands r2,r2,#3
 159              	.LVL24:
 160 00b8 17D0     	 beq .L4
 161 00ba 0830     	 adds r0,r0,#8
 162              	.LVL25:
 163 00bc 0831     	 adds r1,r1,#8
 164              	.LVL26:
 165              	.L5:
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 166              	 .loc 1 148 0
 167 00be 10ED025A 	 flds s10,[r0,#-8]
 168              	.LVL27:
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 169              	 .loc 1 150 0
 170 00c2 51ED026A 	 flds s13,[r1,#-8]
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
 171              	 .loc 1 151 0
 172 00c6 51ED015A 	 flds s11,[r1,#-4]
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 173              	 .loc 1 149 0
 174 00ca 10ED016A 	 flds s12,[r0,#-4]
 175              	.LVL28:
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 176              	 .loc 1 153 0
 177 00ce A5EE267A 	 vfma.f32 s14,s10,s13
 178              	.LVL29:
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 179              	 .loc 1 146 0
 180 00d2 013A     	 subs r2,r2,#1
 181              	.LVL30:
 182 00d4 01F10801 	 add r1,r1,#8
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 183              	 .loc 1 154 0
 184 00d8 E5EE257A 	 vfma.f32 s15,s10,s11
 185              	.LVL31:
 186 00dc 00F10800 	 add r0,r0,#8
 187              	.LVL32:
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 188              	 .loc 1 155 0
 189 00e0 A6EE657A 	 vfms.f32 s14,s12,s11
 190              	.LVL33:
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 191              	 .loc 1 156 0
 192 00e4 E6EE267A 	 vfma.f32 s15,s12,s13
 193              	.LVL34:
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 194              	 .loc 1 146 0
 195 00e8 E9D1     	 bne .L5
 196              	.LVL35:
 197              	.L4:
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       blkCnt--;
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Run the below code for Cortex-M0 */
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while (numSamples > 0u)
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       numSamples--;
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Store the real and imaginary results in the destination buffers */
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *realResult = real_sum;
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *imagResult = imag_sum;
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 198              	 .loc 1 187 0
 199 00ea BDEC028B 	 fldmfdd sp!,{d8}
 200              	.LCFI2:
 201              	 .cfi_restore 80
 202              	 .cfi_restore 81
 203              	 .cfi_def_cfa_offset 20
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *imagResult = imag_sum;
 204              	 .loc 1 185 0
 205 00ee 83ED007A 	 fsts s14,[r3]
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 206              	 .loc 1 186 0
 207 00f2 C6ED007A 	 fsts s15,[r6]
 208              	 .loc 1 187 0
 209 00f6 F0BD     	 pop {r4,r5,r6,r7,pc}
 210              	.LVL36:
 211              	.L15:
 212              	 .align 2
 213              	.L14:
 214 00f8 00000000 	 .word 0
 215              	 .cfi_endproc
 216              	.LFE135:
 218              	 .text
 219              	.Letext0:
 220              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 221              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 222              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_dot_prod_f32.c
    {standard input}:20     .text.arm_cmplx_dot_prod_f32:00000000 $t
    {standard input}:25     .text.arm_cmplx_dot_prod_f32:00000000 arm_cmplx_dot_prod_f32
    {standard input}:214    .text.arm_cmplx_dot_prod_f32:000000f8 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
