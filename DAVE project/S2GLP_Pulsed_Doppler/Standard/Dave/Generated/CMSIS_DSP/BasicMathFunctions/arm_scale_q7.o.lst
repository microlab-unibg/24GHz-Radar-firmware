   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q7:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Title:        arm_scale_q7.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Description:  Multiplies a Q7 vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @addtogroup scale
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @brief Multiplies a Q7 vector by a scalar.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       *pSrc points to the input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       shift number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @param[out]      *pDst points to the output vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @param[in]       blockSize number of samples in the vector
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * @return none.
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  *
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * \par
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.7 format.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  * These are multiplied to yield a 2.14 intermediate result and this is shifted with saturation to 
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****  */
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** void arm_scale_q7(
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   q7_t * pSrc,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   q7_t scaleFract,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   int8_t shift,
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   q7_t * pDst,
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   uint32_t blockSize)
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** {
  28              	 .loc 1 61 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  45              	 .loc 1 61 0
  46 0004 DDF824E0 	 ldr lr,[sp,#36]
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   int8_t kShift = 7 - shift;                     /* shift to apply after scaling */
  47              	 .loc 1 62 0
  48 0008 C2F10702 	 rsb r2,r2,#7
  49              	.LVL1:
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   uint32_t blkCnt;                               /* loop counter */
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** #if defined (ARM_MATH_DSP)
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   q7_t in1, in2, in3, in4, out1, out2, out3, out4;      /* Temporary variables to store input & out
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   /*loop Unrolling */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize >> 2u;
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0u)
  50              	 .loc 1 77 0
  51 000c 5FEA9E08 	 lsrs r8,lr,#2
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   int8_t kShift = 7 - shift;                     /* shift to apply after scaling */
  52              	 .loc 1 62 0
  53 0010 D2B2     	 uxtb r2,r2
  54              	.LVL2:
  55              	 .loc 1 77 0
  56 0012 3BD0     	 beq .L2
  57 0014 56B2     	 sxtb r6,r2
  58 0016 051D     	 adds r5,r0,#4
  59 0018 9C46     	 mov ip,r3
  60 001a 4746     	 mov r7,r8
  61              	.LVL3:
  62              	.L3:
  63              	.LBB2:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* Reading 4 inputs from memory */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     in1 = *pSrc++;
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     in2 = *pSrc++;
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     in3 = *pSrc++;
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     in4 = *pSrc++;
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* Scale the inputs and then store the results in the temporary variables. */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out1 = (q7_t) (__SSAT(((in1) * scaleFract) >> kShift, 8));
  64              	 .loc 1 87 0
  65 001c 15F904BC 	 ldrsb fp,[r5,#-4]
  66              	.LBE2:
  67              	.LBB3:
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  68              	 .loc 1 88 0
  69 0020 15F9039C 	 ldrsb r9,[r5,#-3]
  70              	.LBE3:
  71              	.LBB4:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
  72              	 .loc 1 90 0
  73 0024 15F901AC 	 ldrsb r10,[r5,#-1]
  74              	.LBE4:
  75              	.LBB5:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
  76              	 .loc 1 89 0
  77 0028 15F9024C 	 ldrsb r4,[r5,#-2]
  78              	.LBE5:
  79              	.LBB6:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  80              	 .loc 1 87 0
  81 002c 1BFB01FB 	 smulbb fp,fp,r1
  82              	.LBE6:
  83              	.LBB7:
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  84              	 .loc 1 88 0
  85 0030 19FB01F9 	 smulbb r9,r9,r1
  86              	.LBE7:
  87              	.LBB8:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  88              	 .loc 1 87 0
  89 0034 4BFA06FB 	 asr fp,fp,r6
  90              	.LBE8:
  91              	.LBB9:
  92              	 .loc 1 90 0
  93 0038 1AFB01FA 	 smulbb r10,r10,r1
  94              	.LBE9:
  95              	.LBB10:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
  96              	 .loc 1 87 0
  97              	
  98 003c 0BF3070B 	 ssat fp,#8,fp
  99              	
 100              	.LVL4:
 101              	 .thumb
 102              	.LBE10:
 103              	.LBB11:
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out2 = (q7_t) (__SSAT(((in2) * scaleFract) >> kShift, 8));
 104              	 .loc 1 88 0
 105 0040 49FA06F9 	 asr r9,r9,r6
 106              	.LBE11:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* Packing the individual outputs into 32bit and storing in
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****      * destination buffer in single write */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
 107              	 .loc 1 94 0
 108 0044 5FFA8BFB 	 uxtb fp,fp
 109              	.LVL5:
 110              	.LBB12:
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out3 = (q7_t) (__SSAT(((in3) * scaleFract) >> kShift, 8));
 111              	 .loc 1 88 0
 112              	
 113 0048 09F30709 	 ssat r9,#8,r9
 114              	
 115              	.LVL6:
 116              	 .thumb
 117              	.LBE12:
 118              	.LBB13:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
 119              	 .loc 1 89 0
 120 004c 14FB01F4 	 smulbb r4,r4,r1
 121              	.LBE13:
 122              	 .loc 1 94 0
 123 0050 4FEA0929 	 lsl r9,r9,#8
 124              	.LVL7:
 125              	.LBB14:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
 126              	 .loc 1 90 0
 127 0054 4AFA06FA 	 asr r10,r10,r6
 128              	.LBE14:
 129              	 .loc 1 94 0
 130 0058 09F47F49 	 and r9,r9,#65280
 131              	.LBB15:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
 132              	 .loc 1 90 0
 133              	
 134 005c 0AF3070A 	 ssat r10,#8,r10
 135              	
 136              	 .thumb
 137              	.LBE15:
 138              	.LBB16:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     out4 = (q7_t) (__SSAT(((in4) * scaleFract) >> kShift, 8));
 139              	 .loc 1 89 0
 140 0060 3441     	 asrs r4,r4,r6
 141 0062 4BEA0A6A 	 orr r10,fp,r10,lsl#24
 142              	
 143 0066 04F30704 	 ssat r4,#8,r4
 144              	
 145              	.LVL8:
 146              	 .thumb
 147              	.LBE16:
 148              	 .loc 1 94 0
 149 006a 2404     	 lsls r4,r4,#16
 150              	.LVL9:
 151 006c 4AEA0909 	 orr r9,r10,r9
 152 0070 04F47F04 	 and r4,r4,#16711680
 153 0074 49EA0404 	 orr r4,r9,r4
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
 154              	 .loc 1 77 0
 155 0078 013F     	 subs r7,r7,#1
 156              	.LVL10:
 157              	 .loc 1 94 0
 158 007a 4CF8044B 	 str r4,[ip],#4
 159              	.LVL11:
 160 007e 05F10405 	 add r5,r5,#4
 161              	.LVL12:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
 162              	 .loc 1 77 0
 163 0082 CBD1     	 bne .L3
 164 0084 4FEA8808 	 lsl r8,r8,#2
 165 0088 4044     	 add r0,r0,r8
 166 008a 4344     	 add r3,r3,r8
 167              	.LVL13:
 168              	.L2:
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* Decrement the loop counter */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     blkCnt--;
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   }
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****    ** No loop unrolling is used. */
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   blkCnt = blockSize % 0x4u;
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   while (blkCnt > 0u)
 169              	 .loc 1 104 0
 170 008c 1EF0030E 	 ands lr,lr,#3
 171              	.LVL14:
 172 0090 0ED0     	 beq .L1
 173 0092 52B2     	 sxtb r2,r2
 174 0094 013B     	 subs r3,r3,#1
 175              	.LVL15:
 176 0096 8644     	 add lr,lr,r0
 177              	.LVL16:
 178              	.L5:
 179              	.LBB17:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* C = A * scale */
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     /* Scale the input and then store the result in the destination buffer. */
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****     *pDst++ = (q7_t) (__SSAT(((*pSrc++) * scaleFract) >> kShift, 8));
 180              	 .loc 1 108 0
 181 0098 10F9014B 	 ldrsb r4,[r0],#1
 182              	.LVL17:
 183 009c 14FB01F4 	 smulbb r4,r4,r1
 184              	.LBE17:
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
 185              	 .loc 1 104 0
 186 00a0 7045     	 cmp r0,lr
 187              	.LBB18:
 188              	 .loc 1 108 0
 189 00a2 44FA02F4 	 asr r4,r4,r2
 190              	
 191 00a6 04F30704 	 ssat r4,#8,r4
 192              	
 193              	.LVL18:
 194              	 .thumb
 195              	.LBE18:
 196 00aa 03F8014F 	 strb r4,[r3,#1]!
 197              	.LVL19:
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q7.c ****   {
 198              	 .loc 1 104 0
 199 00ae F3D1     	 bne .L5
 200              	.LVL20:
 201              	.L1:
 202 00b0 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 203              	 .cfi_endproc
 204              	.LFE135:
 206              	 .text
 207              	.Letext0:
 208              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 209              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 210              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q7.c
    {standard input}:20     .text.arm_scale_q7:00000000 $t
    {standard input}:25     .text.arm_scale_q7:00000000 arm_scale_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
