   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Title:        arm_scale_f32.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Description:  Multiplies a floating-point vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @defgroup scale Vector Scale
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * Multiply a vector by a scalar value.  For floating-point data, the algorithm used is:
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * <pre>
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *     pDst[n] = pSrc[n] * scale,   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * </pre>
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * In the fixed-point Q7, Q15, and Q31 functions, <code>scale</code> is represented by
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * a fractional multiplication <code>scaleFract</code> and an arithmetic shift <code>shift</code>.
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * The shift allows the gain of the scaling operation to exceed 1.0.
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * The algorithm used with fixed-point data is:
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * <pre>
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *     pDst[n] = (pSrc[n] * scaleFract) << shift,   0 <= n < blockSize.
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * </pre>
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * The overall scale factor applied to the fixed-point data is
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * <pre>
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *     scale = scaleFract * 2^shift.
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * </pre>
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  *
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * The functions support in-place computation allowing the source and destination
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * pointers to reference the same memory buffer.
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /**
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @addtogroup scale
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @{
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /**
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @brief Multiplies a floating-point vector by a scalar.
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @param[in]       *pSrc points to the input vector
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @param[in]       scale scale factor to be applied
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @param[out]      *pDst points to the output vector
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @param[in]       blockSize number of samples in the vector
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  * @return none.
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****  */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** void arm_scale_f32(
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   float32_t * pSrc,
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   float32_t scale,
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   float32_t * pDst,
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   uint32_t blockSize)
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** {
  28              	 .loc 1 82 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  34 0000 70B4     	 push {r4,r5,r6}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 6,-4
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** #if defined (ARM_MATH_DSP)
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   float32_t in1, in2, in3, in4;                  /* temporary variabels */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   /*loop Unrolling */
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize >> 2u;
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0u)
  40              	 .loc 1 94 0
  41 0002 9E08     	 lsrs r6,r3,#2
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  42              	 .loc 1 82 0
  43 0004 07EE901A 	 fmsr s15,r1
  44              	.LVL1:
  45              	 .loc 1 94 0
  46 0008 25D0     	 beq .L2
  47 000a 00F11004 	 add r4,r0,#16
  48 000e 02F11001 	 add r1,r2,#16
  49              	.LVL2:
  50 0012 3546     	 mov r5,r6
  51              	.LVL3:
  52              	.L3:
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* Scale the input and then store the results in the destination buffer. */
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* read input samples from source */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in1 = *pSrc;
  53              	 .loc 1 99 0
  54 0014 54ED045A 	 flds s11,[r4,#-16]
  55              	.LVL4:
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in2 = *(pSrc + 1);
  56              	 .loc 1 100 0
  57 0018 14ED036A 	 flds s12,[r4,#-12]
  58              	.LVL5:
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* multiply with scaling factor */
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in1 = in1 * scale;
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* read input sample from source */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in3 = *(pSrc + 2);
  59              	 .loc 1 106 0
  60 001c 54ED026A 	 flds s13,[r4,#-8]
  61              	.LVL6:
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* multiply with scaling factor */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in2 = in2 * scale;
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* read input sample from source */
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in4 = *(pSrc + 3);
  62              	 .loc 1 112 0
  63 0020 14ED017A 	 flds s14,[r4,#-4]
  64              	.LVL7:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  65              	 .loc 1 103 0
  66 0024 65EEA75A 	 fmuls s11,s11,s15
  67              	.LVL8:
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
  68              	 .loc 1 109 0
  69 0028 26EE276A 	 fmuls s12,s12,s15
  70              	.LVL9:
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* multiply with scaling factor */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in3 = in3 * scale;
  71              	 .loc 1 115 0
  72 002c 66EEA76A 	 fmuls s13,s13,s15
  73              	.LVL10:
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     in4 = in4 * scale;
  74              	 .loc 1 116 0
  75 0030 27EE277A 	 fmuls s14,s14,s15
  76              	.LVL11:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
  77              	 .loc 1 94 0
  78 0034 013D     	 subs r5,r5,#1
  79              	.LVL12:
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* store the result to destination */
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     *pDst = in1;
  80              	 .loc 1 118 0
  81 0036 41ED045A 	 fsts s11,[r1,#-16]
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     *(pDst + 1) = in2;
  82              	 .loc 1 119 0
  83 003a 01ED036A 	 fsts s12,[r1,#-12]
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     *(pDst + 2) = in3;
  84              	 .loc 1 120 0
  85 003e 41ED026A 	 fsts s13,[r1,#-8]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     *(pDst + 3) = in4;
  86              	 .loc 1 121 0
  87 0042 01ED017A 	 fsts s14,[r1,#-4]
  88              	.LVL13:
  89 0046 04F11004 	 add r4,r4,#16
  90              	.LVL14:
  91 004a 01F11001 	 add r1,r1,#16
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
  92              	 .loc 1 94 0
  93 004e E1D1     	 bne .L3
  94 0050 3601     	 lsls r6,r6,#4
  95 0052 3044     	 add r0,r0,r6
  96 0054 3244     	 add r2,r2,r6
  97              	.LVL15:
  98              	.L2:
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* update pointers to process next samples */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     pSrc += 4u;
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     pDst += 4u;
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* Decrement the loop counter */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   }
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****    ** No loop unrolling is used. */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize % 0x4u;
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** #else
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   /* Run the below code for Cortex-M0 */
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   /* Initialize blkCnt with number of samples */
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   blkCnt = blockSize;
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   while (blkCnt > 0u)
  99              	 .loc 1 144 0
 100 0056 13F00303 	 ands r3,r3,#3
 101              	.LVL16:
 102 005a 07D0     	 beq .L1
 103              	.L5:
 104              	.LVL17:
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* C = A * scale */
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* Scale the input and then store the result in the destination buffer. */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     *pDst++ = (*pSrc++) * scale;
 105              	 .loc 1 148 0
 106 005c B0EC017A 	 fldmias r0!,{s14}
 107              	.LVL18:
 108 0060 27EE277A 	 fmuls s14,s14,s15
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
 109              	 .loc 1 144 0
 110 0064 013B     	 subs r3,r3,#1
 111              	.LVL19:
 112              	 .loc 1 148 0
 113 0066 A2EC017A 	 fstmias r2!,{s14}
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   {
 114              	 .loc 1 144 0
 115 006a F7D1     	 bne .L5
 116              	.L1:
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     /* Decrement the loop counter */
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****     blkCnt--;
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c ****   }
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_f32.c **** }
 117              	 .loc 1 153 0
 118 006c 70BC     	 pop {r4,r5,r6}
 119              	.LCFI1:
 120              	 .cfi_restore 6
 121              	 .cfi_restore 5
 122              	 .cfi_restore 4
 123              	 .cfi_def_cfa_offset 0
 124 006e 7047     	 bx lr
 125              	 .cfi_endproc
 126              	.LFE135:
 128              	 .text
 129              	.Letext0:
 130              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 131              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 132              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_f32.c
    {standard input}:20     .text.arm_scale_f32:00000000 $t
    {standard input}:25     .text.arm_scale_f32:00000000 arm_scale_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
