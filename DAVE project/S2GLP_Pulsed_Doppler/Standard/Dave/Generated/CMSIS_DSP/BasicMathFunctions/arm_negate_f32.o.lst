   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_negate_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_negate_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_negate_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_negate_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Title:        arm_negate_f32.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Description:  Negates floating-point vectors
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @defgroup negate Vector Negate
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Negates the elements of a vector.
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * <pre>
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *     pDst[n] = -pSrc[n],   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * </pre>
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * The functions support in-place computation allowing the source and
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * destination pointers to reference the same memory buffer.
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @addtogroup negate
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @{
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @brief  Negates the elements of a floating-point vector.
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[in]  *pSrc points to the input vector
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[out]  *pDst points to the output vector
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[in]  blockSize number of samples in the vector
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @return none.
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** void arm_negate_f32(
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t * pSrc,
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t * pDst,
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   uint32_t blockSize)
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** {
  28              	 .loc 1 66 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
  34 0000 70B4     	 push {r4,r5,r6}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 5,-8
  39              	 .cfi_offset 6,-4
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #if defined (ARM_MATH_DSP)
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t in1, in2, in3, in4;                  /* temporary variables */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /*loop Unrolling */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize >> 2u;
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   while (blkCnt > 0u)
  40              	 .loc 1 80 0
  41 0002 9608     	 lsrs r6,r2,#2
  42              	.LVL1:
  43 0004 25D0     	 beq .L2
  44 0006 00F11004 	 add r4,r0,#16
  45 000a 01F11003 	 add r3,r1,#16
  46 000e 3546     	 mov r5,r6
  47              	.LVL2:
  48              	.L3:
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* read inputs from source */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in1 = *pSrc;
  49              	 .loc 1 83 0
  50 0010 14ED046A 	 flds s12,[r4,#-16]
  51              	.LVL3:
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in2 = *(pSrc + 1);
  52              	 .loc 1 84 0
  53 0014 54ED036A 	 flds s13,[r4,#-12]
  54              	.LVL4:
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in3 = *(pSrc + 2);
  55              	 .loc 1 85 0
  56 0018 14ED027A 	 flds s14,[r4,#-8]
  57              	.LVL5:
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in4 = *(pSrc + 3);
  58              	 .loc 1 86 0
  59 001c 54ED017A 	 flds s15,[r4,#-4]
  60              	.LVL6:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* negate the input */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in1 = -in1;
  61              	 .loc 1 89 0
  62 0020 B1EE466A 	 fnegs s12,s12
  63              	.LVL7:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in2 = -in2;
  64              	 .loc 1 90 0
  65 0024 F1EE666A 	 fnegs s13,s13
  66              	.LVL8:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in3 = -in3;
  67              	 .loc 1 91 0
  68 0028 B1EE477A 	 fnegs s14,s14
  69              	.LVL9:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in4 = -in4;
  70              	 .loc 1 92 0
  71 002c F1EE677A 	 fnegs s15,s15
  72              	.LVL10:
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
  73              	 .loc 1 80 0
  74 0030 013D     	 subs r5,r5,#1
  75              	.LVL11:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* store the result to destination */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *pDst = in1;
  76              	 .loc 1 95 0
  77 0032 03ED046A 	 fsts s12,[r3,#-16]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 1) = in2;
  78              	 .loc 1 96 0
  79 0036 43ED036A 	 fsts s13,[r3,#-12]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 2) = in3;
  80              	 .loc 1 97 0
  81 003a 03ED027A 	 fsts s14,[r3,#-8]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 3) = in4;
  82              	 .loc 1 98 0
  83 003e 43ED017A 	 fsts s15,[r3,#-4]
  84              	.LVL12:
  85 0042 04F11004 	 add r4,r4,#16
  86              	.LVL13:
  87 0046 03F11003 	 add r3,r3,#16
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
  88              	 .loc 1 80 0
  89 004a E1D1     	 bne .L3
  90 004c 3601     	 lsls r6,r6,#4
  91 004e 3044     	 add r0,r0,r6
  92 0050 3144     	 add r1,r1,r6
  93              	.LVL14:
  94              	.L2:
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* update pointers to process next samples */
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     pSrc += 4u;
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     pDst += 4u;
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Decrement the loop counter */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   }
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****    ** No loop unrolling is used. */
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize % 0x4u;
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #else
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* Run the below code for Cortex-M0 */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* Initialize blkCnt with number of samples */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize;
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   while (blkCnt > 0u)
  95              	 .loc 1 121 0
  96 0052 12F00302 	 ands r2,r2,#3
  97              	.LVL15:
  98 0056 07D0     	 beq .L1
  99              	.LVL16:
 100              	.L5:
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* C = -A */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Negate and then store the results in the destination buffer. */
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 101              	 .loc 1 125 0
 102 0058 F0EC017A 	 fldmias r0!,{s15}
 103              	.LVL17:
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 104              	 .loc 1 121 0
 105 005c 013A     	 subs r2,r2,#1
 106              	.LVL18:
 107              	 .loc 1 125 0
 108 005e F1EE677A 	 fnegs s15,s15
 109 0062 E1EC017A 	 fstmias r1!,{s15}
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 110              	 .loc 1 121 0
 111 0066 F7D1     	 bne .L5
 112              	.L1:
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Decrement the loop counter */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   }
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** }
 113              	 .loc 1 130 0
 114 0068 70BC     	 pop {r4,r5,r6}
 115              	.LCFI1:
 116              	 .cfi_restore 6
 117              	 .cfi_restore 5
 118              	 .cfi_restore 4
 119              	 .cfi_def_cfa_offset 0
 120 006a 7047     	 bx lr
 121              	 .cfi_endproc
 122              	.LFE135:
 124              	 .text
 125              	.Letext0:
 126              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 127              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 128              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_negate_f32.c
    {standard input}:20     .text.arm_negate_f32:00000000 $t
    {standard input}:25     .text.arm_negate_f32:00000000 arm_negate_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
