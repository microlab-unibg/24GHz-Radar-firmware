   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Title:        arm_mult_f32.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Description:  Floating-point vector multiplication
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @defgroup BasicMult Vector Multiplication
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Element-by-element multiplication of two vectors.
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * <pre>
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *     pDst[n] = pSrcA[n] * pSrcB[n],   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * </pre>
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @addtogroup BasicMult
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @{
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @brief Floating-point vector multiplication.
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       *pSrcA points to the first input vector
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       *pSrcB points to the second input vector
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[out]      *pDst points to the output vector
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       blockSize number of samples in each vector
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @return none.
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pSrcA,
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pSrcB,
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pDst,
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   uint32_t blockSize)
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** {
  28              	 .loc 1 66 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 20
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #if defined (ARM_MATH_DSP)
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t out1, out2, out3, out4;              /* temporary output variables */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* loop Unrolling */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize >> 2u;
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0u)
  41              	 .loc 1 80 0
  42 0002 5FEA930E 	 lsrs lr,r3,#2
  43              	.LVL1:
  44 0006 33D0     	 beq .L2
  45 0008 00F11006 	 add r6,r0,#16
  46 000c 01F11005 	 add r5,r1,#16
  47 0010 02F11004 	 add r4,r2,#16
  48 0014 7746     	 mov r7,lr
  49              	.LVL2:
  50              	.L3:
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply the inputs and store the results in output buffer */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA1 = *pSrcA;
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB1 = *pSrcB;
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA2 = *(pSrcA + 1);
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB2 = *(pSrcB + 1);
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out1 = inA1 * inB1;
  51              	 .loc 1 94 0
  52 0016 16ED046A 	 flds s12,[r6,#-16]
  53 001a 55ED044A 	 flds s9,[r5,#-16]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA3 = *(pSrcA + 2);
  54              	 .loc 1 97 0
  55 001e 56ED026A 	 flds s13,[r6,#-8]
  56              	.LVL3:
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB3 = *(pSrcB + 2);
  57              	 .loc 1 99 0
  58 0022 15ED025A 	 flds s10,[r5,#-8]
  59              	.LVL4:
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out2 = inA2 * inB2;
  60              	 .loc 1 102 0
  61 0026 16ED037A 	 flds s14,[r6,#-12]
  62 002a 55ED035A 	 flds s11,[r5,#-12]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA4 = *(pSrcA + 3);
  63              	 .loc 1 105 0
  64 002e 56ED017A 	 flds s15,[r6,#-4]
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  65              	 .loc 1 94 0
  66 0032 26EE246A 	 fmuls s12,s12,s9
  67              	.LVL5:
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *pDst = out1;
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB4 = *(pSrcB + 3);
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out3 = inA3 * inB3;
  68              	 .loc 1 114 0
  69 0036 66EE856A 	 fmuls s13,s13,s10
  70              	.LVL6:
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  71              	 .loc 1 108 0
  72 003a 04ED046A 	 fsts s12,[r4,#-16]
  73              	.LVL7:
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  74              	 .loc 1 111 0
  75 003e 15ED016A 	 flds s12,[r5,#-4]
  76              	.LVL8:
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 1) = out2;
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out4 = inA4 * inB4;
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 2) = out3;
  77              	 .loc 1 122 0
  78 0042 44ED026A 	 fsts s13,[r4,#-8]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  79              	 .loc 1 102 0
  80 0046 27EE257A 	 fmuls s14,s14,s11
  81              	.LVL9:
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
  82              	 .loc 1 120 0
  83 004a 67EE867A 	 fmuls s15,s15,s12
  84              	.LVL10:
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
  85              	 .loc 1 80 0
  86 004e 013F     	 subs r7,r7,#1
  87              	.LVL11:
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  88              	 .loc 1 117 0
  89 0050 04ED037A 	 fsts s14,[r4,#-12]
  90              	.LVL12:
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 3) = out4;
  91              	 .loc 1 124 0
  92 0054 44ED017A 	 fsts s15,[r4,#-4]
  93              	.LVL13:
  94 0058 06F11006 	 add r6,r6,#16
  95 005c 05F11005 	 add r5,r5,#16
  96 0060 04F11004 	 add r4,r4,#16
  97              	.LVL14:
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
  98              	 .loc 1 80 0
  99 0064 D7D1     	 bne .L3
 100 0066 4FEA0E14 	 lsl r4,lr,#4
 101              	.LVL15:
 102 006a 2044     	 add r0,r0,r4
 103 006c 2144     	 add r1,r1,r4
 104 006e 2244     	 add r2,r2,r4
 105              	.LVL16:
 106              	.L2:
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* update pointers to process next samples */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pSrcA += 4u;
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pSrcB += 4u;
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pDst += 4u;
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Decrement the blockSize loop counter */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   }
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****    ** No loop unrolling is used. */
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize % 0x4u;
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #else
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Run the below code for Cortex-M0 */
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Initialize blkCnt with number of samples */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize;
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   while (blkCnt > 0u)
 107              	 .loc 1 149 0
 108 0070 13F00303 	 ands r3,r3,#3
 109              	.LVL17:
 110 0074 09D0     	 beq .L1
 111              	.LVL18:
 112              	.L5:
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply the inputs and store the results in output buffer */
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 113              	 .loc 1 153 0
 114 0076 F0EC017A 	 fldmias r0!,{s15}
 115              	.LVL19:
 116 007a B1EC017A 	 fldmias r1!,{s14}
 117              	.LVL20:
 118 007e 67EE877A 	 fmuls s15,s15,s14
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 119              	 .loc 1 149 0
 120 0082 013B     	 subs r3,r3,#1
 121              	.LVL21:
 122              	 .loc 1 153 0
 123 0084 E2EC017A 	 fstmias r2!,{s15}
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 124              	 .loc 1 149 0
 125 0088 F5D1     	 bne .L5
 126              	.L1:
 127 008a F0BD     	 pop {r4,r5,r6,r7,pc}
 128              	 .cfi_endproc
 129              	.LFE135:
 131              	 .text
 132              	.Letext0:
 133              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 134              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 135              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_f32.c
    {standard input}:20     .text.arm_mult_f32:00000000 $t
    {standard input}:25     .text.arm_mult_f32:00000000 arm_mult_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
