   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_scale_q31.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_scale_q31,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_scale_q31
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_scale_q31:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Title:        arm_scale_q31.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Description:  Multiplies a Q31 vector by a scalar
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @addtogroup scale
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @brief Multiplies a Q31 vector by a scalar.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       *pSrc points to the input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       scaleFract fractional portion of the scale value
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       shift number of bits to shift the result by
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[out]      *pDst points to the output vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       blockSize number of samples in the vector
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @return none.
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * <b>Scaling and Overflow Behavior:</b>
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * \par
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.31 format.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * These are multiplied to yield a 2.62 intermediate result and this is shifted with saturation to 
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t * pSrc,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t scaleFract,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t shift,
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t * pDst,
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   uint32_t blockSize)
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** {
  28              	 .loc 1 61 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  45 0004 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 48
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
  48              	 .loc 1 62 0
  49 0006 0132     	 adds r2,r2,#1
  50              	.LVL1:
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
  51              	 .loc 1 61 0
  52 0008 9A46     	 mov r10,r3
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t sign = (kShift & 0x80);
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t in, out;
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #if defined (ARM_MATH_DSP)
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t in1, in2, in3, in4;                      /* temporary input variables */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t out1, out2, out3, out4;                  /* temporary output variabels */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /*loop Unrolling */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize >> 2u;
  53              	 .loc 1 76 0
  54 000a 0C9B     	 ldr r3,[sp,#48]
  55              	.LVL2:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0u)
  56              	 .loc 1 78 0
  57 000c 52B2     	 sxtb r2,r2
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  58              	 .loc 1 76 0
  59 000e 9B08     	 lsrs r3,r3,#2
  60              	 .loc 1 78 0
  61 0010 002A     	 cmp r2,#0
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
  62              	 .loc 1 61 0
  63 0012 8046     	 mov r8,r0
  64 0014 8946     	 mov r9,r1
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  65              	 .loc 1 76 0
  66 0016 0093     	 str r3,[sp]
  67              	.LVL3:
  68              	 .loc 1 78 0
  69 0018 44DA     	 bge .L2
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0u)
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* read four inputs from source */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = *pSrc;
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = *(pSrc + 3);
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* multiply input with scaler value */
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = ((q63_t) in1 * scaleFract) >> 32;
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = ((q63_t) in2 * scaleFract) >> 32;
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = ((q63_t) in4 * scaleFract) >> 32;
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* apply shifting */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out1 = in1 << kShift;
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out2 = in2 << kShift;
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* saturate the results. */
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if (in1 != (out1 >> kShift))
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out1 = 0x7FFFFFFF ^ (in1 >> 31);
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if (in2 != (out2 >> kShift))
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out2 = 0x7FFFFFFF ^ (in2 >> 31);
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out3 = in3 << kShift;
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out4 = in4 << kShift;
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *pDst = out1;
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 1) = out2;
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if (in3 != (out3 >> kShift))
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out3 = 0x7FFFFFFF ^ (in3 >> 31);
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if (in4 != (out4 >> kShift))
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out4 = 0x7FFFFFFF ^ (in4 >> 31);
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Store result destination */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 2) = out3;
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 3) = out4;
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Update pointers to process next sampels */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pSrc += 4u;
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pDst += 4u;
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement the loop counter */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     }
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   else
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     while (blkCnt > 0u)
  70              	 .loc 1 136 0
  71 001a 93B3     	 cbz r3,.L4
  72 001c DDF800C0 	 ldr ip,[sp]
  73 0020 C2F1000E 	 rsb lr,r2,#0
  74 0024 00F11001 	 add r1,r0,#16
  75              	.LVL4:
  76 0028 0AF11003 	 add r3,r10,#16
  77              	.LVL5:
  78 002c 8346     	 mov fp,r0
  79 002e 9046     	 mov r8,r2
  80              	.LVL6:
  81              	.L7:
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* read four inputs from source */
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = *pSrc;
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = *(pSrc + 3);
  82              	 .loc 1 142 0
  83 0030 11E90500 	 ldmdb r1,{r0,r2}
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
  84              	 .loc 1 139 0
  85 0034 51F8106C 	 ldr r6,[r1,#-16]
  86              	.LVL7:
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
  87              	 .loc 1 140 0
  88 0038 51F80C4C 	 ldr r4,[r1,#-12]
  89              	.LVL8:
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* multiply input with scaler value */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = ((q63_t) in1 * scaleFract) >> 32;
  90              	 .loc 1 145 0
  91 003c 86FB0967 	 smull r6,r7,r6,r9
  92              	.LVL9:
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = ((q63_t) in2 * scaleFract) >> 32;
  93              	 .loc 1 146 0
  94 0040 84FB0945 	 smull r4,r5,r4,r9
  95              	.LVL10:
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = ((q63_t) in4 * scaleFract) >> 32;
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* apply shifting */
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out1 = in1 >> -kShift;
  96              	 .loc 1 151 0
  97 0044 47FA0EF6 	 asr r6,r7,lr
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out2 = in2 >> -kShift;
  98              	 .loc 1 152 0
  99 0048 45FA0EF7 	 asr r7,r5,lr
 100              	.LVL11:
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
 101              	 .loc 1 147 0
 102 004c 80FB0945 	 smull r4,r5,r0,r9
 103              	.LVL12:
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out3 = in3 >> -kShift;
 104              	 .loc 1 154 0
 105 0050 45FA0EF0 	 asr r0,r5,lr
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 106              	 .loc 1 148 0
 107 0054 82FB0945 	 smull r4,r5,r2,r9
 108              	.LVL13:
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out4 = in4 >> -kShift;
 109              	 .loc 1 155 0
 110 0058 45FA0EF2 	 asr r2,r5,lr
 111              	.LVL14:
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 112              	 .loc 1 136 0
 113 005c BCF1010C 	 subs ip,ip,#1
 114              	.LVL15:
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Store result destination */
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *pDst = out1;
 115              	 .loc 1 158 0
 116 0060 43F8106C 	 str r6,[r3,#-16]
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 1) = out2;
 117              	 .loc 1 159 0
 118 0064 43F80C7C 	 str r7,[r3,#-12]
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 2) = out3;
 162:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 3) = out4;
 119              	 .loc 1 162 0
 120 0068 03E90500 	 stmdb r3,{r0,r2}
 121              	.LVL16:
 122 006c 01F11001 	 add r1,r1,#16
 123 0070 03F11003 	 add r3,r3,#16
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 124              	 .loc 1 136 0
 125 0074 DCD1     	 bne .L7
 126 0076 009B     	 ldr r3,[sp]
 127 0078 4246     	 mov r2,r8
 128              	.LVL17:
 129 007a 1B01     	 lsls r3,r3,#4
 130 007c D846     	 mov r8,fp
 131              	.LVL18:
 132 007e 9844     	 add r8,r8,r3
 133 0080 9A44     	 add r10,r10,r3
 134              	.LVL19:
 135              	.L4:
 163:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 164:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Update pointers to process next sampels */
 165:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pSrc += 4u;
 166:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pDst += 4u;
 167:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 168:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement the loop counter */
 169:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 170:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     }
 171:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 172:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 173:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****    ** No loop unrolling is used. */
 174:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize % 0x4u;
 175:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 176:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #else
 177:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 178:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* Run the below code for Cortex-M0 */
 179:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* Initialize blkCnt with number of samples */
 181:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize;
 182:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 183:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #endif /* #if defined (ARM_MATH_DSP) */
 184:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 185:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   if (sign == 0)
 186:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  while (blkCnt > 0u)
 188:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 189:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* C = A * scale */
 190:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Scale the input and then store the result in the destination buffer. */
 191:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = *pSrc++;
 192:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = ((q63_t) in * scaleFract) >> 32;
 193:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 194:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		out = in << kShift;
 195:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 196:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		if (in != (out >> kShift))
 197:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 			out = 0x7FFFFFFF ^ (in >> 31);
 198:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 199:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		*pDst++ = out;
 200:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 201:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Decrement the loop counter */
 202:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		blkCnt--;
 203:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  }
 204:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 205:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   else
 206:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 207:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  while (blkCnt > 0u)
 136              	 .loc 1 207 0
 137 0082 0C9B     	 ldr r3,[sp,#48]
 138 0084 13F00303 	 ands r3,r3,#3
 139              	.LVL20:
 140 0088 09D0     	 beq .L1
 141 008a 5242     	 negs r2,r2
 142              	.LVL21:
 143              	.L9:
 208:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 209:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* C = A * scale */
 210:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Scale the input and then store the result in the destination buffer. */
 211:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = *pSrc++;
 144              	 .loc 1 211 0
 145 008c 58F8040B 	 ldr r0,[r8],#4
 146              	.LVL22:
 212:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = ((q63_t) in * scaleFract) >> 32;
 147              	 .loc 1 212 0
 148 0090 80FB0901 	 smull r0,r1,r0,r9
 149              	.LVL23:
 213:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 214:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		out = in >> -kShift;
 150              	 .loc 1 214 0
 151 0094 1141     	 asrs r1,r1,r2
 152              	.LVL24:
 207:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 153              	 .loc 1 207 0
 154 0096 013B     	 subs r3,r3,#1
 155              	.LVL25:
 215:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 216:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		*pDst++ = out;
 156              	 .loc 1 216 0
 157 0098 4AF8041B 	 str r1,[r10],#4
 158              	.LVL26:
 207:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 159              	 .loc 1 207 0
 160 009c F6D1     	 bne .L9
 161              	.LVL27:
 162              	.L1:
 217:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 218:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Decrement the loop counter */
 219:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		blkCnt--;
 220:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  }
 221:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 222:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 223:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** }
 163              	 .loc 1 223 0
 164 009e 03B0     	 add sp,sp,#12
 165              	.LCFI2:
 166              	 .cfi_remember_state
 167              	 .cfi_def_cfa_offset 36
 168              	 
 169 00a0 BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 170              	.LVL28:
 171              	.L2:
 172              	.LCFI3:
 173              	 .cfi_restore_state
 174 00a4 1946     	 mov r1,r3
 175              	.LVL29:
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 176              	 .loc 1 82 0
 177 00a6 002B     	 cmp r3,#0
 178 00a8 57D0     	 beq .L5
 179 00aa 00F1100E 	 add lr,r0,#16
 180 00ae 0AF11003 	 add r3,r10,#16
 181 00b2 8C46     	 mov ip,r1
 182 00b4 0190     	 str r0,[sp,#4]
 183 00b6 D046     	 mov r8,r10
 184              	.LVL30:
 185              	.L6:
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
 186              	 .loc 1 85 0
 187 00b8 5EF8106C 	 ldr r6,[lr,#-16]
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
 188              	 .loc 1 86 0
 189 00bc 5EF80C4C 	 ldr r4,[lr,#-12]
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 190              	 .loc 1 88 0
 191 00c0 1EE90300 	 ldmdb lr,{r0,r1}
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = ((q63_t) in2 * scaleFract) >> 32;
 192              	 .loc 1 91 0
 193 00c4 86FB0967 	 smull r6,r7,r6,r9
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 194              	 .loc 1 102 0
 195 00c8 FE17     	 asrs r6,r7,#31
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
 196              	 .loc 1 92 0
 197 00ca 84FB0945 	 smull r4,r5,r4,r9
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 198              	 .loc 1 102 0
 199 00ce 86F00044 	 eor r4,r6,#-2147483648
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out2 = in2 << kShift;
 200              	 .loc 1 97 0
 201 00d2 07FA02F6 	 lsl r6,r7,r2
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = ((q63_t) in4 * scaleFract) >> 32;
 202              	 .loc 1 93 0
 203 00d6 80FB09AB 	 smull r10,fp,r0,r9
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 204              	 .loc 1 102 0
 205 00da E443     	 mvns r4,r4
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out1 = 0x7FFFFFFF ^ (in1 >> 31);
 206              	 .loc 1 101 0
 207 00dc 46FA02F0 	 asr r0,r6,r2
 208 00e0 B842     	 cmp r0,r7
 209 00e2 08BF     	 it eq
 210 00e4 3446     	 moveq r4,r6
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 211              	 .loc 1 105 0
 212 00e6 EE17     	 asrs r6,r5,#31
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 213              	 .loc 1 94 0
 214 00e8 81FB0901 	 smull r0,r1,r1,r9
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 215              	 .loc 1 105 0
 216 00ec 86F00040 	 eor r0,r6,#-2147483648
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 217              	 .loc 1 98 0
 218 00f0 05FA02F6 	 lsl r6,r5,r2
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 219              	 .loc 1 105 0
 220 00f4 C043     	 mvns r0,r0
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 1) = out2;
 221              	 .loc 1 110 0
 222 00f6 43F8104C 	 str r4,[r3,#-16]
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 223              	 .loc 1 114 0
 224 00fa 4FEAEB77 	 asr r7,fp,#31
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out2 = 0x7FFFFFFF ^ (in2 >> 31);
 225              	 .loc 1 104 0
 226 00fe 46FA02F4 	 asr r4,r6,r2
 227 0102 AC42     	 cmp r4,r5
 228 0104 14BF     	 ite ne
 229 0106 0446     	 movne r4,r0
 230 0108 3446     	 moveq r4,r6
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 231              	 .loc 1 114 0
 232 010a 87F00047 	 eor r7,r7,#-2147483648
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out4 = in4 << kShift;
 233              	 .loc 1 107 0
 234 010e 0BFA02F6 	 lsl r6,fp,r2
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 235              	 .loc 1 117 0
 236 0112 C817     	 asrs r0,r1,#31
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 237              	 .loc 1 108 0
 238 0114 01FA02F5 	 lsl r5,r1,r2
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 239              	 .loc 1 111 0
 240 0118 43F80C4C 	 str r4,[r3,#-12]
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 241              	 .loc 1 114 0
 242 011c FF43     	 mvns r7,r7
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out3 = 0x7FFFFFFF ^ (in3 >> 31);
 243              	 .loc 1 113 0
 244 011e 46FA02F4 	 asr r4,r6,r2
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 245              	 .loc 1 117 0
 246 0122 80F00040 	 eor r0,r0,#-2147483648
 247 0126 5C45     	 cmp r4,fp
 248 0128 08BF     	 it eq
 249 012a 3746     	 moveq r7,r6
 250 012c C043     	 mvns r0,r0
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out4 = 0x7FFFFFFF ^ (in4 >> 31);
 251              	 .loc 1 116 0
 252 012e 45FA02F4 	 asr r4,r5,r2
 253              	.LVL31:
 254 0132 8C42     	 cmp r4,r1
 255 0134 08BF     	 it eq
 256 0136 2846     	 moveq r0,r5
 257              	.LVL32:
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 258              	 .loc 1 82 0
 259 0138 BCF1010C 	 subs ip,ip,#1
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 3) = out4;
 260              	 .loc 1 120 0
 261 013c 43F8087C 	 str r7,[r3,#-8]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 262              	 .loc 1 121 0
 263 0140 43F8040C 	 str r0,[r3,#-4]
 264 0144 0EF1100E 	 add lr,lr,#16
 265 0148 03F11003 	 add r3,r3,#16
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 266              	 .loc 1 82 0
 267 014c B4D1     	 bne .L6
 268 014e C246     	 mov r10,r8
 269 0150 9DE80801 	 ldmia sp,{r3,r8}
 270 0154 1B01     	 lsls r3,r3,#4
 271 0156 9844     	 add r8,r8,r3
 272 0158 9A44     	 add r10,r10,r3
 273              	.LVL33:
 274              	.L5:
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 275              	 .loc 1 187 0
 276 015a 0C9B     	 ldr r3,[sp,#48]
 277 015c 13F00306 	 ands r6,r3,#3
 278              	.LVL34:
 279 0160 9DD0     	 beq .L1
 280              	.L8:
 281              	.LVL35:
 191:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = ((q63_t) in * scaleFract) >> 32;
 282              	 .loc 1 191 0
 283 0162 58F8040B 	 ldr r0,[r8],#4
 192:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 284              	 .loc 1 192 0
 285 0166 80FB0901 	 smull r0,r1,r0,r9
 197:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 286              	 .loc 1 197 0
 287 016a CB17     	 asrs r3,r1,#31
 194:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 288              	 .loc 1 194 0
 289 016c 01FA02F0 	 lsl r0,r1,r2
 197:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 290              	 .loc 1 197 0
 291 0170 83F00043 	 eor r3,r3,#-2147483648
 292 0174 DB43     	 mvns r3,r3
 196:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 			out = 0x7FFFFFFF ^ (in >> 31);
 293              	 .loc 1 196 0
 294 0176 40FA02F4 	 asr r4,r0,r2
 295              	.LVL36:
 296 017a 8C42     	 cmp r4,r1
 297 017c 08BF     	 it eq
 298 017e 0346     	 moveq r3,r0
 299              	.LVL37:
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 300              	 .loc 1 187 0
 301 0180 013E     	 subs r6,r6,#1
 302              	.LVL38:
 199:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 303              	 .loc 1 199 0
 304 0182 4AF8043B 	 str r3,[r10],#4
 305              	.LVL39:
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 306              	 .loc 1 187 0
 307 0186 ECD1     	 bne .L8
 308 0188 89E7     	 b .L1
 309              	 .cfi_endproc
 310              	.LFE135:
 312 018a 00BF     	 .text
 313              	.Letext0:
 314              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 315              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 316              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q31.c
    {standard input}:20     .text.arm_scale_q31:00000000 $t
    {standard input}:25     .text.arm_scale_q31:00000000 arm_scale_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
