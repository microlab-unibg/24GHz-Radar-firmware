   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_mult_q7.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_mult_q7,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_q7
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_q7:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Title:        arm_mult_q7.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Description:  Q7 vector multiplication
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @addtogroup BasicMult
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @brief           Q7 vector multiplication
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcA points to the first input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcB points to the second input vector
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[out]      *pDst points to the output vector
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       blockSize number of samples in each vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @return none.
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * \par
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * The function uses saturating arithmetic.
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcA,
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcB,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pDst,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blockSize)
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** {
  28              	 .loc 1 59 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 2DE9F04F 	 push {r4,r5,r6,r7,r8,r9,r10,fp,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 36
  36              	 .cfi_offset 4,-36
  37              	 .cfi_offset 5,-32
  38              	 .cfi_offset 6,-28
  39              	 .cfi_offset 7,-24
  40              	 .cfi_offset 8,-20
  41              	 .cfi_offset 9,-16
  42              	 .cfi_offset 10,-12
  43              	 .cfi_offset 11,-8
  44              	 .cfi_offset 14,-4
  45 0004 83B0     	 sub sp,sp,#12
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 48
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blkCnt;                               /* loop counters */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #if defined (ARM_MATH_DSP)
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary variables to store the product */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* loop Unrolling */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2u;
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
  48              	 .loc 1 72 0
  49 0006 9C08     	 lsrs r4,r3,#2
  50              	.LVL1:
  51 0008 0194     	 str r4,[sp,#4]
  52 000a 42D0     	 beq .L2
  53 000c 00F10409 	 add r9,r0,#4
  54 0010 01F10408 	 add r8,r1,#4
  55 0014 9346     	 mov fp,r2
  56 0016 A246     	 mov r10,r4
  57              	.LVL2:
  58              	.L3:
  59              	.LBB2:
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the results in temporary variables */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  60              	 .loc 1 76 0
  61 0018 19F904EC 	 ldrsb lr,[r9,#-4]
  62              	.LBE2:
  63              	.LBB3:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  64              	 .loc 1 77 0
  65 001c 19F9035C 	 ldrsb r5,[r9,#-3]
  66              	.LBE3:
  67              	.LBB4:
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  68              	 .loc 1 76 0
  69 0020 18F9046C 	 ldrsb r6,[r8,#-4]
  70              	.LBE4:
  71              	.LBB5:
  72              	 .loc 1 77 0
  73 0024 18F9034C 	 ldrsb r4,[r8,#-3]
  74              	.LBE5:
  75              	.LBB6:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  76              	 .loc 1 79 0
  77 0028 19F901CC 	 ldrsb ip,[r9,#-1]
  78 002c 18F9017C 	 ldrsb r7,[r8,#-1]
  79              	.LBE6:
  80              	.LBB7:
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  81              	 .loc 1 76 0
  82 0030 1EFB06F6 	 smulbb r6,lr,r6
  83              	.LBE7:
  84              	.LBB8:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  85              	 .loc 1 77 0
  86 0034 15FB04F4 	 smulbb r4,r5,r4
  87              	.LBE8:
  88              	.LBB9:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  89              	 .loc 1 78 0
  90 0038 19F902EC 	 ldrsb lr,[r9,#-2]
  91 003c 18F9025C 	 ldrsb r5,[r8,#-2]
  92              	.LBE9:
  93              	.LBB10:
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  94              	 .loc 1 76 0
  95 0040 F611     	 asrs r6,r6,#7
  96              	.LBE10:
  97              	.LBB11:
  98              	 .loc 1 79 0
  99 0042 1CFB07F7 	 smulbb r7,ip,r7
 100              	.LBE11:
 101              	.LBB12:
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 102              	 .loc 1 76 0
 103              	
 104 0046 06F30706 	 ssat r6,#8,r6
 105              	
 106              	.LVL3:
 107              	 .thumb
 108              	.LBE12:
 109              	.LBB13:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 110              	 .loc 1 77 0
 111 004a E411     	 asrs r4,r4,#7
 112              	.LBE13:
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Store the results of 4 inputs in the destination buffer in single cycle by packing */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
 113              	 .loc 1 82 0
 114 004c F6B2     	 uxtb r6,r6
 115              	.LVL4:
 116              	.LBB14:
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 117              	 .loc 1 77 0
 118              	
 119 004e 04F30704 	 ssat r4,#8,r4
 120              	
 121              	.LVL5:
 122              	 .thumb
 123              	.LBE14:
 124              	.LBB15:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 125              	 .loc 1 78 0
 126 0052 1EFB05F5 	 smulbb r5,lr,r5
 127              	.LBE15:
 128              	 .loc 1 82 0
 129 0056 2402     	 lsls r4,r4,#8
 130              	.LVL6:
 131              	.LBB16:
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 132              	 .loc 1 79 0
 133 0058 FF11     	 asrs r7,r7,#7
 134              	.LBE16:
 135              	 .loc 1 82 0
 136 005a 04F47F44 	 and r4,r4,#65280
 137              	.LBB17:
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 138              	 .loc 1 79 0
 139              	
 140 005e 07F30707 	 ssat r7,#8,r7
 141              	
 142              	 .thumb
 143              	.LBE17:
 144              	.LBB18:
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 145              	 .loc 1 78 0
 146 0062 ED11     	 asrs r5,r5,#7
 147 0064 46EA0767 	 orr r7,r6,r7,lsl#24
 148              	
 149 0068 05F30705 	 ssat r5,#8,r5
 150              	
 151              	.LVL7:
 152              	 .thumb
 153              	.LBE18:
 154              	 .loc 1 82 0
 155 006c 2D04     	 lsls r5,r5,#16
 156              	.LVL8:
 157 006e 3C43     	 orrs r4,r4,r7
 158 0070 05F47F05 	 and r5,r5,#16711680
 159 0074 2C43     	 orrs r4,r4,r5
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 160              	 .loc 1 72 0
 161 0076 BAF1010A 	 subs r10,r10,#1
 162              	.LVL9:
 163 007a 09F10409 	 add r9,r9,#4
 164              	.LVL10:
 165              	 .loc 1 82 0
 166 007e 4BF8044B 	 str r4,[fp],#4
 167              	.LVL11:
 168 0082 08F10408 	 add r8,r8,#4
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 169              	 .loc 1 72 0
 170 0086 C7D1     	 bne .L3
 171 0088 019C     	 ldr r4,[sp,#4]
 172 008a A400     	 lsls r4,r4,#2
 173 008c 2044     	 add r0,r0,r4
 174 008e 2144     	 add r1,r1,r4
 175 0090 2244     	 add r2,r2,r4
 176              	.LVL12:
 177              	.L2:
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** No loop unrolling is used. */
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4u;
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #else
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Run the below code for Cortex-M0 */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #endif /* #if defined (ARM_MATH_DSP) */
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while (blkCnt > 0u)
 178              	 .loc 1 102 0
 179 0092 13F00303 	 ands r3,r3,#3
 180              	.LVL13:
 181 0096 0FD0     	 beq .L1
 182 0098 013A     	 subs r2,r2,#1
 183              	.LVL14:
 184 009a 0344     	 add r3,r3,r0
 185              	.LVL15:
 186              	.L5:
 187              	.LBB19:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the result in the destination buffer */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 188              	 .loc 1 106 0
 189 009c 10F9015B 	 ldrsb r5,[r0],#1
 190              	.LVL16:
 191 00a0 11F9014B 	 ldrsb r4,[r1],#1
 192              	.LVL17:
 193              	.LBE19:
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 194              	 .loc 1 102 0
 195 00a4 9842     	 cmp r0,r3
 196              	.LBB20:
 197              	 .loc 1 106 0
 198 00a6 15FB04F4 	 smulbb r4,r5,r4
 199 00aa 4FEAE414 	 asr r4,r4,#7
 200              	
 201 00ae 04F30704 	 ssat r4,#8,r4
 202              	
 203              	.LVL18:
 204              	 .thumb
 205              	.LBE20:
 206 00b2 02F8014F 	 strb r4,[r2,#1]!
 207              	.LVL19:
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 208              	 .loc 1 102 0
 209 00b6 F1D1     	 bne .L5
 210              	.LVL20:
 211              	.L1:
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** }
 212              	 .loc 1 111 0
 213 00b8 03B0     	 add sp,sp,#12
 214              	.LCFI2:
 215              	 .cfi_def_cfa_offset 36
 216              	 
 217 00ba BDE8F08F 	 pop {r4,r5,r6,r7,r8,r9,r10,fp,pc}
 218              	 .cfi_endproc
 219              	.LFE135:
 221 00be 00BF     	 .text
 222              	.Letext0:
 223              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 224              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 225              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q7.c
    {standard input}:20     .text.arm_mult_q7:00000000 $t
    {standard input}:25     .text.arm_mult_q7:00000000 arm_mult_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
