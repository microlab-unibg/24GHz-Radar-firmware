   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_shift_q15.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_shift_q15,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_shift_q15
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_shift_q15:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Title:        arm_shift_q15.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Description:  Shifts the elements of a Q15 vector by a specified number of bits
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @addtogroup shift
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @{
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @brief  Shifts the elements of a Q15 vector a specified number of bits.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  *pSrc points to the input vector
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value s
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[out]  *pDst points to the output vector
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  blockSize number of samples in the vector
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @return none.
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * <b>Scaling and Overflow Behavior:</b>
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * \par
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * The function uses saturating arithmetic.
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t * pSrc,
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   int8_t shiftBits,
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t * pDst,
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint32_t blockSize)
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** {
  28              	 .loc 1 59 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint8_t sign;                                  /* Sign of shiftBits */
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #if defined (ARM_MATH_DSP)
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t in1, in2;                                /* Temporary variables */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /*loop Unrolling */
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize >> 2u;
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* Getting the sign of shiftBits */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   sign = (shiftBits & 0x80);
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   if (sign == 0u)
  33              	 .loc 1 77 0
  34 0000 0029     	 cmp r1,#0
  35              	.LVL1:
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  36              	 .loc 1 59 0
  37 0002 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
  38              	.LCFI0:
  39              	 .cfi_def_cfa_offset 32
  40              	 .cfi_offset 4,-32
  41              	 .cfi_offset 5,-28
  42              	 .cfi_offset 6,-24
  43              	 .cfi_offset 7,-20
  44              	 .cfi_offset 8,-16
  45              	 .cfi_offset 9,-12
  46              	 .cfi_offset 10,-8
  47              	 .cfi_offset 14,-4
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  48              	 .loc 1 71 0
  49 0006 4FEA9308 	 lsr r8,r3,#2
  50              	.LVL2:
  51              	 .loc 1 77 0
  52 000a 3DDA     	 bge .L2
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift and then store the results in the destination buffer. */
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   }
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   else
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
  53              	 .loc 1 137 0
  54 000c B8F1000F 	 cmp r8,#0
  55 0010 2BD0     	 beq .L4
  56 0012 C1F10009 	 rsb r9,r1,#0
  57 0016 00F1080E 	 add lr,r0,#8
  58 001a 02F1080C 	 add ip,r2,#8
  59 001e C246     	 mov r10,r8
  60              	.LVL3:
  61              	.L10:
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
  62              	 .loc 1 147 0
  63 0020 3EF9087C 	 ldrsh r7,[lr,#-8]
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 162:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
  64              	 .loc 1 162 0
  65 0024 3EF9045C 	 ldrsh r5,[lr,#-4]
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
  66              	 .loc 1 147 0
  67 0028 3EF9066C 	 ldrsh r6,[lr,#-6]
  68              	 .loc 1 162 0
  69 002c 3EF9024C 	 ldrsh r4,[lr,#-2]
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
  70              	 .loc 1 147 0
  71 0030 47FA09F7 	 asr r7,r7,r9
  72              	 .loc 1 162 0
  73 0034 45FA09F5 	 asr r5,r5,r9
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
  74              	 .loc 1 147 0
  75 0038 BFB2     	 uxth r7,r7
  76 003a 46FA09F6 	 asr r6,r6,r9
  77              	 .loc 1 162 0
  78 003e ADB2     	 uxth r5,r5
  79 0040 44FA09F4 	 asr r4,r4,r9
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
  80              	 .loc 1 147 0
  81 0044 47EA0646 	 orr r6,r7,r6,lsl#16
  82              	 .loc 1 162 0
  83 0048 45EA0444 	 orr r4,r5,r4,lsl#16
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
  84              	 .loc 1 137 0
  85 004c BAF1010A 	 subs r10,r10,#1
  86              	.LVL4:
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
  87              	 .loc 1 147 0
  88 0050 4CF8086C 	 str r6,[ip,#-8]
  89              	.LVL5:
  90              	 .loc 1 162 0
  91 0054 4CF8044C 	 str r4,[ip,#-4]
  92              	.LVL6:
  93 0058 0EF1080E 	 add lr,lr,#8
  94              	.LVL7:
  95 005c 0CF1080C 	 add ip,ip,#8
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
  96              	 .loc 1 137 0
  97 0060 DED1     	 bne .L10
  98 0062 4FEAC808 	 lsl r8,r8,#3
  99 0066 4044     	 add r0,r0,r8
 100 0068 4244     	 add r2,r2,r8
 101              	.LVL8:
 102              	.L4:
 163:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 164:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 165:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 166:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 167:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 168:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 169:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 170:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 171:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 172:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 173:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 174:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 175:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 176:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 177:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 178:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 179:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while (blkCnt > 0u)
 103              	 .loc 1 180 0
 104 006a 13F00303 	 ands r3,r3,#3
 105              	.LVL9:
 106 006e 09D0     	 beq .L1
 107 0070 4942     	 negs r1,r1
 108 0072 023A     	 subs r2,r2,#2
 109              	.LVL10:
 110              	.L11:
 181:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 182:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 183:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 184:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 111              	 .loc 1 184 0
 112 0074 30F9024B 	 ldrsh r4,[r0],#2
 113              	.LVL11:
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 114              	 .loc 1 180 0
 115 0078 013B     	 subs r3,r3,#1
 116              	.LVL12:
 117              	 .loc 1 184 0
 118 007a 44FA01F4 	 asr r4,r4,r1
 119 007e 22F8024F 	 strh r4,[r2,#2]!
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 120              	 .loc 1 180 0
 121 0082 F7D1     	 bne .L11
 122              	.L1:
 123 0084 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 124              	.LVL13:
 125              	.L2:
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 126              	 .loc 1 81 0
 127 0088 B8F1000F 	 cmp r8,#0
 128 008c 2ED0     	 beq .L5
 129 008e 00F10806 	 add r6,r0,#8
 130 0092 02F1080C 	 add ip,r2,#8
 131 0096 C146     	 mov r9,r8
 132              	.LVL14:
 133              	.L6:
 134              	.LBB2:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 135              	 .loc 1 90 0
 136 0098 36F9085C 	 ldrsh r5,[r6,#-8]
 137              	.LBE2:
 138              	.LBB3:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 139              	 .loc 1 105 0
 140 009c 36F9044C 	 ldrsh r4,[r6,#-4]
 141              	.LBE3:
 142              	.LBB4:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 143              	 .loc 1 90 0
 144 00a0 36F906EC 	 ldrsh lr,[r6,#-6]
 145              	.LBE4:
 146              	.LBB5:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 147              	 .loc 1 105 0
 148 00a4 36F9027C 	 ldrsh r7,[r6,#-2]
 149              	.LBE5:
 150              	.LBB6:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 151              	 .loc 1 90 0
 152 00a8 8D40     	 lsls r5,r5,r1
 153              	.LVL15:
 154              	.LBE6:
 155              	.LBB7:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 156              	 .loc 1 105 0
 157 00aa 8C40     	 lsls r4,r4,r1
 158              	.LBE7:
 159              	.LBB8:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 160              	 .loc 1 90 0
 161              	
 162 00ac 05F30F05 	 ssat r5,#16,r5
 163              	
 164              	.LVL16:
 165              	 .thumb
 166              	.LBE8:
 167              	.LBB9:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 168              	 .loc 1 105 0
 169              	
 170 00b0 04F30F04 	 ssat r4,#16,r4
 171              	
 172              	 .thumb
 173              	.LBE9:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 174              	 .loc 1 90 0
 175 00b4 ADB2     	 uxth r5,r5
 176              	.LVL17:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 177              	 .loc 1 105 0
 178 00b6 A4B2     	 uxth r4,r4
 179              	.LBB10:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 180              	 .loc 1 90 0
 181 00b8 0EFA01FE 	 lsl lr,lr,r1
 182              	.LVL18:
 183              	.LBE10:
 184              	.LBB11:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 185              	 .loc 1 105 0
 186 00bc 8F40     	 lsls r7,r7,r1
 187              	.LBE11:
 188              	.LBB12:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 189              	 .loc 1 90 0
 190              	
 191 00be 0EF30F0E 	 ssat lr,#16,lr
 192              	
 193              	.LVL19:
 194              	 .thumb
 195              	.LBE12:
 196              	.LBB13:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 197              	 .loc 1 105 0
 198              	
 199 00c2 07F30F07 	 ssat r7,#16,r7
 200              	
 201              	 .thumb
 202              	.LBE13:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 203              	 .loc 1 90 0
 204 00c6 45EA0E45 	 orr r5,r5,lr,lsl#16
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 205              	 .loc 1 105 0
 206 00ca 44EA0744 	 orr r4,r4,r7,lsl#16
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 207              	 .loc 1 81 0
 208 00ce B9F10109 	 subs r9,r9,#1
 209              	.LVL20:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 210              	 .loc 1 90 0
 211 00d2 4CF8085C 	 str r5,[ip,#-8]
 212              	.LVL21:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 213              	 .loc 1 105 0
 214 00d6 4CF8044C 	 str r4,[ip,#-4]
 215              	.LVL22:
 216 00da 06F10806 	 add r6,r6,#8
 217              	.LVL23:
 218 00de 0CF1080C 	 add ip,ip,#8
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 219              	 .loc 1 81 0
 220 00e2 D9D1     	 bne .L6
 221 00e4 4FEAC808 	 lsl r8,r8,#3
 222 00e8 4044     	 add r0,r0,r8
 223 00ea 4244     	 add r2,r2,r8
 224              	.LVL24:
 225              	.L5:
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 226              	 .loc 1 123 0
 227 00ec 13F00303 	 ands r3,r3,#3
 228              	.LVL25:
 229 00f0 C8D0     	 beq .L1
 230 00f2 023A     	 subs r2,r2,#2
 231              	.LVL26:
 232              	.L8:
 233              	.LBB14:
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 234              	 .loc 1 127 0
 235 00f4 30F9024B 	 ldrsh r4,[r0],#2
 236              	.LVL27:
 237              	.LBE14:
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 238              	 .loc 1 123 0
 239 00f8 013B     	 subs r3,r3,#1
 240              	.LVL28:
 241              	.LBB15:
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 242              	 .loc 1 127 0
 243 00fa 04FA01F4 	 lsl r4,r4,r1
 244              	
 245 00fe 04F30F04 	 ssat r4,#16,r4
 246              	
 247              	.LVL29:
 248              	 .thumb
 249              	.LBE15:
 250 0102 22F8024F 	 strh r4,[r2,#2]!
 251              	.LVL30:
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 252              	 .loc 1 123 0
 253 0106 F5D1     	 bne .L8
 254 0108 BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 255              	 .cfi_endproc
 256              	.LFE135:
 258              	 .text
 259              	.Letext0:
 260              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 261              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 262              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_shift_q15.c
    {standard input}:20     .text.arm_shift_q15:00000000 $t
    {standard input}:25     .text.arm_shift_q15:00000000 arm_shift_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
