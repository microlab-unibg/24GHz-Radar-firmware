   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "arm_add_f32.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.arm_add_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_add_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_add_f32:
  26              	.LFB135:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Project:      CMSIS DSP Library
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Title:        arm_add_f32.c
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Description:  Floating-point vector addition
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * $Date:        27. January 2017
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * $Revision:    V.1.5.1
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Target Processor: Cortex-M cores
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * -------------------------------------------------------------------- */
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /*
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * not use this file except in compliance with the License.
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * You may obtain a copy of the License at
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * See the License for the specific language governing permissions and
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * limitations under the License.
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  */
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /**
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @ingroup groupMath
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  */
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /**
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @defgroup BasicAdd Vector Addition
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * Element-by-element addition of two vectors.
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * <pre>
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *     pDst[n] = pSrcA[n] + pSrcB[n],   0 <= n < blockSize.
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * </pre>
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  *
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /**
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @addtogroup BasicAdd
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @{
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /**
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @brief Floating-point vector addition.
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       *pSrcA points to the first input vector
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       *pSrcB points to the second input vector
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @param[out]      *pDst points to the output vector
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @param[in]       blockSize number of samples in each vector
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  * @return none.
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** void arm_add_f32(
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   float32_t * pSrcA,
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   float32_t * pSrcB,
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   float32_t * pDst,
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   uint32_t blockSize)
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** {
  28              	 .loc 1 66 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	.LVL0:
  33 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 20
  36              	 .cfi_offset 4,-20
  37              	 .cfi_offset 5,-16
  38              	 .cfi_offset 6,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** #if defined (ARM_MATH_DSP)
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   float32_t inA1, inA2, inA3, inA4;              /* temporary input variabels */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   /*loop Unrolling */
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize >> 2u;
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0u)
  41              	 .loc 1 80 0
  42 0002 5FEA930E 	 lsrs lr,r3,#2
  43              	.LVL1:
  44 0006 33D0     	 beq .L2
  45 0008 00F11006 	 add r6,r0,#16
  46 000c 01F11005 	 add r5,r1,#16
  47 0010 02F11004 	 add r4,r2,#16
  48 0014 7746     	 mov r7,lr
  49              	.LVL2:
  50              	.L3:
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* Add and then store the results in the destination buffer. */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* read four inputs from sourceA and four inputs from sourceB */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inA1 = *pSrcA;
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inB1 = *pSrcB;
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inA2 = *(pSrcA + 1);
  51              	 .loc 1 88 0
  52 0016 16ED036A 	 flds s12,[r6,#-12]
  53              	.LVL3:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inB2 = *(pSrcB + 1);
  54              	 .loc 1 89 0
  55 001a 15ED034A 	 flds s8,[r5,#-12]
  56              	.LVL4:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inA3 = *(pSrcA + 2);
  57              	 .loc 1 90 0
  58 001e 56ED026A 	 flds s13,[r6,#-8]
  59              	.LVL5:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inB3 = *(pSrcB + 2);
  60              	 .loc 1 91 0
  61 0022 55ED024A 	 flds s9,[r5,#-8]
  62              	.LVL6:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inA4 = *(pSrcA + 3);
  63              	 .loc 1 92 0
  64 0026 16ED017A 	 flds s14,[r6,#-4]
  65              	.LVL7:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     inB4 = *(pSrcB + 3);
  66              	 .loc 1 93 0
  67 002a 15ED015A 	 flds s10,[r5,#-4]
  68              	.LVL8:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* add and store result to destination */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *pDst = inA1 + inB1;
  69              	 .loc 1 97 0
  70 002e 56ED047A 	 flds s15,[r6,#-16]
  71 0032 55ED045A 	 flds s11,[r5,#-16]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 1) = inA2 + inB2;
  72              	 .loc 1 98 0
  73 0036 36EE046A 	 fadds s12,s12,s8
  74              	.LVL9:
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 2) = inA3 + inB3;
  75              	 .loc 1 99 0
  76 003a 76EEA46A 	 fadds s13,s13,s9
  77              	.LVL10:
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 3) = inA4 + inB4;
  78              	 .loc 1 100 0
  79 003e 37EE057A 	 fadds s14,s14,s10
  80              	.LVL11:
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 1) = inA2 + inB2;
  81              	 .loc 1 97 0
  82 0042 77EEA57A 	 fadds s15,s15,s11
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
  83              	 .loc 1 80 0
  84 0046 013F     	 subs r7,r7,#1
  85              	.LVL12:
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 2) = inA3 + inB3;
  86              	 .loc 1 98 0
  87 0048 04ED036A 	 fsts s12,[r4,#-12]
  88              	.LVL13:
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 3) = inA4 + inB4;
  89              	 .loc 1 99 0
  90 004c 44ED026A 	 fsts s13,[r4,#-8]
  91              	 .loc 1 100 0
  92 0050 04ED017A 	 fsts s14,[r4,#-4]
  93              	.LVL14:
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *(pDst + 1) = inA2 + inB2;
  94              	 .loc 1 97 0
  95 0054 44ED047A 	 fsts s15,[r4,#-16]
  96 0058 06F11006 	 add r6,r6,#16
  97 005c 05F11005 	 add r5,r5,#16
  98 0060 04F11004 	 add r4,r4,#16
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
  99              	 .loc 1 80 0
 100 0064 D7D1     	 bne .L3
 101 0066 4FEA0E14 	 lsl r4,lr,#4
 102 006a 2044     	 add r0,r0,r4
 103 006c 2144     	 add r1,r1,r4
 104 006e 2244     	 add r2,r2,r4
 105              	.LVL15:
 106              	.L2:
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* update pointers to process next samples */
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     pSrcA += 4u;
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     pSrcB += 4u;
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     pDst += 4u;
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* Decrement the loop counter */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     blkCnt--;
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   }
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****    ** No loop unrolling is used. */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize % 0x4u;
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** #else
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   /* Run the below code for Cortex-M0 */
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   /* Initialize blkCnt with number of samples */
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   blkCnt = blockSize;
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** #endif /* #if defined (ARM_MATH_DSP) */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   while (blkCnt > 0u)
 107              	 .loc 1 125 0
 108 0070 13F00303 	 ands r3,r3,#3
 109              	.LVL16:
 110 0074 09D0     	 beq .L1
 111              	.LVL17:
 112              	.L5:
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* C = A + B */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     /* Add and then store the results in the destination buffer. */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****     *pDst++ = (*pSrcA++) + (*pSrcB++);
 113              	 .loc 1 129 0
 114 0076 F0EC017A 	 fldmias r0!,{s15}
 115              	.LVL18:
 116 007a B1EC017A 	 fldmias r1!,{s14}
 117              	.LVL19:
 118 007e 77EE877A 	 fadds s15,s15,s14
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
 119              	 .loc 1 125 0
 120 0082 013B     	 subs r3,r3,#1
 121              	.LVL20:
 122              	 .loc 1 129 0
 123 0084 E2EC017A 	 fstmias r2!,{s15}
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_add_f32.c ****   {
 124              	 .loc 1 125 0
 125 0088 F5D1     	 bne .L5
 126              	.L1:
 127 008a F0BD     	 pop {r4,r5,r6,r7,pc}
 128              	 .cfi_endproc
 129              	.LFE135:
 131              	 .text
 132              	.Letext0:
 133              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 134              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 135              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_add_f32.c
    {standard input}:20     .text.arm_add_f32:00000000 $t
    {standard input}:25     .text.arm_add_f32:00000000 arm_add_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
