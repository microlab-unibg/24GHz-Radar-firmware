   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,2
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "crc_sw.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.CRC_SW_GetAppVersion,"ax",%progbits
  20              	 .align 2
  21              	 .global CRC_SW_GetAppVersion
  22              	 .thumb
  23              	 .thumb_func
  25              	CRC_SW_GetAppVersion:
  26              	.LFB129:
  27              	 .file 1 "../Dave/Generated/CRC_SW/crc_sw.c"
   1:../Dave/Generated/CRC_SW/crc_sw.c **** /**
   2:../Dave/Generated/CRC_SW/crc_sw.c ****  * @file crc_sw.c
   3:../Dave/Generated/CRC_SW/crc_sw.c ****  * @date 2019-09-19
   4:../Dave/Generated/CRC_SW/crc_sw.c ****  *
   5:../Dave/Generated/CRC_SW/crc_sw.c ****  * NOTE:
   6:../Dave/Generated/CRC_SW/crc_sw.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/CRC_SW/crc_sw.c ****  */
   8:../Dave/Generated/CRC_SW/crc_sw.c **** /**
   9:../Dave/Generated/CRC_SW/crc_sw.c ****  * @cond
  10:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  11:../Dave/Generated/CRC_SW/crc_sw.c ****  * CRC_SW v4.0.10 - computes CRC for a given data
  12:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  13:../Dave/Generated/CRC_SW/crc_sw.c ****  * Copyright (c) 2015-2019, Infineon Technologies AG
  14:../Dave/Generated/CRC_SW/crc_sw.c ****  * All rights reserved.
  15:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  16:../Dave/Generated/CRC_SW/crc_sw.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:../Dave/Generated/CRC_SW/crc_sw.c ****  * following conditions are met:
  18:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  19:../Dave/Generated/CRC_SW/crc_sw.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:../Dave/Generated/CRC_SW/crc_sw.c ****  *   disclaimer.
  21:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  22:../Dave/Generated/CRC_SW/crc_sw.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:../Dave/Generated/CRC_SW/crc_sw.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  25:../Dave/Generated/CRC_SW/crc_sw.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:../Dave/Generated/CRC_SW/crc_sw.c ****  *   products derived from this software without specific prior written permission.
  27:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  28:../Dave/Generated/CRC_SW/crc_sw.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:../Dave/Generated/CRC_SW/crc_sw.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:../Dave/Generated/CRC_SW/crc_sw.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:../Dave/Generated/CRC_SW/crc_sw.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:../Dave/Generated/CRC_SW/crc_sw.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:../Dave/Generated/CRC_SW/crc_sw.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:../Dave/Generated/CRC_SW/crc_sw.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  36:../Dave/Generated/CRC_SW/crc_sw.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:../Dave/Generated/CRC_SW/crc_sw.c ****  * with Infineon Technologies AG (dave@infineon.com).
  38:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  39:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  40:../Dave/Generated/CRC_SW/crc_sw.c ****  * Change History
  41:../Dave/Generated/CRC_SW/crc_sw.c ****  * --------------
  42:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  43:../Dave/Generated/CRC_SW/crc_sw.c ****  * 2015-02-16:
  44:../Dave/Generated/CRC_SW/crc_sw.c ****  *     - Initial version<br>
  45:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  46:../Dave/Generated/CRC_SW/crc_sw.c ****  * 2015-05-20:
  47:../Dave/Generated/CRC_SW/crc_sw.c ****  *     - Optimized four APIs to two APIs(CRC_SW_lCalculateCRC_xmc4_refin,CRC_SW_lCalculateCRC_xmc1_
  48:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  49:../Dave/Generated/CRC_SW/crc_sw.c ****  * 2019-09-19:
  50:../Dave/Generated/CRC_SW/crc_sw.c ****  *     - Added CRC_SW_UpdateCRC()
  51:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  52:../Dave/Generated/CRC_SW/crc_sw.c ****  * @endcond
  53:../Dave/Generated/CRC_SW/crc_sw.c ****  *
  54:../Dave/Generated/CRC_SW/crc_sw.c ****  */
  55:../Dave/Generated/CRC_SW/crc_sw.c **** 
  56:../Dave/Generated/CRC_SW/crc_sw.c **** /**************************************************************************************************
  57:../Dave/Generated/CRC_SW/crc_sw.c ****  * HEADER FILES
  58:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  59:../Dave/Generated/CRC_SW/crc_sw.c **** #include "crc_sw.h"
  60:../Dave/Generated/CRC_SW/crc_sw.c **** 
  61:../Dave/Generated/CRC_SW/crc_sw.c **** /**************************************************************************************************
  62:../Dave/Generated/CRC_SW/crc_sw.c ****  * MACROS
  63:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  64:../Dave/Generated/CRC_SW/crc_sw.c **** 
  65:../Dave/Generated/CRC_SW/crc_sw.c **** /**************************************************************************************************
  66:../Dave/Generated/CRC_SW/crc_sw.c ****  * LOCAL DATA
  67:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  68:../Dave/Generated/CRC_SW/crc_sw.c **** 
  69:../Dave/Generated/CRC_SW/crc_sw.c **** /**************************************************************************************************
  70:../Dave/Generated/CRC_SW/crc_sw.c ****  * LOCAL ROUTINES
  71:../Dave/Generated/CRC_SW/crc_sw.c ****  **************************************************************************************************
  72:../Dave/Generated/CRC_SW/crc_sw.c **** static uint32_t CRC_SW_lReflect(uint32_t data, uint32_t length);
  73:../Dave/Generated/CRC_SW/crc_sw.c **** 
  74:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC4)
  75:../Dave/Generated/CRC_SW/crc_sw.c **** static void CRC_SW_lCalculateCRC_xmc4_refin(CRC_SW_t *const handle, void * bufferptr, uint32_t leng
  76:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
  77:../Dave/Generated/CRC_SW/crc_sw.c **** 
  78:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC1)
  79:../Dave/Generated/CRC_SW/crc_sw.c **** static void CRC_SW_lCalculateCRC_xmc1_refin(CRC_SW_t *const handle, void * bufferptr, uint32_t leng
  80:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
  81:../Dave/Generated/CRC_SW/crc_sw.c **** 
  82:../Dave/Generated/CRC_SW/crc_sw.c **** 
  83:../Dave/Generated/CRC_SW/crc_sw.c **** /**************************************************************************************************
  84:../Dave/Generated/CRC_SW/crc_sw.c **** * API IMPLEMENTATION
  85:../Dave/Generated/CRC_SW/crc_sw.c **** ***************************************************************************************************
  86:../Dave/Generated/CRC_SW/crc_sw.c **** /*
  87:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function reverses all bits of data
  88:../Dave/Generated/CRC_SW/crc_sw.c **** */
  89:../Dave/Generated/CRC_SW/crc_sw.c **** static uint32_t CRC_SW_lReflect(uint32_t data, uint32_t length)
  90:../Dave/Generated/CRC_SW/crc_sw.c **** {
  91:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t count;
  92:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t retval;
  93:../Dave/Generated/CRC_SW/crc_sw.c **** 
  94:../Dave/Generated/CRC_SW/crc_sw.c ****   retval = data & CRC_SW_ONE;
  95:../Dave/Generated/CRC_SW/crc_sw.c ****   
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   for (count = CRC_SW_ONE; count < length ; count++)
  97:../Dave/Generated/CRC_SW/crc_sw.c ****   {
  98:../Dave/Generated/CRC_SW/crc_sw.c ****     data >>= CRC_SW_ONE;
  99:../Dave/Generated/CRC_SW/crc_sw.c ****     retval = (retval << CRC_SW_ONE) | (data & CRC_SW_ONE);
 100:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 101:../Dave/Generated/CRC_SW/crc_sw.c **** 
 102:../Dave/Generated/CRC_SW/crc_sw.c ****   return retval;
 103:../Dave/Generated/CRC_SW/crc_sw.c **** }
 104:../Dave/Generated/CRC_SW/crc_sw.c **** 
 105:../Dave/Generated/CRC_SW/crc_sw.c **** /*
 106:../Dave/Generated/CRC_SW/crc_sw.c ****  * API to retrieve the version of the CRC_SW APP
 107:../Dave/Generated/CRC_SW/crc_sw.c ****  */
 108:../Dave/Generated/CRC_SW/crc_sw.c **** DAVE_APP_VERSION_t CRC_SW_GetAppVersion(void)
 109:../Dave/Generated/CRC_SW/crc_sw.c **** {
  28              	 .loc 1 109 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33              	.LVL0:
 110:../Dave/Generated/CRC_SW/crc_sw.c ****   DAVE_APP_VERSION_t version;
 111:../Dave/Generated/CRC_SW/crc_sw.c **** 
 112:../Dave/Generated/CRC_SW/crc_sw.c ****   version.major = CRC_SW_MAJOR_VERSION;
 113:../Dave/Generated/CRC_SW/crc_sw.c ****   version.minor = CRC_SW_MINOR_VERSION;
 114:../Dave/Generated/CRC_SW/crc_sw.c ****   version.patch = CRC_SW_PATCH_VERSION;
 115:../Dave/Generated/CRC_SW/crc_sw.c **** 
 116:../Dave/Generated/CRC_SW/crc_sw.c ****   return (version);
  34              	 .loc 1 116 0
  35 0000 0023     	 movs r3,#0
  36 0002 1846     	 mov r0,r3
  37 0004 0422     	 movs r2,#4
  38 0006 62F30700 	 bfi r0,r2,#0,#8
  39 000a 63F30F20 	 bfi r0,r3,#8,#8
  40 000e 0A23     	 movs r3,#10
  41 0010 63F31740 	 bfi r0,r3,#16,#8
 109:../Dave/Generated/CRC_SW/crc_sw.c ****   DAVE_APP_VERSION_t version;
  42              	 .loc 1 109 0
  43 0014 82B0     	 sub sp,sp,#8
  44              	.LCFI0:
  45              	 .cfi_def_cfa_offset 8
 117:../Dave/Generated/CRC_SW/crc_sw.c **** }
  46              	 .loc 1 117 0
  47 0016 02B0     	 add sp,sp,#8
  48              	.LCFI1:
  49              	 .cfi_def_cfa_offset 0
  50              	 
  51 0018 7047     	 bx lr
  52              	 .cfi_endproc
  53              	.LFE129:
  55 001a 00BF     	 .section .text.CRC_SW_Init,"ax",%progbits
  56              	 .align 2
  57              	 .global CRC_SW_Init
  58              	 .thumb
  59              	 .thumb_func
  61              	CRC_SW_Init:
  62              	.LFB130:
 118:../Dave/Generated/CRC_SW/crc_sw.c **** 
 119:../Dave/Generated/CRC_SW/crc_sw.c **** /*
 120:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function initializes CRC_SW handle.
 121:../Dave/Generated/CRC_SW/crc_sw.c ****  *
 122:../Dave/Generated/CRC_SW/crc_sw.c **** */
 123:../Dave/Generated/CRC_SW/crc_sw.c **** CRC_SW_STATUS_t CRC_SW_Init(CRC_SW_t *const handle)
 124:../Dave/Generated/CRC_SW/crc_sw.c **** {
  63              	 .loc 1 124 0
  64              	 .cfi_startproc
  65              	 
  66              	 
  67              	 
  68              	.LVL1:
 125:../Dave/Generated/CRC_SW/crc_sw.c ****   CRC_SW_STATUS_t status;
 126:../Dave/Generated/CRC_SW/crc_sw.c **** 
 127:../Dave/Generated/CRC_SW/crc_sw.c ****   if (handle != NULL)
  69              	 .loc 1 127 0
  70 0000 0346     	 mov r3,r0
  71 0002 A0B1     	 cbz r0,.L5
 124:../Dave/Generated/CRC_SW/crc_sw.c ****   CRC_SW_STATUS_t status;
  72              	 .loc 1 124 0
  73 0004 70B4     	 push {r4,r5,r6}
  74              	.LCFI2:
  75              	 .cfi_def_cfa_offset 12
  76              	 .cfi_offset 4,-12
  77              	 .cfi_offset 5,-8
  78              	 .cfi_offset 6,-4
 128:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 129:../Dave/Generated/CRC_SW/crc_sw.c ****     /* calculate MSB mask, CRC Mask and shift from polynomial width */
 130:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->msb_mask = (uint32_t)(CRC_SW_ONE << (handle->config->crc_width - CRC_SW_ONE));
  79              	 .loc 1 130 0
  80 0006 0468     	 ldr r4,[r0]
  81 0008 2168     	 ldr r1,[r4]
 131:../Dave/Generated/CRC_SW/crc_sw.c **** 
 132:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_mask = (uint32_t)((handle->msb_mask - CRC_SW_ONE) | (handle->msb_mask));
 133:../Dave/Generated/CRC_SW/crc_sw.c **** 
 134:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_shift = CRC_SW_ZERO;
 135:../Dave/Generated/CRC_SW/crc_sw.c **** 
 136:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->config->output_reflection &= handle->crc_mask;
  82              	 .loc 1 136 0
  83 000a 627C     	 ldrb r2,[r4,#17]
 137:../Dave/Generated/CRC_SW/crc_sw.c **** 
 138:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval = handle->config->crc_initval;
  84              	 .loc 1 138 0
  85 000c A668     	 ldr r6,[r4,#8]
 130:../Dave/Generated/CRC_SW/crc_sw.c **** 
  86              	 .loc 1 130 0
  87 000e 481E     	 subs r0,r1,#1
  88              	.LVL2:
  89 0010 0121     	 movs r1,#1
  90 0012 8140     	 lsls r1,r1,r0
 132:../Dave/Generated/CRC_SW/crc_sw.c **** 
  91              	 .loc 1 132 0
  92 0014 4D1E     	 subs r5,r1,#1
  93 0016 0D43     	 orrs r5,r5,r1
 136:../Dave/Generated/CRC_SW/crc_sw.c **** 
  94              	 .loc 1 136 0
  95 0018 2A40     	 ands r2,r2,r5
 134:../Dave/Generated/CRC_SW/crc_sw.c **** 
  96              	 .loc 1 134 0
  97 001a 0020     	 movs r0,#0
 136:../Dave/Generated/CRC_SW/crc_sw.c **** 
  98              	 .loc 1 136 0
  99 001c 02F00102 	 and r2,r2,#1
 132:../Dave/Generated/CRC_SW/crc_sw.c **** 
 100              	 .loc 1 132 0
 101 0020 DD60     	 str r5,[r3,#12]
 130:../Dave/Generated/CRC_SW/crc_sw.c **** 
 102              	 .loc 1 130 0
 103 0022 9960     	 str r1,[r3,#8]
 134:../Dave/Generated/CRC_SW/crc_sw.c **** 
 104              	 .loc 1 134 0
 105 0024 1861     	 str r0,[r3,#16]
 136:../Dave/Generated/CRC_SW/crc_sw.c **** 
 106              	 .loc 1 136 0
 107 0026 6274     	 strb r2,[r4,#17]
 108              	 .loc 1 138 0
 109 0028 5E60     	 str r6,[r3,#4]
 110              	.LVL3:
 139:../Dave/Generated/CRC_SW/crc_sw.c **** 
 140:../Dave/Generated/CRC_SW/crc_sw.c ****     status = CRC_SW_STATUS_SUCCESS;
 141:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 142:../Dave/Generated/CRC_SW/crc_sw.c ****   else
 143:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 144:../Dave/Generated/CRC_SW/crc_sw.c ****     status = CRC_SW_STATUS_FAILURE;
 145:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 146:../Dave/Generated/CRC_SW/crc_sw.c **** 
 147:../Dave/Generated/CRC_SW/crc_sw.c ****   return (status);
 148:../Dave/Generated/CRC_SW/crc_sw.c **** }
 111              	 .loc 1 148 0
 112 002a 70BC     	 pop {r4,r5,r6}
 113              	.LCFI3:
 114              	 .cfi_restore 6
 115              	 .cfi_restore 5
 116              	 .cfi_restore 4
 117              	 .cfi_def_cfa_offset 0
 118 002c 7047     	 bx lr
 119              	.LVL4:
 120              	.L5:
 144:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 121              	 .loc 1 144 0
 122 002e 0120     	 movs r0,#1
 123              	.LVL5:
 124 0030 7047     	 bx lr
 125              	 .cfi_endproc
 126              	.LFE130:
 128 0032 00BF     	 .section .text.CRC_SW_CalculateCRC,"ax",%progbits
 129              	 .align 2
 130              	 .global CRC_SW_CalculateCRC
 131              	 .thumb
 132              	 .thumb_func
 134              	CRC_SW_CalculateCRC:
 135              	.LFB131:
 149:../Dave/Generated/CRC_SW/crc_sw.c **** 
 150:../Dave/Generated/CRC_SW/crc_sw.c **** /*
 151:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function calculates CRC on a block of data.
 152:../Dave/Generated/CRC_SW/crc_sw.c ****  */
 153:../Dave/Generated/CRC_SW/crc_sw.c **** void CRC_SW_CalculateCRC(CRC_SW_t *const handle, void * bufferptr, uint32_t length)
 154:../Dave/Generated/CRC_SW/crc_sw.c **** {
 136              	 .loc 1 154 0
 137              	 .cfi_startproc
 138              	 
 139              	 
 140              	.LVL6:
 141 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 142              	.LCFI4:
 143              	 .cfi_def_cfa_offset 24
 144              	 .cfi_offset 4,-24
 145              	 .cfi_offset 5,-20
 146              	 .cfi_offset 6,-16
 147              	 .cfi_offset 7,-12
 148              	 .cfi_offset 8,-8
 149              	 .cfi_offset 14,-4
 155:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CalculateCRC: NULL Handle", handle != NULL);
 156:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CalculateCRC: NULL Buffer", bufferptr != NULL);
 157:../Dave/Generated/CRC_SW/crc_sw.c **** 
 158:../Dave/Generated/CRC_SW/crc_sw.c ****   /* Load the initial CRC value as running value for CRC */
 159:../Dave/Generated/CRC_SW/crc_sw.c ****   handle->crc_runningval = handle->config->crc_initval;
 150              	 .loc 1 159 0
 151 0004 0468     	 ldr r4,[r0]
 152 0006 A368     	 ldr r3,[r4,#8]
 153 0008 4360     	 str r3,[r0,#4]
 154              	.LVL7:
 155              	.LBB6:
 156              	.LBB7:
 160:../Dave/Generated/CRC_SW/crc_sw.c **** 
 161:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC4)
 162:../Dave/Generated/CRC_SW/crc_sw.c ****     CRC_SW_lCalculateCRC_xmc4_refin(handle, bufferptr, length);
 163:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 164:../Dave/Generated/CRC_SW/crc_sw.c **** 
 165:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC1)
 166:../Dave/Generated/CRC_SW/crc_sw.c ****     CRC_SW_lCalculateCRC_xmc1_refin(handle, bufferptr, length);
 167:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 168:../Dave/Generated/CRC_SW/crc_sw.c **** }
 169:../Dave/Generated/CRC_SW/crc_sw.c **** 
 170:../Dave/Generated/CRC_SW/crc_sw.c **** void CRC_SW_UpdateCRC(CRC_SW_t *const handle, uint32_t input)
 171:../Dave/Generated/CRC_SW/crc_sw.c **** {
 172:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CRC_SW_UpdateCRC: NULL Handle", handle != NULL);
 173:../Dave/Generated/CRC_SW/crc_sw.c **** 
 174:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC4)
 175:../Dave/Generated/CRC_SW/crc_sw.c ****     CRC_SW_lCalculateCRC_xmc4_refin(handle, &input, 1);
 176:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 177:../Dave/Generated/CRC_SW/crc_sw.c **** 
 178:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC1)
 179:../Dave/Generated/CRC_SW/crc_sw.c ****     CRC_SW_lCalculateCRC_xmc1_refin(handle, &input, 1);
 180:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 181:../Dave/Generated/CRC_SW/crc_sw.c **** }
 182:../Dave/Generated/CRC_SW/crc_sw.c **** 
 183:../Dave/Generated/CRC_SW/crc_sw.c **** /*
 184:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function calculates CRC when input reflection is enabled for xmc4.
 185:../Dave/Generated/CRC_SW/crc_sw.c ****  */
 186:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC4)
 187:../Dave/Generated/CRC_SW/crc_sw.c **** static void CRC_SW_lCalculateCRC_xmc4_refin(CRC_SW_t *const handle, void * bufferptr, uint32_t leng
 188:../Dave/Generated/CRC_SW/crc_sw.c **** {
 189:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t tableindex;
 190:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t buffer;
 191:../Dave/Generated/CRC_SW/crc_sw.c ****   uint8_t *temp;
 192:../Dave/Generated/CRC_SW/crc_sw.c ****   
 193:../Dave/Generated/CRC_SW/crc_sw.c ****   temp = (uint8_t *)bufferptr;
 194:../Dave/Generated/CRC_SW/crc_sw.c **** 
 195:../Dave/Generated/CRC_SW/crc_sw.c ****   while (length--)
 157              	 .loc 1 195 0
 158 000a 002A     	 cmp r2,#0
 159 000c 38D0     	 beq .L9
 160 000e D0F810E0 	 ldr lr,[r0,#16]
 161 0012 C568     	 ldr r5,[r0,#12]
 162 0014 94F810C0 	 ldrb ip,[r4,#16]
 163 0018 4669     	 ldr r6,[r0,#20]
 164 001a 8769     	 ldr r7,[r0,#24]
 165 001c 05FA0EF5 	 lsl r5,r5,lr
 166 0020 BCF1000F 	 cmp ip,#0
 167 0024 1AD1     	 bne .L11
 196:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 197:../Dave/Generated/CRC_SW/crc_sw.c ****     buffer = (uint32_t) *temp;
 198:../Dave/Generated/CRC_SW/crc_sw.c **** 
 199:../Dave/Generated/CRC_SW/crc_sw.c ****     /* if input reflection is set */
 200:../Dave/Generated/CRC_SW/crc_sw.c ****     if (handle->config->input_reflection == true)
 201:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 202:../Dave/Generated/CRC_SW/crc_sw.c ****       tableindex = ((handle->crc_runningval >> handle->crc_shift) ^ buffer) & (int32_t)0xff;
 203:../Dave/Generated/CRC_SW/crc_sw.c **** 
 204:../Dave/Generated/CRC_SW/crc_sw.c ****       /* compute the CRC running value from the lookup table */
 205:../Dave/Generated/CRC_SW/crc_sw.c ****       handle->crc_runningval = (*(uint32_t*)((uint32_t)handle->crctable + (tableindex * handle->tab
 206:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 207:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 208:../Dave/Generated/CRC_SW/crc_sw.c ****     else
 209:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 210:../Dave/Generated/CRC_SW/crc_sw.c ****       /* load the lookup table value based on CRC width */
 211:../Dave/Generated/CRC_SW/crc_sw.c ****       tableindex = ((handle->crc_runningval >> ((handle->config->crc_width - CRC_SW_EIGHT) +
 168              	 .loc 1 211 0
 169 0026 2468     	 ldr r4,[r4]
 170 0028 0EEB040C 	 add ip,lr,r4
 171 002c ACF1080C 	 sub ip,ip,#8
 172 0030 0A44     	 add r2,r2,r1
 173              	.LVL8:
 174 0032 CEF1080E 	 rsb lr,lr,#8
 175              	.LVL9:
 176              	.L12:
 197:../Dave/Generated/CRC_SW/crc_sw.c **** 
 177              	 .loc 1 197 0
 178 0036 11F8018B 	 ldrb r8,[r1],#1
 179              	.LVL10:
 180              	 .loc 1 211 0
 181 003a 23FA0CF4 	 lsr r4,r3,ip
 212:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 182              	 .loc 1 212 0
 183 003e 88EA0404 	 eor r4,r8,r4
 211:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 184              	 .loc 1 211 0
 185 0042 E4B2     	 uxtb r4,r4
 213:../Dave/Generated/CRC_SW/crc_sw.c **** 
 214:../Dave/Generated/CRC_SW/crc_sw.c ****       /* compute the CRC running value from the lookup table */
 215:../Dave/Generated/CRC_SW/crc_sw.c ****       handle->crc_runningval = (*(uint32_t *)((uint32_t)handle->crctable + (tableindex * handle->ta
 186              	 .loc 1 215 0
 187 0044 07FB04F4 	 mul r4,r7,r4
 216:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 188              	 .loc 1 216 0
 189 0048 03FA0EF3 	 lsl r3,r3,lr
 190              	.LVL11:
 215:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 191              	 .loc 1 215 0
 192 004c A459     	 ldr r4,[r4,r6]
 193 004e 6340     	 eors r3,r3,r4
 194              	 .loc 1 216 0
 195 0050 2B40     	 ands r3,r3,r5
 195:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 196              	 .loc 1 195 0
 197 0052 9142     	 cmp r1,r2
 198 0054 4360     	 str r3,[r0,#4]
 199              	.LVL12:
 200 0056 EED1     	 bne .L12
 201 0058 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 202              	.LVL13:
 203              	.L11:
 204 005c 0A44     	 add r2,r2,r1
 205              	.LVL14:
 206              	.L14:
 197:../Dave/Generated/CRC_SW/crc_sw.c **** 
 207              	 .loc 1 197 0
 208 005e 11F801CB 	 ldrb ip,[r1],#1
 209              	.LVL15:
 202:../Dave/Generated/CRC_SW/crc_sw.c **** 
 210              	 .loc 1 202 0
 211 0062 23FA0EF4 	 lsr r4,r3,lr
 212 0066 8CEA0404 	 eor r4,ip,r4
 213 006a E4B2     	 uxtb r4,r4
 205:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 214              	 .loc 1 205 0
 215 006c 07FB04F4 	 mul r4,r7,r4
 195:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 216              	 .loc 1 195 0
 217 0070 9142     	 cmp r1,r2
 205:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 218              	 .loc 1 205 0
 219 0072 A459     	 ldr r4,[r4,r6]
 220 0074 84EA1323 	 eor r3,r4,r3,lsr#8
 221              	.LVL16:
 206:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 222              	 .loc 1 206 0
 223 0078 03EA0503 	 and r3,r3,r5
 224 007c 4360     	 str r3,[r0,#4]
 225              	.LVL17:
 195:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 226              	 .loc 1 195 0
 227 007e EED1     	 bne .L14
 228              	.LVL18:
 229              	.L9:
 230 0080 BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 231              	.LBE7:
 232              	.LBE6:
 233              	 .cfi_endproc
 234              	.LFE131:
 236              	 .section .text.CRC_SW_UpdateCRC,"ax",%progbits
 237              	 .align 2
 238              	 .global CRC_SW_UpdateCRC
 239              	 .thumb
 240              	 .thumb_func
 242              	CRC_SW_UpdateCRC:
 243              	.LFB132:
 171:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CRC_SW_UpdateCRC: NULL Handle", handle != NULL);
 244              	 .loc 1 171 0
 245              	 .cfi_startproc
 246              	 
 247              	 
 248              	 
 249              	.LVL19:
 250 0000 F0B4     	 push {r4,r5,r6,r7}
 251              	.LCFI5:
 252              	 .cfi_def_cfa_offset 16
 253              	 .cfi_offset 4,-16
 254              	 .cfi_offset 5,-12
 255              	 .cfi_offset 6,-8
 256              	 .cfi_offset 7,-4
 257              	.LBB10:
 258              	.LBB11:
 200:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 259              	 .loc 1 200 0
 260 0002 0368     	 ldr r3,[r0]
 261              	.LBE11:
 262              	.LBE10:
 171:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CRC_SW_UpdateCRC: NULL Handle", handle != NULL);
 263              	 .loc 1 171 0
 264 0004 82B0     	 sub sp,sp,#8
 265              	.LCFI6:
 266              	 .cfi_def_cfa_offset 24
 267              	.LVL20:
 268              	.LBB15:
 269              	.LBB12:
 200:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 270              	 .loc 1 200 0
 271 0006 1A7C     	 ldrb r2,[r3,#16]
 272              	.LBE12:
 273              	.LBE15:
 171:../Dave/Generated/CRC_SW/crc_sw.c ****   XMC_ASSERT("CRC_SW_UpdateCRC: NULL Handle", handle != NULL);
 274              	 .loc 1 171 0
 275 0008 0191     	 str r1,[sp,#4]
 276              	.LBB16:
 277              	.LBB13:
 197:../Dave/Generated/CRC_SW/crc_sw.c **** 
 278              	 .loc 1 197 0
 279 000a C9B2     	 uxtb r1,r1
 280              	.LVL21:
 200:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 281              	 .loc 1 200 0
 282 000c C2B9     	 cbnz r2,.L19
 211:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 283              	 .loc 1 211 0
 284 000e 1A68     	 ldr r2,[r3]
 212:../Dave/Generated/CRC_SW/crc_sw.c **** 
 285              	 .loc 1 212 0
 286 0010 0769     	 ldr r7,[r0,#16]
 211:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 287              	 .loc 1 211 0
 288 0012 4668     	 ldr r6,[r0,#4]
 289              	.LVL22:
 215:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 290              	 .loc 1 215 0
 291 0014 8469     	 ldr r4,[r0,#24]
 292 0016 4569     	 ldr r5,[r0,#20]
 217:../Dave/Generated/CRC_SW/crc_sw.c ****                                  ((handle->crc_mask) << handle->crc_shift);
 293              	 .loc 1 217 0
 294 0018 C368     	 ldr r3,[r0,#12]
 295              	.LVL23:
 211:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 296              	 .loc 1 211 0
 297 001a 3A44     	 add r2,r2,r7
 298 001c 083A     	 subs r2,r2,#8
 299 001e 26FA02F2 	 lsr r2,r6,r2
 212:../Dave/Generated/CRC_SW/crc_sw.c **** 
 300              	 .loc 1 212 0
 301 0022 5140     	 eors r1,r1,r2
 302              	.LVL24:
 211:../Dave/Generated/CRC_SW/crc_sw.c ****                      handle->crc_shift)) ^ buffer) & (uint32_t)0xff;
 303              	 .loc 1 211 0
 304 0024 C9B2     	 uxtb r1,r1
 215:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 305              	 .loc 1 215 0
 306 0026 04FB01F1 	 mul r1,r4,r1
 216:../Dave/Generated/CRC_SW/crc_sw.c ****                                  ((handle->crc_mask) << handle->crc_shift);
 307              	 .loc 1 216 0
 308 002a C7F10804 	 rsb r4,r7,#8
 215:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 309              	 .loc 1 215 0
 310 002e 6A58     	 ldr r2,[r5,r1]
 216:../Dave/Generated/CRC_SW/crc_sw.c ****                                  ((handle->crc_mask) << handle->crc_shift);
 311              	 .loc 1 216 0
 312 0030 A640     	 lsls r6,r6,r4
 313              	.LVL25:
 215:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval  << (CRC_SW_EIGHT - handle->crc_shift))) &
 314              	 .loc 1 215 0
 315 0032 5640     	 eors r6,r6,r2
 316              	 .loc 1 217 0
 317 0034 BB40     	 lsls r3,r3,r7
 216:../Dave/Generated/CRC_SW/crc_sw.c ****                                  ((handle->crc_mask) << handle->crc_shift);
 318              	 .loc 1 216 0
 319 0036 3340     	 ands r3,r3,r6
 320 0038 4360     	 str r3,[r0,#4]
 321              	.LVL26:
 322              	.LBE13:
 323              	.LBE16:
 181:../Dave/Generated/CRC_SW/crc_sw.c **** 
 324              	 .loc 1 181 0
 325 003a 02B0     	 add sp,sp,#8
 326              	.LCFI7:
 327              	 .cfi_remember_state
 328              	 .cfi_def_cfa_offset 16
 329              	 
 330 003c F0BC     	 pop {r4,r5,r6,r7}
 331              	.LCFI8:
 332              	 .cfi_restore 7
 333              	 .cfi_restore 6
 334              	 .cfi_restore 5
 335              	 .cfi_restore 4
 336              	 .cfi_def_cfa_offset 0
 337              	.LVL27:
 338 003e 7047     	 bx lr
 339              	.LVL28:
 340              	.L19:
 341              	.LCFI9:
 342              	 .cfi_restore_state
 343              	.LBB17:
 344              	.LBB14:
 202:../Dave/Generated/CRC_SW/crc_sw.c **** 
 345              	 .loc 1 202 0
 346 0040 4668     	 ldr r6,[r0,#4]
 347 0042 0269     	 ldr r2,[r0,#16]
 348              	.LVL29:
 205:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 349              	 .loc 1 205 0
 350 0044 8469     	 ldr r4,[r0,#24]
 351 0046 4569     	 ldr r5,[r0,#20]
 206:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 352              	 .loc 1 206 0
 353 0048 C368     	 ldr r3,[r0,#12]
 202:../Dave/Generated/CRC_SW/crc_sw.c **** 
 354              	 .loc 1 202 0
 355 004a 26FA02F7 	 lsr r7,r6,r2
 356 004e 7940     	 eors r1,r1,r7
 357              	.LVL30:
 358 0050 C9B2     	 uxtb r1,r1
 205:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 359              	 .loc 1 205 0
 360 0052 04FB01F1 	 mul r1,r4,r1
 206:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 361              	 .loc 1 206 0
 362 0056 9340     	 lsls r3,r3,r2
 205:../Dave/Generated/CRC_SW/crc_sw.c ****                                  (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mask << h
 363              	 .loc 1 205 0
 364 0058 6A58     	 ldr r2,[r5,r1]
 365              	.LVL31:
 366 005a 82EA1622 	 eor r2,r2,r6,lsr#8
 206:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 367              	 .loc 1 206 0
 368 005e 1340     	 ands r3,r3,r2
 369 0060 4360     	 str r3,[r0,#4]
 370              	.LVL32:
 371              	.LBE14:
 372              	.LBE17:
 181:../Dave/Generated/CRC_SW/crc_sw.c **** 
 373              	 .loc 1 181 0
 374 0062 02B0     	 add sp,sp,#8
 375              	.LCFI10:
 376              	 .cfi_def_cfa_offset 16
 377              	 
 378 0064 F0BC     	 pop {r4,r5,r6,r7}
 379              	.LCFI11:
 380              	 .cfi_restore 4
 381              	 .cfi_restore 5
 382              	 .cfi_restore 6
 383              	 .cfi_restore 7
 384              	 .cfi_def_cfa_offset 0
 385              	.LVL33:
 386 0066 7047     	 bx lr
 387              	 .cfi_endproc
 388              	.LFE132:
 390              	 .section .text.CRC_SW_GetCRCResult,"ax",%progbits
 391              	 .align 2
 392              	 .global CRC_SW_GetCRCResult
 393              	 .thumb
 394              	 .thumb_func
 396              	CRC_SW_GetCRCResult:
 397              	.LFB134:
 218:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 219:../Dave/Generated/CRC_SW/crc_sw.c ****     temp++;
 220:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 221:../Dave/Generated/CRC_SW/crc_sw.c **** }
 222:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 223:../Dave/Generated/CRC_SW/crc_sw.c **** 
 224:../Dave/Generated/CRC_SW/crc_sw.c **** /*
 225:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function calculates CRC when input reflection is enabled for xmc1.
 226:../Dave/Generated/CRC_SW/crc_sw.c ****  */
 227:../Dave/Generated/CRC_SW/crc_sw.c **** #if (UC_FAMILY == XMC1)
 228:../Dave/Generated/CRC_SW/crc_sw.c **** static void CRC_SW_lCalculateCRC_xmc1_refin(CRC_SW_t *const handle, void * bufferptr, uint32_t leng
 229:../Dave/Generated/CRC_SW/crc_sw.c **** {
 230:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t crctable;
 231:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t tableindex;
 232:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t tableoffs;
 233:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t data;
 234:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t temp1;
 235:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t shiftvalue;
 236:../Dave/Generated/CRC_SW/crc_sw.c ****   uint8_t *buffer;
 237:../Dave/Generated/CRC_SW/crc_sw.c ****   uint8_t *lookuptable;
 238:../Dave/Generated/CRC_SW/crc_sw.c **** 
 239:../Dave/Generated/CRC_SW/crc_sw.c ****   buffer = (uint8_t *)bufferptr;
 240:../Dave/Generated/CRC_SW/crc_sw.c **** 
 241:../Dave/Generated/CRC_SW/crc_sw.c ****   data = CRC_SW_ZERO;
 242:../Dave/Generated/CRC_SW/crc_sw.c ****   shiftvalue = (uint32_t)handle->crc_shift;
 243:../Dave/Generated/CRC_SW/crc_sw.c ****   crctable = (uint32_t)handle->crctable;
 244:../Dave/Generated/CRC_SW/crc_sw.c ****   tableoffs = (uint32_t)handle->tableoffset;
 245:../Dave/Generated/CRC_SW/crc_sw.c **** 
 246:../Dave/Generated/CRC_SW/crc_sw.c ****   while (length--)
 247:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 248:../Dave/Generated/CRC_SW/crc_sw.c ****     temp1 = (uint32_t) *buffer;
 249:../Dave/Generated/CRC_SW/crc_sw.c **** 
 250:../Dave/Generated/CRC_SW/crc_sw.c ****     /* if input reflection is set */
 251:../Dave/Generated/CRC_SW/crc_sw.c ****     if (handle->config->input_reflection == true)
 252:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 253:../Dave/Generated/CRC_SW/crc_sw.c ****       tableindex = ((handle->crc_runningval >> shiftvalue) ^ temp1) &
 254:../Dave/Generated/CRC_SW/crc_sw.c ****                     (uint32_t)0xff;
 255:../Dave/Generated/CRC_SW/crc_sw.c ****       lookuptable = (uint8_t *)(crctable + tableindex * tableoffs);
 256:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 257:../Dave/Generated/CRC_SW/crc_sw.c ****     else
 258:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 259:../Dave/Generated/CRC_SW/crc_sw.c ****       tableindex = ((handle->crc_runningval >>
 260:../Dave/Generated/CRC_SW/crc_sw.c ****                     ((handle->config->crc_width - CRC_SW_EIGHT) + shiftvalue)) ^ temp1) & (uint32_t
 261:../Dave/Generated/CRC_SW/crc_sw.c ****       lookuptable = (uint8_t *)(crctable + tableindex * tableoffs);
 262:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 263:../Dave/Generated/CRC_SW/crc_sw.c ****     /* load the lookup table value based on CRC width */
 264:../Dave/Generated/CRC_SW/crc_sw.c ****     if (handle->config->crc_width == CRC_SW_EIGHT)
 265:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 266:../Dave/Generated/CRC_SW/crc_sw.c ****       data = *lookuptable;
 267:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 268:../Dave/Generated/CRC_SW/crc_sw.c ****     else if (handle->config->crc_width == CRC_SW_SIXTEEN)
 269:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 270:../Dave/Generated/CRC_SW/crc_sw.c ****       data = (*lookuptable | (*(lookuptable+1) << CRC_SW_EIGHT));
 271:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 272:../Dave/Generated/CRC_SW/crc_sw.c ****     else if (handle->config->crc_width == CRC_SW_THIRTYTWO)
 273:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 274:../Dave/Generated/CRC_SW/crc_sw.c ****       data = (*lookuptable | (*(lookuptable+1) << CRC_SW_EIGHT) | *(lookuptable+2) << CRC_SW_SIXTEE
 275:../Dave/Generated/CRC_SW/crc_sw.c ****               *(lookuptable+3) << CRC_SW_TWENTYFOUR);
 276:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 277:../Dave/Generated/CRC_SW/crc_sw.c **** 
 278:../Dave/Generated/CRC_SW/crc_sw.c ****     /* if input reflection is set */
 279:../Dave/Generated/CRC_SW/crc_sw.c ****     if (handle->config->input_reflection == true)
 280:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 281:../Dave/Generated/CRC_SW/crc_sw.c ****       handle->crc_runningval = (data ^ (handle->crc_runningval >> CRC_SW_EIGHT)) & (handle->crc_mas
 282:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 283:../Dave/Generated/CRC_SW/crc_sw.c ****     else
 284:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 285:../Dave/Generated/CRC_SW/crc_sw.c ****       handle->crc_runningval = (data ^ (handle->crc_runningval << (CRC_SW_EIGHT - handle->crc_shift
 286:../Dave/Generated/CRC_SW/crc_sw.c ****                                ((handle->crc_mask) << (handle->crc_shift));
 287:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 288:../Dave/Generated/CRC_SW/crc_sw.c **** 
 289:../Dave/Generated/CRC_SW/crc_sw.c ****     buffer++;
 290:../Dave/Generated/CRC_SW/crc_sw.c ****   } /*End of "while (Length--)"*/
 291:../Dave/Generated/CRC_SW/crc_sw.c **** }
 292:../Dave/Generated/CRC_SW/crc_sw.c **** #endif
 293:../Dave/Generated/CRC_SW/crc_sw.c **** 
 294:../Dave/Generated/CRC_SW/crc_sw.c **** /**
 295:../Dave/Generated/CRC_SW/crc_sw.c ****  * This function returns the CRC value for the already calculated CRC by doing
 296:../Dave/Generated/CRC_SW/crc_sw.c ****  * reflection(if selected) and inversion.
 297:../Dave/Generated/CRC_SW/crc_sw.c ****  **/
 298:../Dave/Generated/CRC_SW/crc_sw.c **** uint32_t CRC_SW_GetCRCResult(CRC_SW_t *const handle)
 299:../Dave/Generated/CRC_SW/crc_sw.c **** {
 398              	 .loc 1 299 0
 399              	 .cfi_startproc
 400              	 
 401              	 
 402              	 
 403              	.LVL34:
 404 0000 F0B4     	 push {r4,r5,r6,r7}
 405              	.LCFI12:
 406              	 .cfi_def_cfa_offset 16
 407              	 .cfi_offset 4,-16
 408              	 .cfi_offset 5,-12
 409              	 .cfi_offset 6,-8
 410              	 .cfi_offset 7,-4
 300:../Dave/Generated/CRC_SW/crc_sw.c ****   uint32_t result;
 301:../Dave/Generated/CRC_SW/crc_sw.c ****   
 302:../Dave/Generated/CRC_SW/crc_sw.c ****   if (handle != NULL)
 411              	 .loc 1 302 0
 412 0002 0646     	 mov r6,r0
 413 0004 10B3     	 cbz r0,.L27
 303:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 304:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval &= (handle->crc_mask << handle->crc_shift);
 414              	 .loc 1 304 0
 415 0006 0269     	 ldr r2,[r0,#16]
 416 0008 C768     	 ldr r7,[r0,#12]
 305:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval >>= handle->crc_shift;
 306:../Dave/Generated/CRC_SW/crc_sw.c **** 
 307:../Dave/Generated/CRC_SW/crc_sw.c ****     /* Do not reflect the bytes if input reflection and output reflection are set to true. Otherwis
 308:../Dave/Generated/CRC_SW/crc_sw.c ****     if (handle->config->input_reflection != handle->config->output_reflection)
 417              	 .loc 1 308 0
 418 000a 09C8     	 ldmia r0,{r0,r3}
 419              	.LVL35:
 304:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval >>= handle->crc_shift;
 420              	 .loc 1 304 0
 421 000c 07FA02F1 	 lsl r1,r7,r2
 422 0010 0B40     	 ands r3,r3,r1
 423              	 .loc 1 308 0
 424 0012 047C     	 ldrb r4,[r0,#16]
 425 0014 417C     	 ldrb r1,[r0,#17]
 305:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval >>= handle->crc_shift;
 426              	 .loc 1 305 0
 427 0016 D340     	 lsrs r3,r3,r2
 428              	 .loc 1 308 0
 429 0018 8C42     	 cmp r4,r1
 305:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval >>= handle->crc_shift;
 430              	 .loc 1 305 0
 431 001a 7360     	 str r3,[r6,#4]
 432              	 .loc 1 308 0
 433 001c 14D0     	 beq .L28
 309:../Dave/Generated/CRC_SW/crc_sw.c ****     {
 310:../Dave/Generated/CRC_SW/crc_sw.c ****       handle->crc_runningval = CRC_SW_lReflect(handle->crc_runningval, handle->config->crc_width);
 434              	 .loc 1 310 0
 435 001e 0568     	 ldr r5,[r0]
 436              	.LVL36:
 437              	.LBB18:
 438              	.LBB19:
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 439              	 .loc 1 96 0
 440 0020 012D     	 cmp r5,#1
  94:../Dave/Generated/CRC_SW/crc_sw.c ****   
 441              	 .loc 1 94 0
 442 0022 03F00101 	 and r1,r3,#1
 443              	.LVL37:
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 444              	 .loc 1 96 0
 445 0026 08D9     	 bls .L24
 446 0028 0122     	 movs r2,#1
 447              	.LVL38:
 448              	.L26:
  98:../Dave/Generated/CRC_SW/crc_sw.c ****     retval = (retval << CRC_SW_ONE) | (data & CRC_SW_ONE);
 449              	 .loc 1 98 0
 450 002a 5B08     	 lsrs r3,r3,#1
 451              	.LVL39:
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 452              	 .loc 1 96 0
 453 002c 0132     	 adds r2,r2,#1
 454              	.LVL40:
  99:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 455              	 .loc 1 99 0
 456 002e 03F00104 	 and r4,r3,#1
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 457              	 .loc 1 96 0
 458 0032 AA42     	 cmp r2,r5
  99:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 459              	 .loc 1 99 0
 460 0034 44EA4101 	 orr r1,r4,r1,lsl#1
 461              	.LVL41:
  96:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 462              	 .loc 1 96 0
 463 0038 F7D1     	 bne .L26
 464              	.LVL42:
 465              	.L24:
 466              	.LBE19:
 467              	.LBE18:
 311:../Dave/Generated/CRC_SW/crc_sw.c ****     }
 312:../Dave/Generated/CRC_SW/crc_sw.c **** 
 313:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval ^= handle->config->output_inversion;
 468              	 .loc 1 313 0
 469 003a C068     	 ldr r0,[r0,#12]
 470 003c 4140     	 eors r1,r1,r0
 314:../Dave/Generated/CRC_SW/crc_sw.c ****     handle->crc_runningval &= handle->crc_mask;
 471              	 .loc 1 314 0
 472 003e 01EA0700 	 and r0,r1,r7
 473 0042 7060     	 str r0,[r6,#4]
 474              	.LVL43:
 315:../Dave/Generated/CRC_SW/crc_sw.c **** 
 316:../Dave/Generated/CRC_SW/crc_sw.c ****     result = handle->crc_runningval;
 317:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 318:../Dave/Generated/CRC_SW/crc_sw.c ****   else
 319:../Dave/Generated/CRC_SW/crc_sw.c ****   {
 320:../Dave/Generated/CRC_SW/crc_sw.c ****     result = CRC_SW_ZERO;
 321:../Dave/Generated/CRC_SW/crc_sw.c ****   }
 322:../Dave/Generated/CRC_SW/crc_sw.c ****   return (result);
 323:../Dave/Generated/CRC_SW/crc_sw.c **** }
 475              	 .loc 1 323 0
 476 0044 F0BC     	 pop {r4,r5,r6,r7}
 477              	.LCFI13:
 478              	 .cfi_remember_state
 479              	 .cfi_restore 7
 480              	 .cfi_restore 6
 481              	 .cfi_restore 5
 482              	 .cfi_restore 4
 483              	 .cfi_def_cfa_offset 0
 484              	.LVL44:
 485 0046 7047     	 bx lr
 486              	.LVL45:
 487              	.L28:
 488              	.LCFI14:
 489              	 .cfi_restore_state
 490 0048 1946     	 mov r1,r3
 491 004a F6E7     	 b .L24
 492              	.LVL46:
 493              	.L27:
 494 004c F0BC     	 pop {r4,r5,r6,r7}
 495              	.LCFI15:
 496              	 .cfi_restore 4
 497              	 .cfi_restore 5
 498              	 .cfi_restore 6
 499              	 .cfi_restore 7
 500              	 .cfi_def_cfa_offset 0
 501 004e 7047     	 bx lr
 502              	 .cfi_endproc
 503              	.LFE134:
 505              	 .text
 506              	.Letext0:
 507              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 508              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 509              	 .file 4 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Dave/Generated/DAVE_Common.h"
 510              	 .file 5 "../Dave/Generated/CRC_SW/crc_sw.h"
 511              	 .file 6 "C:/Users/Utente/Desktop/Tesi/Firmware_Software/DAVE project/S2GLP_Pulsed_Doppler/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 crc_sw.c
    {standard input}:20     .text.CRC_SW_GetAppVersion:00000000 $t
    {standard input}:25     .text.CRC_SW_GetAppVersion:00000000 CRC_SW_GetAppVersion
    {standard input}:56     .text.CRC_SW_Init:00000000 $t
    {standard input}:61     .text.CRC_SW_Init:00000000 CRC_SW_Init
    {standard input}:129    .text.CRC_SW_CalculateCRC:00000000 $t
    {standard input}:134    .text.CRC_SW_CalculateCRC:00000000 CRC_SW_CalculateCRC
    {standard input}:237    .text.CRC_SW_UpdateCRC:00000000 $t
    {standard input}:242    .text.CRC_SW_UpdateCRC:00000000 CRC_SW_UpdateCRC
    {standard input}:391    .text.CRC_SW_GetCRCResult:00000000 $t
    {standard input}:396    .text.CRC_SW_GetCRCResult:00000000 CRC_SW_GetCRCResult
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
